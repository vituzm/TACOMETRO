
TACOMETRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08008388  08008388  00009388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008788  08008788  0000a1fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008788  08008788  00009788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008790  08008790  0000a1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008790  08008790  00009790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008794  08008794  00009794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008798  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001fc  08008994  0000a1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08008994  0000a50c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e29a  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207f  00000000  00000000  000184c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a83  00000000  00000000  0001b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b5e  00000000  00000000  0001bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010419  00000000  00000000  0003e899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d26c6  00000000  00000000  0004ecb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a14  00000000  00000000  001213bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00125dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008370 	.word	0x08008370

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08008370 	.word	0x08008370

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f000 fdec 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f83e 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 f9e2 	bl	800134c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f88:	f000 f8a8 	bl	80010dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f8c:	f000 f91e 	bl	80011cc <MX_TIM5_Init>
  MX_TIM10_Init();
 8000f90:	f000 f98e 	bl	80012b0 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000f94:	f000 f9b0 	bl	80012f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);   // INPUT CAPTURE
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <main+0x6c>)
 8000f9c:	f002 f9c4 	bl	8003328 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); 				// TIMER PARA ENVIAR AS MENSAGENS EM DETERMINADO TEMPO
 8000fa0:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <main+0x70>)
 8000fa2:	f001 ffd5 	bl	8002f50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); 	// GERAÇÃO DE SINAL PWM
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <main+0x74>)
 8000faa:	f002 f89b 	bl	80030e4 <HAL_TIM_PWM_Start>

  strncpy(msg, "MEDIDOR DE SINAIS \n\r", msgSIZE);
 8000fae:	2264      	movs	r2, #100	@ 0x64
 8000fb0:	490f      	ldr	r1, [pc, #60]	@ (8000ff0 <main+0x78>)
 8000fb2:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <main+0x7c>)
 8000fb4:	f005 f907 	bl	80061c6 <strncpy>
  HAL_UART_Transmit(&huart2, msg, strlen(msg), TIMEOUT_SERIAL);
 8000fb8:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <main+0x7c>)
 8000fba:	f7ff f979 	bl	80002b0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	2364      	movs	r3, #100	@ 0x64
 8000fc4:	490b      	ldr	r1, [pc, #44]	@ (8000ff4 <main+0x7c>)
 8000fc6:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <main+0x80>)
 8000fc8:	f003 fb39 	bl	800463e <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &ValSerial, 1);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	490b      	ldr	r1, [pc, #44]	@ (8000ffc <main+0x84>)
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <main+0x80>)
 8000fd2:	f003 fbc6 	bl	8004762 <HAL_UART_Receive_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <main+0x74>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <main+0x68>
 8000fe4:	20000260 	.word	0x20000260
 8000fe8:	200002a8 	.word	0x200002a8
 8000fec:	20000218 	.word	0x20000218
 8000ff0:	08008388 	.word	0x08008388
 8000ff4:	20000344 	.word	0x20000344
 8000ff8:	200002f0 	.word	0x200002f0
 8000ffc:	200003b0 	.word	0x200003b0

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	@ 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2234      	movs	r2, #52	@ 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f005 f8d1 	bl	80061b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <SystemClock_Config+0xd4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	4a29      	ldr	r2, [pc, #164]	@ (80010d4 <SystemClock_Config+0xd4>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	@ 0x40
 8001034:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <SystemClock_Config+0xd4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <SystemClock_Config+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800104c:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <SystemClock_Config+0xd8>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <SystemClock_Config+0xd8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001074:	2310      	movs	r3, #16
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001078:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800107c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800107e:	2304      	movs	r3, #4
 8001080:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fc70 	bl	8002974 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800109a:	f000 fad5 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	230f      	movs	r3, #15
 80010a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2302      	movs	r3, #2
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 f910 	bl	80022e0 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010c6:	f000 fabf 	bl	8001648 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	@ 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	@ 0x38
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <MX_TIM2_Init+0xec>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001114:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001116:	f240 3247 	movw	r2, #839	@ 0x347
 800111a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <MX_TIM2_Init+0xec>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001124:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001128:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <MX_TIM2_Init+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001132:	2280      	movs	r2, #128	@ 0x80
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001136:	4824      	ldr	r0, [pc, #144]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001138:	f001 feba 	bl	8002eb0 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001142:	f000 fa81 	bl	8001648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001150:	4619      	mov	r1, r3
 8001152:	481d      	ldr	r0, [pc, #116]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001154:	f002 fc76 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800115e:	f000 fa73 	bl	8001648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001162:	4819      	ldr	r0, [pc, #100]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001164:	f001 ff64 	bl	8003030 <HAL_TIM_PWM_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800116e:	f000 fa6b 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	4619      	mov	r1, r3
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_TIM2_Init+0xec>)
 8001182:	f003 f97f 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800118c:	f000 fa5c 	bl	8001648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	2360      	movs	r3, #96	@ 0x60
 8001192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =  500;
 8001194:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <MX_TIM2_Init+0xec>)
 80011aa:	f002 fb89 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80011b4:	f000 fa48 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <MX_TIM2_Init+0xec>)
 80011ba:	f000 faf5 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	@ 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000218 	.word	0x20000218

080011cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 80011f8:	4a2c      	ldr	r2, [pc, #176]	@ (80012ac <MX_TIM5_Init+0xe0>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 80011fe:	2253      	movs	r2, #83	@ 0x53
 8001200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001210:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 8001212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001216:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800121e:	4822      	ldr	r0, [pc, #136]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 8001220:	f001 fe46 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800122a:	f000 fa0d 	bl	8001648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4619      	mov	r1, r3
 800123a:	481b      	ldr	r0, [pc, #108]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 800123c:	f002 fc02 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001246:	f000 f9ff 	bl	8001648 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800124a:	4817      	ldr	r0, [pc, #92]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 800124c:	f002 f812 	bl	8003274 <HAL_TIM_IC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001256:	f000 f9f7 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 800126a:	f003 f90b 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001274:	f000 f9e8 	bl	8001648 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001278:	230a      	movs	r3, #10
 800127a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	2204      	movs	r2, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM5_Init+0xdc>)
 8001290:	f002 fa7a 	bl	8003788 <HAL_TIM_IC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 800129a:	f000 f9d5 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000260 	.word	0x20000260
 80012ac:	40000c00 	.word	0x40000c00

080012b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <MX_TIM10_Init+0x44>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012bc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80012c0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ce:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_TIM10_Init+0x40>)
 80012de:	f001 fde7 	bl	8002eb0 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80012e8:	f000 f9ae 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002a8 	.word	0x200002a8
 80012f4:	40014400 	.word	0x40014400

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_USART2_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001330:	f003 f938 	bl	80045a4 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 f985 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002f0 	.word	0x200002f0
 8001348:	40004400 	.word	0x40004400

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_GPIO_Init+0xd0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a2c      	ldr	r2, [pc, #176]	@ (800141c <MX_GPIO_Init+0xd0>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_GPIO_Init+0xd0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a25      	ldr	r2, [pc, #148]	@ (800141c <MX_GPIO_Init+0xd0>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_GPIO_Init+0xd0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_GPIO_Init+0xd0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <MX_GPIO_Init+0xd0>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_GPIO_Init+0xd0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_GPIO_Init+0xd0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a17      	ldr	r2, [pc, #92]	@ (800141c <MX_GPIO_Init+0xd0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_GPIO_Init+0xd0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2120      	movs	r1, #32
 80013d6:	4812      	ldr	r0, [pc, #72]	@ (8001420 <MX_GPIO_Init+0xd4>)
 80013d8:	f000 ff68 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_GPIO_Init+0xd8>)
 80013f4:	f000 fdc6 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_GPIO_Init+0xd4>)
 8001410:	f000 fdb8 	bl	8001f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020800 	.word	0x40020800

08001428 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief Calcula o periodo do sinal
 * @param Handler do timer que chamou o callback
 * @attention None
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ // IT do Input Capture
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	do{ // como os valores inniciam com zero em borda é preciso usaro do while
		borda[subida] = borda[descida];// trocando os valores de lugar
 8001430:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a30      	ldr	r2, [pc, #192]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001436:	6013      	str	r3, [r2, #0]
		borda[descida] = borda[atual];
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a2e      	ldr	r2, [pc, #184]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800143e:	6053      	str	r3, [r2, #4]
		borda[atual] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);  // pegando a borda atuual
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001450:	edc3 7a02 	vstr	s15, [r3, #8]
		periodo = borda[atual] - borda[subida];
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001456:	ed93 7a02 	vldr	s14, [r3, #8]
 800145a:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001466:	edc3 7a00 	vstr	s15, [r3]

		double Periodo_Em_Segundos = periodo/1000000.0; //nescessario para calcular a frequencia 1/s
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0xd4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f88a 	bl	8000588 <__aeabi_f2d>
 8001474:	a31e      	add	r3, pc, #120	@ (adr r3, 80014f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff fa07 	bl	800088c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	e9c7 2302 	strd	r2, r3, [r7, #8]
		frequencia = 1.00/Periodo_Em_Segundos; //frequuencia em hz's
 8001486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800148a:	f04f 0000 	mov.w	r0, #0
 800148e:	491c      	ldr	r1, [pc, #112]	@ (8001500 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001490:	f7ff f9fc 	bl	800088c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fba4 	bl	8000be8 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80014a4:	6013      	str	r3, [r2, #0]

		//Duty Cycle= T on / (T on +T off ) * 100
		DutyCicle_OUT = ((borda[descida] - borda[subida])/periodo) * 100; // periodo ativo do sinal
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80014a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0xd4>)
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001508 <HAL_TIM_IC_CaptureCallback+0xe0>
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
	}while(borda[atual] < borda[subida]);//  Caso o tempo do contador se esgote
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80014d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d4a5      	bmi.n	8001430 <HAL_TIM_IC_CaptureCallback+0x8>


}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	00000000 	.word	0x00000000
 80014f4:	412e8480 	.word	0x412e8480
 80014f8:	20000338 	.word	0x20000338
 80014fc:	20000334 	.word	0x20000334
 8001500:	3ff00000 	.word	0x3ff00000
 8001504:	200003a8 	.word	0x200003a8
 8001508:	42c80000 	.word	0x42c80000
 800150c:	200003ac 	.word	0x200003ac

08001510 <HAL_TIM_PeriodElapsedCallback>:
 * @param None
 * @retval None
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001514:	b08a      	sub	sp, #40	@ 0x28
 8001516:	af08      	add	r7, sp, #32
 8001518:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a24      	ldr	r2, [pc, #144]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d13f      	bne.n	80015a4 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		RPM = frequencia * MIN;
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f82d 	bl	8000588 <__aeabi_f2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001534:	f7ff f880 	bl	8000638 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb2a 	bl	8000b98 <__aeabi_d2iz>
 8001544:	4603      	mov	r3, r0
 8001546:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001548:	6013      	str	r3, [r2, #0]
		snprintf(msg, msgSIZE, "Periodo: %.2f us | Frequencia: %.2f | Dutycicle: %.2f%% | RPM = %i \r\n", periodo, frequencia, DutyCicle_OUT, RPM);
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f81a 	bl	8000588 <__aeabi_f2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f813 	bl	8000588 <__aeabi_f2d>
 8001562:	4680      	mov	r8, r0
 8001564:	4689      	mov	r9, r1
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f80c 	bl	8000588 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4911      	ldr	r1, [pc, #68]	@ (80015bc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001576:	6809      	ldr	r1, [r1, #0]
 8001578:	9106      	str	r1, [sp, #24]
 800157a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800157e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001582:	e9cd 4500 	strd	r4, r5, [sp]
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001588:	2164      	movs	r1, #100	@ 0x64
 800158a:	4810      	ldr	r0, [pc, #64]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800158c:	f004 fd9c 	bl	80060c8 <sniprintf>
		HAL_UART_Transmit(&huart2, msg, strlen(msg), TIMEOUT_SERIAL);
 8001590:	480e      	ldr	r0, [pc, #56]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001592:	f7fe fe8d 	bl	80002b0 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29a      	uxth	r2, r3
 800159a:	2364      	movs	r3, #100	@ 0x64
 800159c:	490b      	ldr	r1, [pc, #44]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800159e:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015a0:	f003 f84d 	bl	800463e <HAL_UART_Transmit>
	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015ae:	bf00      	nop
 80015b0:	40014400 	.word	0x40014400
 80015b4:	200003a8 	.word	0x200003a8
 80015b8:	404e0000 	.word	0x404e0000
 80015bc:	200003b4 	.word	0x200003b4
 80015c0:	20000334 	.word	0x20000334
 80015c4:	200003ac 	.word	0x200003ac
 80015c8:	080083a0 	.word	0x080083a0
 80015cc:	20000344 	.word	0x20000344
 80015d0:	200002f0 	.word	0x200002f0

080015d4 <HAL_UART_RxCpltCallback>:
 * @brief Set o valor de acordo com o duty cicle dado pelo usuario
 * @param Valor dado pelo usuário na serial: ValSerial
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	ValSerial = ValSerial-'0';
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <HAL_UART_RxCpltCallback+0x5c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b30      	subs	r3, #48	@ 0x30
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_UART_RxCpltCallback+0x5c>)
 80015e6:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, DutyCicle_IN[ValSerial]);
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_UART_RxCpltCallback+0x5c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_RxCpltCallback+0x60>)
 80015f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_UART_RxCpltCallback+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	639a      	str	r2, [r3, #56]	@ 0x38
	snprintf(msg, msgSIZE, "recebido serial %i\r\n", ValSerial);
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_UART_RxCpltCallback+0x5c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <HAL_UART_RxCpltCallback+0x68>)
 8001600:	2164      	movs	r1, #100	@ 0x64
 8001602:	480f      	ldr	r0, [pc, #60]	@ (8001640 <HAL_UART_RxCpltCallback+0x6c>)
 8001604:	f004 fd60 	bl	80060c8 <sniprintf>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), TIMEOUT_SERIAL);
 8001608:	480d      	ldr	r0, [pc, #52]	@ (8001640 <HAL_UART_RxCpltCallback+0x6c>)
 800160a:	f7fe fe51 	bl	80002b0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	2364      	movs	r3, #100	@ 0x64
 8001614:	490a      	ldr	r1, [pc, #40]	@ (8001640 <HAL_UART_RxCpltCallback+0x6c>)
 8001616:	480b      	ldr	r0, [pc, #44]	@ (8001644 <HAL_UART_RxCpltCallback+0x70>)
 8001618:	f003 f811 	bl	800463e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &ValSerial, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	4904      	ldr	r1, [pc, #16]	@ (8001630 <HAL_UART_RxCpltCallback+0x5c>)
 8001620:	4808      	ldr	r0, [pc, #32]	@ (8001644 <HAL_UART_RxCpltCallback+0x70>)
 8001622:	f003 f89e 	bl	8004762 <HAL_UART_Receive_IT>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003b0 	.word	0x200003b0
 8001634:	20000000 	.word	0x20000000
 8001638:	20000218 	.word	0x20000218
 800163c:	080083e8 	.word	0x080083e8
 8001640:	20000344 	.word	0x20000344
 8001644:	200002f0 	.word	0x200002f0

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001692:	2007      	movs	r0, #7
 8001694:	f000 fba2 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	@ 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c4:	d10e      	bne.n	80016e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a32      	ldr	r2, [pc, #200]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80016e2:	e054      	b.n	800178e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2c      	ldr	r2, [pc, #176]	@ (800179c <HAL_TIM_Base_MspInit+0xf8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d134      	bne.n	8001758 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001736:	2302      	movs	r3, #2
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4817      	ldr	r0, [pc, #92]	@ (80017a0 <HAL_TIM_Base_MspInit+0xfc>)
 8001742:	f000 fc1f 	bl	8001f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2032      	movs	r0, #50	@ 0x32
 800174c:	f000 fb51 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001750:	2032      	movs	r0, #50	@ 0x32
 8001752:	f000 fb6a 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 8001756:	e01a      	b.n	800178e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM10)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_TIM_Base_MspInit+0x100>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d115      	bne.n	800178e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2019      	movs	r0, #25
 8001784:	f000 fb35 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001788:	2019      	movs	r0, #25
 800178a:	f000 fb4e 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	@ 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40000c00 	.word	0x40000c00
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40014400 	.word	0x40014400

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c8:	d11e      	bne.n	8001808 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4619      	mov	r1, r3
 8001802:	4804      	ldr	r0, [pc, #16]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 8001804:	f000 fbbe 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	40020400 	.word	0x40020400

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_UART_MspInit+0x94>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d133      	bne.n	80018a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <HAL_UART_MspInit+0x98>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <HAL_UART_MspInit+0x98>)
 8001844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_UART_MspInit+0x98>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_UART_MspInit+0x98>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <HAL_UART_MspInit+0x98>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_UART_MspInit+0x98>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001872:	230c      	movs	r3, #12
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001882:	2307      	movs	r3, #7
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <HAL_UART_MspInit+0x9c>)
 800188e:	f000 fb79 	bl	8001f84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2026      	movs	r0, #38	@ 0x26
 8001898:	f000 faab 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800189c:	2026      	movs	r0, #38	@ 0x26
 800189e:	f000 fac4 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <NMI_Handler+0x4>

080018c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <MemManage_Handler+0x4>

080018d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <UsageFault_Handler+0x4>

080018e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190e:	f000 f975 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800191e:	f001 fe2b 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200002a8 	.word	0x200002a8

0800192c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <USART2_IRQHandler+0x10>)
 8001932:	f002 ff47 	bl	80047c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200002f0 	.word	0x200002f0

08001940 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <TIM5_IRQHandler+0x10>)
 8001946:	f001 fe17 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000260 	.word	0x20000260

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_kill>:

int _kill(int pid, int sig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196e:	f004 fc87 	bl	8006280 <__errno>
 8001972:	4603      	mov	r3, r0
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_exit>:

void _exit (int status)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001996:	bf00      	nop
 8001998:	e7fd      	b.n	8001996 <_exit+0x12>

0800199a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e00a      	b.n	80019c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ac:	f3af 8000 	nop.w
 80019b0:	4601      	mov	r1, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	b2ca      	uxtb	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbf0      	blt.n	80019ac <_read+0x12>
  }

  return len;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e009      	b.n	80019fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	60ba      	str	r2, [r7, #8]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf1      	blt.n	80019e6 <_write+0x12>
  }
  return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_close>:

int _close(int file)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a34:	605a      	str	r2, [r3, #4]
  return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_isatty>:

int _isatty(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f004 fbec 	bl	8006280 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	200003b8 	.word	0x200003b8
 8001adc:	20000510 	.word	0x20000510

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0a:	490e      	ldr	r1, [pc, #56]	@ (8001b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b20:	4c0b      	ldr	r4, [pc, #44]	@ (8001b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2e:	f7ff ffd7 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f004 fbab 	bl	800628c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff fa1f 	bl	8000f78 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001b48:	08008798 	.word	0x08008798
  ldr r2, =_sbss
 8001b4c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001b50:	2000050c 	.word	0x2000050c

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f92b 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fd62 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f943 	bl	8001e46 <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 f90b 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	20000030 	.word	0x20000030
 8001bf8:	2000002c 	.word	0x2000002c

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000030 	.word	0x20000030
 8001c20:	200003bc 	.word	0x200003bc

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200003bc 	.word	0x200003bc

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff feda 	bl	8001c24 <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d008      	beq.n	8001e90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2280      	movs	r2, #128	@ 0x80
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e052      	b.n	8001f36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0216 	bic.w	r2, r2, #22
 8001e9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <HAL_DMA_Abort+0x62>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0208 	bic.w	r2, r2, #8
 8001ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	e013      	b.n	8001f0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee2:	f7ff fe9f 	bl	8001c24 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d90c      	bls.n	8001f0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e015      	b.n	8001f36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e4      	bne.n	8001ee2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1c:	223f      	movs	r2, #63	@ 0x3f
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d004      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e00c      	b.n	8001f76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2205      	movs	r2, #5
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e165      	b.n	800226c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8154 	bne.w	8002266 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80ae 	beq.w	8002266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <HAL_GPIO_Init+0x300>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a5c      	ldr	r2, [pc, #368]	@ (8002284 <HAL_GPIO_Init+0x300>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b5a      	ldr	r3, [pc, #360]	@ (8002284 <HAL_GPIO_Init+0x300>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a58      	ldr	r2, [pc, #352]	@ (8002288 <HAL_GPIO_Init+0x304>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <HAL_GPIO_Init+0x308>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d025      	beq.n	800219e <HAL_GPIO_Init+0x21a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4e      	ldr	r2, [pc, #312]	@ (8002290 <HAL_GPIO_Init+0x30c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01f      	beq.n	800219a <HAL_GPIO_Init+0x216>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4d      	ldr	r2, [pc, #308]	@ (8002294 <HAL_GPIO_Init+0x310>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d019      	beq.n	8002196 <HAL_GPIO_Init+0x212>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4c      	ldr	r2, [pc, #304]	@ (8002298 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x20e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4b      	ldr	r2, [pc, #300]	@ (800229c <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x20a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x206>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a49      	ldr	r2, [pc, #292]	@ (80022a4 <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x202>
 8002182:	2306      	movs	r3, #6
 8002184:	e00c      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 8002186:	2307      	movs	r3, #7
 8002188:	e00a      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800218a:	2305      	movs	r3, #5
 800218c:	e008      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800218e:	2304      	movs	r3, #4
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 8002192:	2303      	movs	r3, #3
 8002194:	e004      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 8002196:	2302      	movs	r3, #2
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800219e:	2300      	movs	r3, #0
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f002 0203 	and.w	r2, r2, #3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4093      	lsls	r3, r2
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b0:	4935      	ldr	r1, [pc, #212]	@ (8002288 <HAL_GPIO_Init+0x304>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a26      	ldr	r2, [pc, #152]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002212:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002236:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002260:	4a11      	ldr	r2, [pc, #68]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b0f      	cmp	r3, #15
 8002270:	f67f ae96 	bls.w	8001fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40013800 	.word	0x40013800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40020800 	.word	0x40020800
 8002298:	40020c00 	.word	0x40020c00
 800229c:	40021000 	.word	0x40021000
 80022a0:	40021400 	.word	0x40021400
 80022a4:	40021800 	.word	0x40021800
 80022a8:	40013c00 	.word	0x40013c00

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c8:	e003      	b.n	80022d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0cc      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b68      	ldr	r3, [pc, #416]	@ (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d90c      	bls.n	800231c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b65      	ldr	r3, [pc, #404]	@ (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b8      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002334:	4b59      	ldr	r3, [pc, #356]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a58      	ldr	r2, [pc, #352]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800233e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800234c:	4b53      	ldr	r3, [pc, #332]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a52      	ldr	r2, [pc, #328]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b50      	ldr	r3, [pc, #320]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	494d      	ldr	r1, [pc, #308]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d044      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b47      	ldr	r3, [pc, #284]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d119      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d003      	beq.n	800239e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	2b03      	cmp	r3, #3
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b3f      	ldr	r3, [pc, #252]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3b      	ldr	r3, [pc, #236]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e067      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b37      	ldr	r3, [pc, #220]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4934      	ldr	r1, [pc, #208]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7ff fc28 	bl	8001c24 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff fc24 	bl	8001c24 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e04f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d20c      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e032      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4916      	ldr	r1, [pc, #88]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	490e      	ldr	r1, [pc, #56]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002466:	f000 f855 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 800246a:	4602      	mov	r2, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	490a      	ldr	r1, [pc, #40]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	5ccb      	ldrb	r3, [r1, r3]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	4a09      	ldr	r2, [pc, #36]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fb88 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00
 800249c:	40023800 	.word	0x40023800
 80024a0:	08008400 	.word	0x08008400
 80024a4:	20000028 	.word	0x20000028
 80024a8:	2000002c 	.word	0x2000002c

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000028 	.word	0x20000028

080024c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c8:	f7ff fff0 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08008410 	.word	0x08008410

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f0:	f7ff ffdc 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	@ (8002510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	08008410 	.word	0x08008410

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b0ae      	sub	sp, #184	@ 0xb8
 800251a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4bcb      	ldr	r3, [pc, #812]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b0c      	cmp	r3, #12
 8002544:	f200 8206 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x440>
 8002548:	a201      	add	r2, pc, #4	@ (adr r2, 8002550 <HAL_RCC_GetSysClockFreq+0x3c>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002585 	.word	0x08002585
 8002554:	08002955 	.word	0x08002955
 8002558:	08002955 	.word	0x08002955
 800255c:	08002955 	.word	0x08002955
 8002560:	0800258d 	.word	0x0800258d
 8002564:	08002955 	.word	0x08002955
 8002568:	08002955 	.word	0x08002955
 800256c:	08002955 	.word	0x08002955
 8002570:	08002595 	.word	0x08002595
 8002574:	08002955 	.word	0x08002955
 8002578:	08002955 	.word	0x08002955
 800257c:	08002955 	.word	0x08002955
 8002580:	08002785 	.word	0x08002785
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4bb9      	ldr	r3, [pc, #740]	@ (800286c <HAL_RCC_GetSysClockFreq+0x358>)
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800258a:	e1e7      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258c:	4bb8      	ldr	r3, [pc, #736]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x35c>)
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002592:	e1e3      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4bb4      	ldr	r3, [pc, #720]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800259c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d071      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ac:	4bae      	ldr	r3, [pc, #696]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025d2:	4622      	mov	r2, r4
 80025d4:	462b      	mov	r3, r5
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e4:	0150      	lsls	r0, r2, #5
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4621      	mov	r1, r4
 80025ec:	1a51      	subs	r1, r2, r1
 80025ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80025f0:	4629      	mov	r1, r5
 80025f2:	eb63 0301 	sbc.w	r3, r3, r1
 80025f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002604:	4649      	mov	r1, r9
 8002606:	018b      	lsls	r3, r1, #6
 8002608:	4641      	mov	r1, r8
 800260a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260e:	4641      	mov	r1, r8
 8002610:	018a      	lsls	r2, r1, #6
 8002612:	4641      	mov	r1, r8
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002618:	4649      	mov	r1, r9
 800261a:	eb63 0301 	sbc.w	r3, r3, r1
 800261e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800262c:	4649      	mov	r1, r9
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4641      	mov	r1, r8
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4641      	mov	r1, r8
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4622      	mov	r2, r4
 8002642:	189b      	adds	r3, r3, r2
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
 8002646:	462b      	mov	r3, r5
 8002648:	460a      	mov	r2, r1
 800264a:	eb42 0303 	adc.w	r3, r2, r3
 800264e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800265c:	4629      	mov	r1, r5
 800265e:	024b      	lsls	r3, r1, #9
 8002660:	4621      	mov	r1, r4
 8002662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002666:	4621      	mov	r1, r4
 8002668:	024a      	lsls	r2, r1, #9
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002672:	2200      	movs	r2, #0
 8002674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800267c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002680:	f7fe fb02 	bl	8000c88 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800268e:	e067      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002690:	4b75      	ldr	r3, [pc, #468]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800269c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026aa:	2300      	movs	r3, #0
 80026ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026b2:	4622      	mov	r2, r4
 80026b4:	462b      	mov	r3, r5
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	0159      	lsls	r1, r3, #5
 80026c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c4:	0150      	lsls	r0, r2, #5
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4621      	mov	r1, r4
 80026cc:	1a51      	subs	r1, r2, r1
 80026ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026d0:	4629      	mov	r1, r5
 80026d2:	eb63 0301 	sbc.w	r3, r3, r1
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026e4:	4649      	mov	r1, r9
 80026e6:	018b      	lsls	r3, r1, #6
 80026e8:	4641      	mov	r1, r8
 80026ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ee:	4641      	mov	r1, r8
 80026f0:	018a      	lsls	r2, r1, #6
 80026f2:	4641      	mov	r1, r8
 80026f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80026f8:	4649      	mov	r1, r9
 80026fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800270a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800270e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002712:	4692      	mov	sl, r2
 8002714:	469b      	mov	fp, r3
 8002716:	4623      	mov	r3, r4
 8002718:	eb1a 0303 	adds.w	r3, sl, r3
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	462b      	mov	r3, r5
 8002720:	eb4b 0303 	adc.w	r3, fp, r3
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002732:	4629      	mov	r1, r5
 8002734:	028b      	lsls	r3, r1, #10
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800273c:	4621      	mov	r1, r4
 800273e:	028a      	lsls	r2, r1, #10
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002748:	2200      	movs	r2, #0
 800274a:	673b      	str	r3, [r7, #112]	@ 0x70
 800274c:	677a      	str	r2, [r7, #116]	@ 0x74
 800274e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002752:	f7fe fa99 	bl	8000c88 <__aeabi_uldivmod>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4613      	mov	r3, r2
 800275c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002760:	4b41      	ldr	r3, [pc, #260]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002782:	e0eb      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4b38      	ldr	r3, [pc, #224]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800278c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002790:	4b35      	ldr	r3, [pc, #212]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d06b      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279c:	4b32      	ldr	r3, [pc, #200]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	2200      	movs	r2, #0
 80027a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80027b0:	2300      	movs	r3, #0
 80027b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80027b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027b8:	4622      	mov	r2, r4
 80027ba:	462b      	mov	r3, r5
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	0159      	lsls	r1, r3, #5
 80027c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ca:	0150      	lsls	r0, r2, #5
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4621      	mov	r1, r4
 80027d2:	1a51      	subs	r1, r2, r1
 80027d4:	61b9      	str	r1, [r7, #24]
 80027d6:	4629      	mov	r1, r5
 80027d8:	eb63 0301 	sbc.w	r3, r3, r1
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ea:	4659      	mov	r1, fp
 80027ec:	018b      	lsls	r3, r1, #6
 80027ee:	4651      	mov	r1, sl
 80027f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f4:	4651      	mov	r1, sl
 80027f6:	018a      	lsls	r2, r1, #6
 80027f8:	4651      	mov	r1, sl
 80027fa:	ebb2 0801 	subs.w	r8, r2, r1
 80027fe:	4659      	mov	r1, fp
 8002800:	eb63 0901 	sbc.w	r9, r3, r1
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002818:	4690      	mov	r8, r2
 800281a:	4699      	mov	r9, r3
 800281c:	4623      	mov	r3, r4
 800281e:	eb18 0303 	adds.w	r3, r8, r3
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	462b      	mov	r3, r5
 8002826:	eb49 0303 	adc.w	r3, r9, r3
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002838:	4629      	mov	r1, r5
 800283a:	024b      	lsls	r3, r1, #9
 800283c:	4621      	mov	r1, r4
 800283e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002842:	4621      	mov	r1, r4
 8002844:	024a      	lsls	r2, r1, #9
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800284e:	2200      	movs	r2, #0
 8002850:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002852:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002858:	f7fe fa16 	bl	8000c88 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002866:	e065      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x420>
 8002868:	40023800 	.word	0x40023800
 800286c:	00f42400 	.word	0x00f42400
 8002870:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <HAL_RCC_GetSysClockFreq+0x458>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	4618      	mov	r0, r3
 800287e:	4611      	mov	r1, r2
 8002880:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002884:	653b      	str	r3, [r7, #80]	@ 0x50
 8002886:	2300      	movs	r3, #0
 8002888:	657b      	str	r3, [r7, #84]	@ 0x54
 800288a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800288e:	4642      	mov	r2, r8
 8002890:	464b      	mov	r3, r9
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4641      	mov	r1, r8
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	4649      	mov	r1, r9
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028c0:	4659      	mov	r1, fp
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4651      	mov	r1, sl
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4651      	mov	r1, sl
 80028d0:	1a54      	subs	r4, r2, r1
 80028d2:	4659      	mov	r1, fp
 80028d4:	eb63 0501 	sbc.w	r5, r3, r1
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	00eb      	lsls	r3, r5, #3
 80028e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e6:	00e2      	lsls	r2, r4, #3
 80028e8:	4614      	mov	r4, r2
 80028ea:	461d      	mov	r5, r3
 80028ec:	4643      	mov	r3, r8
 80028ee:	18e3      	adds	r3, r4, r3
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	464b      	mov	r3, r9
 80028f4:	eb45 0303 	adc.w	r3, r5, r3
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002906:	4629      	mov	r1, r5
 8002908:	028b      	lsls	r3, r1, #10
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002910:	4621      	mov	r1, r4
 8002912:	028a      	lsls	r2, r1, #10
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800291c:	2200      	movs	r2, #0
 800291e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002920:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002926:	f7fe f9af 	bl	8000c88 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4613      	mov	r3, r2
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002934:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <HAL_RCC_GetSysClockFreq+0x458>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0f1b      	lsrs	r3, r3, #28
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002952:	e003      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800295a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002960:	4618      	mov	r0, r3
 8002962:	37b8      	adds	r7, #184	@ 0xb8
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400

08002974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e28d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8083 	beq.w	8002a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002994:	4b94      	ldr	r3, [pc, #592]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b04      	cmp	r3, #4
 800299e:	d019      	beq.n	80029d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a0:	4b91      	ldr	r3, [pc, #580]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ac:	4b8e      	ldr	r3, [pc, #568]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b8:	d00c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b8b      	ldr	r3, [pc, #556]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d2:	d10b      	bne.n	80029ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	4b84      	ldr	r3, [pc, #528]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d05b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x124>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d157      	bne.n	8002a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e25a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x90>
 80029f6:	4b7c      	ldr	r3, [pc, #496]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a7b      	ldr	r2, [pc, #492]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xcc>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0xb4>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b73      	ldr	r3, [pc, #460]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a72      	ldr	r2, [pc, #456]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xcc>
 8002a28:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6b      	ldr	r2, [pc, #428]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7ff f8ec 	bl	8001c24 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff f8e8 	bl	8001c24 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e21f      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xdc>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff f8d8 	bl	8001c24 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff f8d4 	bl	8001c24 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e20b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b57      	ldr	r3, [pc, #348]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x104>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d06f      	beq.n	8002b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa6:	4b50      	ldr	r3, [pc, #320]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d017      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002abe:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b44      	ldr	r3, [pc, #272]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x186>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1d3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4937      	ldr	r1, [pc, #220]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_RCC_OscConfig+0x278>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff f881 	bl	8001c24 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b26:	f7ff f87d 	bl	8001c24 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1b4      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4925      	ldr	r1, [pc, #148]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_RCC_OscConfig+0x278>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7ff f860 	bl	8001c24 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7ff f85c 	bl	8001c24 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e193      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCC_OscConfig+0x27c>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f840 	bl	8001c24 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f83c 	bl	8001c24 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e173      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x234>
 8002bc6:	e01b      	b.n	8002c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_RCC_OscConfig+0x27c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7ff f829 	bl	8001c24 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7ff f825 	bl	8001c24 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d907      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e15c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ea      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b83      	ldr	r3, [pc, #524]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b7f      	ldr	r3, [pc, #508]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a7e      	ldr	r2, [pc, #504]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b79      	ldr	r3, [pc, #484]	@ (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b76      	ldr	r3, [pc, #472]	@ (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	@ (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe ffe5 	bl	8001c24 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe ffe1 	bl	8001c24 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e118      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6c      	ldr	r3, [pc, #432]	@ (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x31e>
 8002c84:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x358>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x340>
 8002c9a:	4b61      	ldr	r3, [pc, #388]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a60      	ldr	r2, [pc, #384]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	4a5d      	ldr	r2, [pc, #372]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x358>
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a59      	ldr	r2, [pc, #356]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc0:	4b57      	ldr	r3, [pc, #348]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a56      	ldr	r2, [pc, #344]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe ffa6 	bl	8001c24 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe ffa2 	bl	8001c24 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0d7      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x368>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe ff90 	bl	8001c24 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe ff8c 	bl	8001c24 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0c1      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b40      	ldr	r3, [pc, #256]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a3a      	ldr	r2, [pc, #232]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80ad 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b36      	ldr	r3, [pc, #216]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d060      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d145      	bne.n	8002de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b33      	ldr	r3, [pc, #204]	@ (8002e28 <HAL_RCC_OscConfig+0x4b4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe ff60 	bl	8001c24 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe ff5c 	bl	8001c24 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e093      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	071b      	lsls	r3, r3, #28
 8002db2:	491b      	ldr	r1, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_RCC_OscConfig+0x4b4>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe ff31 	bl	8001c24 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe ff2d 	bl	8001c24 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e064      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd8:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x452>
 8002de4:	e05c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <HAL_RCC_OscConfig+0x4b4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe ff1a 	bl	8001c24 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe ff16 	bl	8001c24 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x480>
 8002e12:	e045      	b.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e040      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <HAL_RCC_OscConfig+0x538>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d030      	beq.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d129      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d122      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d119      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	3b01      	subs	r3, #1
 8002e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d10f      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e041      	b.n	8002f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fbe4 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f000 fe8e 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d001      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e04e      	b.n	8003006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a23      	ldr	r2, [pc, #140]	@ (8003014 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f92:	d01d      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d018      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_TIM_Base_Start_IT+0xcc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	@ (8003020 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	@ (8003028 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x80>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_TIM_Base_Start_IT+0xdc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d111      	bne.n	8002ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d010      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	e007      	b.n	8003004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40010400 	.word	0x40010400
 8003028:	40014000 	.word	0x40014000
 800302c:	40001800 	.word	0x40001800

08003030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f839 	bl	80030ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 fdce 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_TIM_PWM_Start+0x24>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e022      	b.n	800314e <HAL_TIM_PWM_Start+0x6a>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d109      	bne.n	8003122 <HAL_TIM_PWM_Start+0x3e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e015      	b.n	800314e <HAL_TIM_PWM_Start+0x6a>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d109      	bne.n	800313c <HAL_TIM_PWM_Start+0x58>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e008      	b.n	800314e <HAL_TIM_PWM_Start+0x6a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07c      	b.n	8003250 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Start+0x82>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003164:	e013      	b.n	800318e <HAL_TIM_PWM_Start+0xaa>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start+0x92>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003174:	e00b      	b.n	800318e <HAL_TIM_PWM_Start+0xaa>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0xa2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003184:	e003      	b.n	800318e <HAL_TIM_PWM_Start+0xaa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f001 f94e 	bl	8004438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003258 <HAL_TIM_PWM_Start+0x174>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_TIM_PWM_Start+0xcc>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2c      	ldr	r2, [pc, #176]	@ (800325c <HAL_TIM_PWM_Start+0x178>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_PWM_Start+0xd0>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_TIM_PWM_Start+0xd2>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <HAL_TIM_PWM_Start+0x174>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031dc:	d01d      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_TIM_PWM_Start+0x17c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003264 <HAL_TIM_PWM_Start+0x180>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <HAL_TIM_PWM_Start+0x184>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a16      	ldr	r2, [pc, #88]	@ (800325c <HAL_TIM_PWM_Start+0x178>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <HAL_TIM_PWM_Start+0x188>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIM_PWM_Start+0x136>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a16      	ldr	r2, [pc, #88]	@ (8003270 <HAL_TIM_PWM_Start+0x18c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d111      	bne.n	800323e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b06      	cmp	r3, #6
 800322a:	d010      	beq.n	800324e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	e007      	b.n	800324e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40010000 	.word	0x40010000
 800325c:	40010400 	.word	0x40010400
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40014000 	.word	0x40014000
 8003270:	40001800 	.word	0x40001800

08003274 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f839 	bl	8003312 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 fcac 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start_IT+0x1e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e013      	b.n	800336e <HAL_TIM_IC_Start_IT+0x46>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start_IT+0x2e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e00b      	b.n	800336e <HAL_TIM_IC_Start_IT+0x46>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d104      	bne.n	8003366 <HAL_TIM_IC_Start_IT+0x3e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e003      	b.n	800336e <HAL_TIM_IC_Start_IT+0x46>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_TIM_IC_Start_IT+0x58>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e013      	b.n	80033a8 <HAL_TIM_IC_Start_IT+0x80>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d104      	bne.n	8003390 <HAL_TIM_IC_Start_IT+0x68>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e00b      	b.n	80033a8 <HAL_TIM_IC_Start_IT+0x80>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d104      	bne.n	80033a0 <HAL_TIM_IC_Start_IT+0x78>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e003      	b.n	80033a8 <HAL_TIM_IC_Start_IT+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80033aa:	7bbb      	ldrb	r3, [r7, #14]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d102      	bne.n	80033b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80033b0:	7b7b      	ldrb	r3, [r7, #13]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0cc      	b.n	8003554 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_TIM_IC_Start_IT+0xa2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c8:	e013      	b.n	80033f2 <HAL_TIM_IC_Start_IT+0xca>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d104      	bne.n	80033da <HAL_TIM_IC_Start_IT+0xb2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d8:	e00b      	b.n	80033f2 <HAL_TIM_IC_Start_IT+0xca>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d104      	bne.n	80033ea <HAL_TIM_IC_Start_IT+0xc2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e8:	e003      	b.n	80033f2 <HAL_TIM_IC_Start_IT+0xca>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_IC_Start_IT+0xda>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003400:	e013      	b.n	800342a <HAL_TIM_IC_Start_IT+0x102>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d104      	bne.n	8003412 <HAL_TIM_IC_Start_IT+0xea>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003410:	e00b      	b.n	800342a <HAL_TIM_IC_Start_IT+0x102>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d104      	bne.n	8003422 <HAL_TIM_IC_Start_IT+0xfa>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003420:	e003      	b.n	800342a <HAL_TIM_IC_Start_IT+0x102>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d841      	bhi.n	80034b4 <HAL_TIM_IC_Start_IT+0x18c>
 8003430:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <HAL_TIM_IC_Start_IT+0x110>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	0800346d 	.word	0x0800346d
 800343c:	080034b5 	.word	0x080034b5
 8003440:	080034b5 	.word	0x080034b5
 8003444:	080034b5 	.word	0x080034b5
 8003448:	0800347f 	.word	0x0800347f
 800344c:	080034b5 	.word	0x080034b5
 8003450:	080034b5 	.word	0x080034b5
 8003454:	080034b5 	.word	0x080034b5
 8003458:	08003491 	.word	0x08003491
 800345c:	080034b5 	.word	0x080034b5
 8003460:	080034b5 	.word	0x080034b5
 8003464:	080034b5 	.word	0x080034b5
 8003468:	080034a3 	.word	0x080034a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0202 	orr.w	r2, r2, #2
 800347a:	60da      	str	r2, [r3, #12]
      break;
 800347c:	e01d      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0204 	orr.w	r2, r2, #4
 800348c:	60da      	str	r2, [r3, #12]
      break;
 800348e:	e014      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0208 	orr.w	r2, r2, #8
 800349e:	60da      	str	r2, [r3, #12]
      break;
 80034a0:	e00b      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0210 	orr.w	r2, r2, #16
 80034b0:	60da      	str	r2, [r3, #12]
      break;
 80034b2:	e002      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d148      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2201      	movs	r2, #1
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 ffb5 	bl	8004438 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a22      	ldr	r2, [pc, #136]	@ (800355c <HAL_TIM_IC_Start_IT+0x234>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e0:	d01d      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_TIM_IC_Start_IT+0x238>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_TIM_IC_Start_IT+0x23c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_TIM_IC_Start_IT+0x240>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	@ (800356c <HAL_TIM_IC_Start_IT+0x244>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_TIM_IC_Start_IT+0x248>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIM_IC_Start_IT+0x1f6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <HAL_TIM_IC_Start_IT+0x24c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d111      	bne.n	8003542 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b06      	cmp	r3, #6
 800352e:	d010      	beq.n	8003552 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	e007      	b.n	8003552 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0202 	mvn.w	r2, #2
 80035a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd ff34 	bl	8001428 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fb05 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fb0c 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0204 	mvn.w	r2, #4
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd ff0a 	bl	8001428 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fadb 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fae2 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b08      	cmp	r3, #8
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fee0 	bl	8001428 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fab1 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fab8 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0210 	mvn.w	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2208      	movs	r2, #8
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd feb6 	bl	8001428 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa87 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa8e 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd ff0a 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b80      	cmp	r3, #128	@ 0x80
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 ff34 	bl	8004590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa53 	bl	8003bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0220 	mvn.w	r2, #32
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fefe 	bl	800457c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e088      	b.n	80038b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f000 fc74 	bl	80040b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 020c 	bic.w	r2, r2, #12
 80037d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
 80037ea:	e060      	b.n	80038ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d11c      	bne.n	800382c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f000 fcf8 	bl	80041f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003814:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6999      	ldr	r1, [r3, #24]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	619a      	str	r2, [r3, #24]
 800382a:	e040      	b.n	80038ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11b      	bne.n	800386a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6819      	ldr	r1, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f000 fd45 	bl	80042d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 020c 	bic.w	r2, r2, #12
 8003854:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69d9      	ldr	r1, [r3, #28]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	61da      	str	r2, [r3, #28]
 8003868:	e021      	b.n	80038ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d11c      	bne.n	80038aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f000 fd62 	bl	8004348 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003892:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69d9      	ldr	r1, [r3, #28]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	021a      	lsls	r2, r3, #8
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	61da      	str	r2, [r3, #28]
 80038a8:	e001      	b.n	80038ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0ae      	b.n	8003a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	f200 809f 	bhi.w	8003a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038ee:	a201      	add	r2, pc, #4	@ (adr r2, 80038f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003a2d 	.word	0x08003a2d
 80038fc:	08003a2d 	.word	0x08003a2d
 8003900:	08003a2d 	.word	0x08003a2d
 8003904:	08003969 	.word	0x08003969
 8003908:	08003a2d 	.word	0x08003a2d
 800390c:	08003a2d 	.word	0x08003a2d
 8003910:	08003a2d 	.word	0x08003a2d
 8003914:	080039ab 	.word	0x080039ab
 8003918:	08003a2d 	.word	0x08003a2d
 800391c:	08003a2d 	.word	0x08003a2d
 8003920:	08003a2d 	.word	0x08003a2d
 8003924:	080039eb 	.word	0x080039eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa0e 	bl	8003d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6999      	ldr	r1, [r3, #24]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
      break;
 8003966:	e064      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fa5e 	bl	8003e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	021a      	lsls	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	619a      	str	r2, [r3, #24]
      break;
 80039a8:	e043      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fab3 	bl	8003f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0208 	orr.w	r2, r2, #8
 80039c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0204 	bic.w	r2, r2, #4
 80039d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	61da      	str	r2, [r3, #28]
      break;
 80039e8:	e023      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fb07 	bl	8004004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	021a      	lsls	r2, r3, #8
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	61da      	str	r2, [r3, #28]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_ConfigClockSource+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0b4      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x186>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a98:	d03e      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0xd4>
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9e:	f200 8087 	bhi.w	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	f000 8086 	beq.w	8003bb6 <HAL_TIM_ConfigClockSource+0x172>
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aae:	d87f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b70      	cmp	r3, #112	@ 0x70
 8003ab2:	d01a      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0xa6>
 8003ab4:	2b70      	cmp	r3, #112	@ 0x70
 8003ab6:	d87b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b60      	cmp	r3, #96	@ 0x60
 8003aba:	d050      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x11a>
 8003abc:	2b60      	cmp	r3, #96	@ 0x60
 8003abe:	d877      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b50      	cmp	r3, #80	@ 0x50
 8003ac2:	d03c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ac4:	2b50      	cmp	r3, #80	@ 0x50
 8003ac6:	d873      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d058      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x13a>
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d86f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b30      	cmp	r3, #48	@ 0x30
 8003ad2:	d064      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b30      	cmp	r3, #48	@ 0x30
 8003ad6:	d86b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d060      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d867      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d05a      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae8:	e062      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f000 fc7d 	bl	80043f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]
      break;
 8003b16:	e04f      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f000 fc66 	bl	80043f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b3a:	609a      	str	r2, [r3, #8]
      break;
 8003b3c:	e03c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 fb24 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2150      	movs	r1, #80	@ 0x50
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fc33 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e02c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fb80 	bl	8004270 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2160      	movs	r1, #96	@ 0x60
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fc23 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e01c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fb04 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2140      	movs	r1, #64	@ 0x40
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fc13 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f000 fc0a 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a40      	ldr	r2, [pc, #256]	@ (8003d24 <TIM_Base_SetConfig+0x114>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2e:	d00f      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3d      	ldr	r2, [pc, #244]	@ (8003d28 <TIM_Base_SetConfig+0x118>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d2c <TIM_Base_SetConfig+0x11c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3b      	ldr	r2, [pc, #236]	@ (8003d30 <TIM_Base_SetConfig+0x120>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d34 <TIM_Base_SetConfig+0x124>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d108      	bne.n	8003c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2f      	ldr	r2, [pc, #188]	@ (8003d24 <TIM_Base_SetConfig+0x114>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d02b      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c70:	d027      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2c      	ldr	r2, [pc, #176]	@ (8003d28 <TIM_Base_SetConfig+0x118>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d023      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d2c <TIM_Base_SetConfig+0x11c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <TIM_Base_SetConfig+0x120>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <TIM_Base_SetConfig+0x124>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d017      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a28      	ldr	r2, [pc, #160]	@ (8003d38 <TIM_Base_SetConfig+0x128>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <TIM_Base_SetConfig+0x12c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <TIM_Base_SetConfig+0x130>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a25      	ldr	r2, [pc, #148]	@ (8003d44 <TIM_Base_SetConfig+0x134>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	@ (8003d48 <TIM_Base_SetConfig+0x138>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	@ (8003d4c <TIM_Base_SetConfig+0x13c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <TIM_Base_SetConfig+0x114>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0xf8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <TIM_Base_SetConfig+0x124>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	615a      	str	r2, [r3, #20]
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40010400 	.word	0x40010400
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800
 8003d44:	40001800 	.word	0x40001800
 8003d48:	40001c00 	.word	0x40001c00
 8003d4c:	40002000 	.word	0x40002000

08003d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0302 	bic.w	r3, r3, #2
 8003d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <TIM_OC1_SetConfig+0xd8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_OC1_SetConfig+0x64>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1f      	ldr	r2, [pc, #124]	@ (8003e2c <TIM_OC1_SetConfig+0xdc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10c      	bne.n	8003dce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 0308 	bic.w	r3, r3, #8
 8003dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a15      	ldr	r2, [pc, #84]	@ (8003e28 <TIM_OC1_SetConfig+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_OC1_SetConfig+0x8e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a14      	ldr	r2, [pc, #80]	@ (8003e2c <TIM_OC1_SetConfig+0xdc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400

08003e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0210 	bic.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0320 	bic.w	r3, r3, #32
 8003e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a22      	ldr	r2, [pc, #136]	@ (8003f14 <TIM_OC2_SetConfig+0xe4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC2_SetConfig+0x68>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <TIM_OC2_SetConfig+0xe8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10d      	bne.n	8003eb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <TIM_OC2_SetConfig+0xe4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC2_SetConfig+0x94>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <TIM_OC2_SetConfig+0xe8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d113      	bne.n	8003eec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010400 	.word	0x40010400

08003f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a21      	ldr	r2, [pc, #132]	@ (8003ffc <TIM_OC3_SetConfig+0xe0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_OC3_SetConfig+0x66>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a20      	ldr	r2, [pc, #128]	@ (8004000 <TIM_OC3_SetConfig+0xe4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10d      	bne.n	8003f9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a16      	ldr	r2, [pc, #88]	@ (8003ffc <TIM_OC3_SetConfig+0xe0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC3_SetConfig+0x92>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <TIM_OC3_SetConfig+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d113      	bne.n	8003fd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010400 	.word	0x40010400

08004004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800404e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	031b      	lsls	r3, r3, #12
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <TIM_OC4_SetConfig+0xa4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC4_SetConfig+0x68>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <TIM_OC4_SetConfig+0xa8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d109      	bne.n	8004080 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	019b      	lsls	r3, r3, #6
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40010400 	.word	0x40010400

080040b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a28      	ldr	r2, [pc, #160]	@ (800417c <TIM_TI1_SetConfig+0xcc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01b      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e4:	d017      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a25      	ldr	r2, [pc, #148]	@ (8004180 <TIM_TI1_SetConfig+0xd0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a24      	ldr	r2, [pc, #144]	@ (8004184 <TIM_TI1_SetConfig+0xd4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00f      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a23      	ldr	r2, [pc, #140]	@ (8004188 <TIM_TI1_SetConfig+0xd8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4a22      	ldr	r2, [pc, #136]	@ (800418c <TIM_TI1_SetConfig+0xdc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a21      	ldr	r2, [pc, #132]	@ (8004190 <TIM_TI1_SetConfig+0xe0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_TI1_SetConfig+0x66>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a20      	ldr	r2, [pc, #128]	@ (8004194 <TIM_TI1_SetConfig+0xe4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <TIM_TI1_SetConfig+0x6a>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <TIM_TI1_SetConfig+0x6c>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e003      	b.n	800413a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	b2db      	uxtb	r3, r3
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 030a 	bic.w	r3, r3, #10
 8004154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f003 030a 	and.w	r3, r3, #10
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40010400 	.word	0x40010400
 8004190:	40014000 	.word	0x40014000
 8004194:	40001800 	.word	0x40001800

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f023 0210 	bic.w	r2, r3, #16
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	b29b      	uxth	r3, r3
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004248:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f023 0210 	bic.w	r2, r3, #16
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800429a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	031b      	lsls	r3, r3, #12
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0303 	bic.w	r3, r3, #3
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800430c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	b2db      	uxtb	r3, r3
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004320:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004374:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004386:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	031b      	lsls	r3, r3, #12
 800438c:	b29b      	uxth	r3, r3
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800439a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	031b      	lsls	r3, r3, #12
 80043a0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	f043 0307 	orr.w	r3, r3, #7
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	431a      	orrs	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2201      	movs	r2, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	43db      	mvns	r3, r3
 800445a:	401a      	ands	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e05a      	b.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a21      	ldr	r2, [pc, #132]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d022      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d01d      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d018      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00e      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a18      	ldr	r2, [pc, #96]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a17      	ldr	r2, [pc, #92]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a15      	ldr	r2, [pc, #84]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10c      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800452c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40010400 	.word	0x40010400
 8004574:	40014000 	.word	0x40014000
 8004578:	40001800 	.word	0x40001800

0800457c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e03f      	b.n	8004636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd f924 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2224      	movs	r2, #36	@ 0x24
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fddf 	bl	80051ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800460c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800461c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08a      	sub	sp, #40	@ 0x28
 8004642:	af02      	add	r7, sp, #8
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b20      	cmp	r3, #32
 800465c:	d17c      	bne.n	8004758 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_Transmit+0x2c>
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e075      	b.n	800475a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_UART_Transmit+0x3e>
 8004678:	2302      	movs	r3, #2
 800467a:	e06e      	b.n	800475a <HAL_UART_Transmit+0x11c>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2221      	movs	r2, #33	@ 0x21
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004692:	f7fd fac7 	bl	8001c24 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ac:	d108      	bne.n	80046c0 <HAL_UART_Transmit+0x82>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e003      	b.n	80046c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80046d0:	e02a      	b.n	8004728 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2200      	movs	r2, #0
 80046da:	2180      	movs	r1, #128	@ 0x80
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fb1f 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e036      	b.n	800475a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	3302      	adds	r3, #2
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e007      	b.n	800471a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3301      	adds	r3, #1
 8004718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1cf      	bne.n	80046d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	2140      	movs	r1, #64	@ 0x40
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 faef 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e006      	b.n	800475a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b20      	cmp	r3, #32
 800477a:	d11d      	bne.n	80047b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Receive_IT+0x26>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e016      	b.n	80047ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_UART_Receive_IT+0x38>
 8004796:	2302      	movs	r3, #2
 8004798:	e00f      	b.n	80047ba <HAL_UART_Receive_IT+0x58>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fb24 	bl	8004dfc <UART_Start_Receive_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	e000      	b.n	80047ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0ba      	sub	sp, #232	@ 0xe8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_UART_IRQHandler+0x66>
 8004816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fc07 	bl	8005036 <UART_Receive_IT>
      return;
 8004828:	e256      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80de 	beq.w	80049f0 <HAL_UART_IRQHandler+0x22c>
 8004834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004844:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80d1 	beq.w	80049f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_UART_IRQHandler+0xae>
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_UART_IRQHandler+0xd2>
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0xf6>
 80048a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <HAL_UART_IRQHandler+0x126>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	f043 0208 	orr.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 81ed 	beq.w	8004cce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_UART_IRQHandler+0x14e>
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fb92 	bl	8005036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_UART_IRQHandler+0x17a>
 8004936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d04f      	beq.n	80049de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa9a 	bl	8004e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d141      	bne.n	80049d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800496c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800497e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800498a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1d9      	bne.n	8004952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d013      	beq.n	80049ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	4a7d      	ldr	r2, [pc, #500]	@ (8004ba0 <HAL_UART_IRQHandler+0x3dc>)
 80049ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd fac3 	bl	8001f3e <HAL_DMA_Abort_IT>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049c8:	4610      	mov	r0, r2
 80049ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00e      	b.n	80049ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f990 	bl	8004cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e00a      	b.n	80049ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f98c 	bl	8004cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	e006      	b.n	80049ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f988 	bl	8004cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80049ea:	e170      	b.n	8004cce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	bf00      	nop
    return;
 80049ee:	e16e      	b.n	8004cce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	f040 814a 	bne.w	8004c8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8143 	beq.w	8004c8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 813c 	beq.w	8004c8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b40      	cmp	r3, #64	@ 0x40
 8004a38:	f040 80b4 	bne.w	8004ba4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8140 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	f080 8139 	bcs.w	8004cd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a72:	f000 8088 	beq.w	8004b86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1d9      	bne.n	8004a76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ae6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e1      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3314      	adds	r3, #20
 8004b04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e3      	bne.n	8004afe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b56:	f023 0310 	bic.w	r3, r3, #16
 8004b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e3      	bne.n	8004b44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd f96c 	bl	8001e5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8b6 	bl	8004d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b9c:	e099      	b.n	8004cd2 <HAL_UART_IRQHandler+0x50e>
 8004b9e:	bf00      	nop
 8004ba0:	08004f3f 	.word	0x08004f3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 808b 	beq.w	8004cd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8086 	beq.w	8004cd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bee:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e3      	bne.n	8004bca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	623b      	str	r3, [r7, #32]
   return(result);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e3      	bne.n	8004c02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0310 	bic.w	r3, r3, #16
 8004c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c6c:	61fa      	str	r2, [r7, #28]
 8004c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e3      	bne.n	8004c48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f83e 	bl	8004d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c8c:	e023      	b.n	8004cd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_UART_IRQHandler+0x4ea>
 8004c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f95d 	bl	8004f66 <UART_Transmit_IT>
    return;
 8004cac:	e014      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x514>
 8004cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f99d 	bl	8005006 <UART_EndTransmit_IT>
    return;
 8004ccc:	e004      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
    return;
 8004cce:	bf00      	nop
 8004cd0:	e002      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
      return;
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
      return;
 8004cd6:	bf00      	nop
  }
}
 8004cd8:	37e8      	adds	r7, #232	@ 0xe8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop

08004ce0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b090      	sub	sp, #64	@ 0x40
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	e050      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d04c      	beq.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d40:	f7fc ff70 	bl	8001c24 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d241      	bcs.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d70:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004da4:	623a      	str	r2, [r7, #32]
 8004da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e00f      	b.n	8004df4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d09f      	beq.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3740      	adds	r7, #64	@ 0x40
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2222      	movs	r2, #34	@ 0x22
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0220 	orr.w	r2, r2, #32
 8004e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b095      	sub	sp, #84	@ 0x54
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ea0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3314      	adds	r3, #20
 8004ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d119      	bne.n	8004f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0310 	bic.w	r3, r3, #16
 8004f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f10:	61ba      	str	r2, [r7, #24]
 8004f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6979      	ldr	r1, [r7, #20]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f32:	bf00      	nop
 8004f34:	3754      	adds	r7, #84	@ 0x54
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fecb 	bl	8004cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b21      	cmp	r3, #33	@ 0x21
 8004f78:	d13e      	bne.n	8004ff8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f82:	d114      	bne.n	8004fae <UART_Transmit_IT+0x48>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d110      	bne.n	8004fae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	1c9a      	adds	r2, r3, #2
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]
 8004fac:	e008      	b.n	8004fc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6211      	str	r1, [r2, #32]
 8004fb8:	781a      	ldrb	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10f      	bne.n	8004ff4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ff2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fe5a 	bl	8004ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b08c      	sub	sp, #48	@ 0x30
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b22      	cmp	r3, #34	@ 0x22
 8005048:	f040 80ab 	bne.w	80051a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005054:	d117      	bne.n	8005086 <UART_Receive_IT+0x50>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d113      	bne.n	8005086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005074:	b29a      	uxth	r2, r3
 8005076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28
 8005084:	e026      	b.n	80050d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005098:	d007      	beq.n	80050aa <UART_Receive_IT+0x74>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <UART_Receive_IT+0x82>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e008      	b.n	80050ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29b      	uxth	r3, r3
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4619      	mov	r1, r3
 80050e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d15a      	bne.n	800519e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0220 	bic.w	r2, r2, #32
 80050f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	2b01      	cmp	r3, #1
 8005126:	d135      	bne.n	8005194 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	613b      	str	r3, [r7, #16]
   return(result);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f023 0310 	bic.w	r3, r3, #16
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514e:	623a      	str	r2, [r7, #32]
 8005150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	69f9      	ldr	r1, [r7, #28]
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	61bb      	str	r3, [r7, #24]
   return(result);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b10      	cmp	r3, #16
 800516e:	d10a      	bne.n	8005186 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fdbb 	bl	8004d08 <HAL_UARTEx_RxEventCallback>
 8005192:	e002      	b.n	800519a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fc fa1d 	bl	80015d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e002      	b.n	80051a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3730      	adds	r7, #48	@ 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b0:	b0c0      	sub	sp, #256	@ 0x100
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	68d9      	ldr	r1, [r3, #12]
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	ea40 0301 	orr.w	r3, r0, r1
 80051d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005204:	f021 010c 	bic.w	r1, r1, #12
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005212:	430b      	orrs	r3, r1
 8005214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005226:	6999      	ldr	r1, [r3, #24]
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	ea40 0301 	orr.w	r3, r0, r1
 8005232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b8f      	ldr	r3, [pc, #572]	@ (8005478 <UART_SetConfig+0x2cc>)
 800523c:	429a      	cmp	r2, r3
 800523e:	d005      	beq.n	800524c <UART_SetConfig+0xa0>
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b8d      	ldr	r3, [pc, #564]	@ (800547c <UART_SetConfig+0x2d0>)
 8005248:	429a      	cmp	r2, r3
 800524a:	d104      	bne.n	8005256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800524c:	f7fd f94e 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 8005250:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005254:	e003      	b.n	800525e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005256:	f7fd f935 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 800525a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005268:	f040 810c 	bne.w	8005484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800526c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005270:	2200      	movs	r2, #0
 8005272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005276:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800527a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	1891      	adds	r1, r2, r2
 8005284:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005286:	415b      	adcs	r3, r3
 8005288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800528a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800528e:	4621      	mov	r1, r4
 8005290:	eb12 0801 	adds.w	r8, r2, r1
 8005294:	4629      	mov	r1, r5
 8005296:	eb43 0901 	adc.w	r9, r3, r1
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ae:	4690      	mov	r8, r2
 80052b0:	4699      	mov	r9, r3
 80052b2:	4623      	mov	r3, r4
 80052b4:	eb18 0303 	adds.w	r3, r8, r3
 80052b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052bc:	462b      	mov	r3, r5
 80052be:	eb49 0303 	adc.w	r3, r9, r3
 80052c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052da:	460b      	mov	r3, r1
 80052dc:	18db      	adds	r3, r3, r3
 80052de:	653b      	str	r3, [r7, #80]	@ 0x50
 80052e0:	4613      	mov	r3, r2
 80052e2:	eb42 0303 	adc.w	r3, r2, r3
 80052e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052f0:	f7fb fcca 	bl	8000c88 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b61      	ldr	r3, [pc, #388]	@ (8005480 <UART_SetConfig+0x2d4>)
 80052fa:	fba3 2302 	umull	r2, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	011c      	lsls	r4, r3, #4
 8005302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005306:	2200      	movs	r2, #0
 8005308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800530c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005314:	4642      	mov	r2, r8
 8005316:	464b      	mov	r3, r9
 8005318:	1891      	adds	r1, r2, r2
 800531a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800531c:	415b      	adcs	r3, r3
 800531e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005324:	4641      	mov	r1, r8
 8005326:	eb12 0a01 	adds.w	sl, r2, r1
 800532a:	4649      	mov	r1, r9
 800532c:	eb43 0b01 	adc.w	fp, r3, r1
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800533c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005344:	4692      	mov	sl, r2
 8005346:	469b      	mov	fp, r3
 8005348:	4643      	mov	r3, r8
 800534a:	eb1a 0303 	adds.w	r3, sl, r3
 800534e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005352:	464b      	mov	r3, r9
 8005354:	eb4b 0303 	adc.w	r3, fp, r3
 8005358:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005368:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800536c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005370:	460b      	mov	r3, r1
 8005372:	18db      	adds	r3, r3, r3
 8005374:	643b      	str	r3, [r7, #64]	@ 0x40
 8005376:	4613      	mov	r3, r2
 8005378:	eb42 0303 	adc.w	r3, r2, r3
 800537c:	647b      	str	r3, [r7, #68]	@ 0x44
 800537e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005386:	f7fb fc7f 	bl	8000c88 <__aeabi_uldivmod>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4611      	mov	r1, r2
 8005390:	4b3b      	ldr	r3, [pc, #236]	@ (8005480 <UART_SetConfig+0x2d4>)
 8005392:	fba3 2301 	umull	r2, r3, r3, r1
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2264      	movs	r2, #100	@ 0x64
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	1acb      	subs	r3, r1, r3
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053a6:	4b36      	ldr	r3, [pc, #216]	@ (8005480 <UART_SetConfig+0x2d4>)
 80053a8:	fba3 2302 	umull	r2, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053b4:	441c      	add	r4, r3
 80053b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053c8:	4642      	mov	r2, r8
 80053ca:	464b      	mov	r3, r9
 80053cc:	1891      	adds	r1, r2, r2
 80053ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053d0:	415b      	adcs	r3, r3
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053d8:	4641      	mov	r1, r8
 80053da:	1851      	adds	r1, r2, r1
 80053dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80053de:	4649      	mov	r1, r9
 80053e0:	414b      	adcs	r3, r1
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053f0:	4659      	mov	r1, fp
 80053f2:	00cb      	lsls	r3, r1, #3
 80053f4:	4651      	mov	r1, sl
 80053f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053fa:	4651      	mov	r1, sl
 80053fc:	00ca      	lsls	r2, r1, #3
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	4603      	mov	r3, r0
 8005404:	4642      	mov	r2, r8
 8005406:	189b      	adds	r3, r3, r2
 8005408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800540c:	464b      	mov	r3, r9
 800540e:	460a      	mov	r2, r1
 8005410:	eb42 0303 	adc.w	r3, r2, r3
 8005414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005424:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800542c:	460b      	mov	r3, r1
 800542e:	18db      	adds	r3, r3, r3
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005432:	4613      	mov	r3, r2
 8005434:	eb42 0303 	adc.w	r3, r2, r3
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800543a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800543e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005442:	f7fb fc21 	bl	8000c88 <__aeabi_uldivmod>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <UART_SetConfig+0x2d4>)
 800544c:	fba3 1302 	umull	r1, r3, r3, r2
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	2164      	movs	r1, #100	@ 0x64
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	3332      	adds	r3, #50	@ 0x32
 800545e:	4a08      	ldr	r2, [pc, #32]	@ (8005480 <UART_SetConfig+0x2d4>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	f003 0207 	and.w	r2, r3, #7
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4422      	add	r2, r4
 8005472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005474:	e106      	b.n	8005684 <UART_SetConfig+0x4d8>
 8005476:	bf00      	nop
 8005478:	40011000 	.word	0x40011000
 800547c:	40011400 	.word	0x40011400
 8005480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005488:	2200      	movs	r2, #0
 800548a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800548e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005496:	4642      	mov	r2, r8
 8005498:	464b      	mov	r3, r9
 800549a:	1891      	adds	r1, r2, r2
 800549c:	6239      	str	r1, [r7, #32]
 800549e:	415b      	adcs	r3, r3
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054a6:	4641      	mov	r1, r8
 80054a8:	1854      	adds	r4, r2, r1
 80054aa:	4649      	mov	r1, r9
 80054ac:	eb43 0501 	adc.w	r5, r3, r1
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	00eb      	lsls	r3, r5, #3
 80054ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054be:	00e2      	lsls	r2, r4, #3
 80054c0:	4614      	mov	r4, r2
 80054c2:	461d      	mov	r5, r3
 80054c4:	4643      	mov	r3, r8
 80054c6:	18e3      	adds	r3, r4, r3
 80054c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054cc:	464b      	mov	r3, r9
 80054ce:	eb45 0303 	adc.w	r3, r5, r3
 80054d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054f2:	4629      	mov	r1, r5
 80054f4:	008b      	lsls	r3, r1, #2
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054fc:	4621      	mov	r1, r4
 80054fe:	008a      	lsls	r2, r1, #2
 8005500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005504:	f7fb fbc0 	bl	8000c88 <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4b60      	ldr	r3, [pc, #384]	@ (8005690 <UART_SetConfig+0x4e4>)
 800550e:	fba3 2302 	umull	r2, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	011c      	lsls	r4, r3, #4
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	1891      	adds	r1, r2, r2
 800552e:	61b9      	str	r1, [r7, #24]
 8005530:	415b      	adcs	r3, r3
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005538:	4641      	mov	r1, r8
 800553a:	1851      	adds	r1, r2, r1
 800553c:	6139      	str	r1, [r7, #16]
 800553e:	4649      	mov	r1, r9
 8005540:	414b      	adcs	r3, r1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005550:	4659      	mov	r1, fp
 8005552:	00cb      	lsls	r3, r1, #3
 8005554:	4651      	mov	r1, sl
 8005556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555a:	4651      	mov	r1, sl
 800555c:	00ca      	lsls	r2, r1, #3
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	4603      	mov	r3, r0
 8005564:	4642      	mov	r2, r8
 8005566:	189b      	adds	r3, r3, r2
 8005568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800556c:	464b      	mov	r3, r9
 800556e:	460a      	mov	r2, r1
 8005570:	eb42 0303 	adc.w	r3, r2, r3
 8005574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005590:	4649      	mov	r1, r9
 8005592:	008b      	lsls	r3, r1, #2
 8005594:	4641      	mov	r1, r8
 8005596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800559a:	4641      	mov	r1, r8
 800559c:	008a      	lsls	r2, r1, #2
 800559e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055a2:	f7fb fb71 	bl	8000c88 <__aeabi_uldivmod>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	4b38      	ldr	r3, [pc, #224]	@ (8005690 <UART_SetConfig+0x4e4>)
 80055ae:	fba3 2301 	umull	r2, r3, r3, r1
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	2264      	movs	r2, #100	@ 0x64
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	1acb      	subs	r3, r1, r3
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	3332      	adds	r3, #50	@ 0x32
 80055c0:	4a33      	ldr	r2, [pc, #204]	@ (8005690 <UART_SetConfig+0x4e4>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055cc:	441c      	add	r4, r3
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d2:	2200      	movs	r2, #0
 80055d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80055d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80055d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	415b      	adcs	r3, r3
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055ec:	4641      	mov	r1, r8
 80055ee:	1851      	adds	r1, r2, r1
 80055f0:	6039      	str	r1, [r7, #0]
 80055f2:	4649      	mov	r1, r9
 80055f4:	414b      	adcs	r3, r1
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005604:	4659      	mov	r1, fp
 8005606:	00cb      	lsls	r3, r1, #3
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560e:	4651      	mov	r1, sl
 8005610:	00ca      	lsls	r2, r1, #3
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	4603      	mov	r3, r0
 8005618:	4642      	mov	r2, r8
 800561a:	189b      	adds	r3, r3, r2
 800561c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800561e:	464b      	mov	r3, r9
 8005620:	460a      	mov	r2, r1
 8005622:	eb42 0303 	adc.w	r3, r2, r3
 8005626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	663b      	str	r3, [r7, #96]	@ 0x60
 8005632:	667a      	str	r2, [r7, #100]	@ 0x64
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005640:	4649      	mov	r1, r9
 8005642:	008b      	lsls	r3, r1, #2
 8005644:	4641      	mov	r1, r8
 8005646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564a:	4641      	mov	r1, r8
 800564c:	008a      	lsls	r2, r1, #2
 800564e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005652:	f7fb fb19 	bl	8000c88 <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <UART_SetConfig+0x4e4>)
 800565c:	fba3 1302 	umull	r1, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	2164      	movs	r1, #100	@ 0x64
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	3332      	adds	r3, #50	@ 0x32
 800566e:	4a08      	ldr	r2, [pc, #32]	@ (8005690 <UART_SetConfig+0x4e4>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f003 020f 	and.w	r2, r3, #15
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4422      	add	r2, r4
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800568a:	46bd      	mov	sp, r7
 800568c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005690:	51eb851f 	.word	0x51eb851f

08005694 <__cvt>:
 8005694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	ec57 6b10 	vmov	r6, r7, d0
 800569c:	2f00      	cmp	r7, #0
 800569e:	460c      	mov	r4, r1
 80056a0:	4619      	mov	r1, r3
 80056a2:	463b      	mov	r3, r7
 80056a4:	bfbb      	ittet	lt
 80056a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056aa:	461f      	movlt	r7, r3
 80056ac:	2300      	movge	r3, #0
 80056ae:	232d      	movlt	r3, #45	@ 0x2d
 80056b0:	700b      	strb	r3, [r1, #0]
 80056b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056b8:	4691      	mov	r9, r2
 80056ba:	f023 0820 	bic.w	r8, r3, #32
 80056be:	bfbc      	itt	lt
 80056c0:	4632      	movlt	r2, r6
 80056c2:	4616      	movlt	r6, r2
 80056c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056c8:	d005      	beq.n	80056d6 <__cvt+0x42>
 80056ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056ce:	d100      	bne.n	80056d2 <__cvt+0x3e>
 80056d0:	3401      	adds	r4, #1
 80056d2:	2102      	movs	r1, #2
 80056d4:	e000      	b.n	80056d8 <__cvt+0x44>
 80056d6:	2103      	movs	r1, #3
 80056d8:	ab03      	add	r3, sp, #12
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	ab02      	add	r3, sp, #8
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	ec47 6b10 	vmov	d0, r6, r7
 80056e4:	4653      	mov	r3, sl
 80056e6:	4622      	mov	r2, r4
 80056e8:	f000 fe82 	bl	80063f0 <_dtoa_r>
 80056ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056f0:	4605      	mov	r5, r0
 80056f2:	d119      	bne.n	8005728 <__cvt+0x94>
 80056f4:	f019 0f01 	tst.w	r9, #1
 80056f8:	d00e      	beq.n	8005718 <__cvt+0x84>
 80056fa:	eb00 0904 	add.w	r9, r0, r4
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	4630      	mov	r0, r6
 8005704:	4639      	mov	r1, r7
 8005706:	f7fb f9ff 	bl	8000b08 <__aeabi_dcmpeq>
 800570a:	b108      	cbz	r0, 8005710 <__cvt+0x7c>
 800570c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005710:	2230      	movs	r2, #48	@ 0x30
 8005712:	9b03      	ldr	r3, [sp, #12]
 8005714:	454b      	cmp	r3, r9
 8005716:	d31e      	bcc.n	8005756 <__cvt+0xc2>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800571c:	1b5b      	subs	r3, r3, r5
 800571e:	4628      	mov	r0, r5
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	b004      	add	sp, #16
 8005724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800572c:	eb00 0904 	add.w	r9, r0, r4
 8005730:	d1e5      	bne.n	80056fe <__cvt+0x6a>
 8005732:	7803      	ldrb	r3, [r0, #0]
 8005734:	2b30      	cmp	r3, #48	@ 0x30
 8005736:	d10a      	bne.n	800574e <__cvt+0xba>
 8005738:	2200      	movs	r2, #0
 800573a:	2300      	movs	r3, #0
 800573c:	4630      	mov	r0, r6
 800573e:	4639      	mov	r1, r7
 8005740:	f7fb f9e2 	bl	8000b08 <__aeabi_dcmpeq>
 8005744:	b918      	cbnz	r0, 800574e <__cvt+0xba>
 8005746:	f1c4 0401 	rsb	r4, r4, #1
 800574a:	f8ca 4000 	str.w	r4, [sl]
 800574e:	f8da 3000 	ldr.w	r3, [sl]
 8005752:	4499      	add	r9, r3
 8005754:	e7d3      	b.n	80056fe <__cvt+0x6a>
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	9103      	str	r1, [sp, #12]
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e7d9      	b.n	8005712 <__cvt+0x7e>

0800575e <__exponent>:
 800575e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005760:	2900      	cmp	r1, #0
 8005762:	bfba      	itte	lt
 8005764:	4249      	neglt	r1, r1
 8005766:	232d      	movlt	r3, #45	@ 0x2d
 8005768:	232b      	movge	r3, #43	@ 0x2b
 800576a:	2909      	cmp	r1, #9
 800576c:	7002      	strb	r2, [r0, #0]
 800576e:	7043      	strb	r3, [r0, #1]
 8005770:	dd29      	ble.n	80057c6 <__exponent+0x68>
 8005772:	f10d 0307 	add.w	r3, sp, #7
 8005776:	461d      	mov	r5, r3
 8005778:	270a      	movs	r7, #10
 800577a:	461a      	mov	r2, r3
 800577c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005780:	fb07 1416 	mls	r4, r7, r6, r1
 8005784:	3430      	adds	r4, #48	@ 0x30
 8005786:	f802 4c01 	strb.w	r4, [r2, #-1]
 800578a:	460c      	mov	r4, r1
 800578c:	2c63      	cmp	r4, #99	@ 0x63
 800578e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005792:	4631      	mov	r1, r6
 8005794:	dcf1      	bgt.n	800577a <__exponent+0x1c>
 8005796:	3130      	adds	r1, #48	@ 0x30
 8005798:	1e94      	subs	r4, r2, #2
 800579a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800579e:	1c41      	adds	r1, r0, #1
 80057a0:	4623      	mov	r3, r4
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	d30a      	bcc.n	80057bc <__exponent+0x5e>
 80057a6:	f10d 0309 	add.w	r3, sp, #9
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	42ac      	cmp	r4, r5
 80057ae:	bf88      	it	hi
 80057b0:	2300      	movhi	r3, #0
 80057b2:	3302      	adds	r3, #2
 80057b4:	4403      	add	r3, r0
 80057b6:	1a18      	subs	r0, r3, r0
 80057b8:	b003      	add	sp, #12
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057c4:	e7ed      	b.n	80057a2 <__exponent+0x44>
 80057c6:	2330      	movs	r3, #48	@ 0x30
 80057c8:	3130      	adds	r1, #48	@ 0x30
 80057ca:	7083      	strb	r3, [r0, #2]
 80057cc:	70c1      	strb	r1, [r0, #3]
 80057ce:	1d03      	adds	r3, r0, #4
 80057d0:	e7f1      	b.n	80057b6 <__exponent+0x58>
	...

080057d4 <_printf_float>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	b08d      	sub	sp, #52	@ 0x34
 80057da:	460c      	mov	r4, r1
 80057dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057e0:	4616      	mov	r6, r2
 80057e2:	461f      	mov	r7, r3
 80057e4:	4605      	mov	r5, r0
 80057e6:	f000 fd01 	bl	80061ec <_localeconv_r>
 80057ea:	6803      	ldr	r3, [r0, #0]
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fa fd5e 	bl	80002b0 <strlen>
 80057f4:	2300      	movs	r3, #0
 80057f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057f8:	f8d8 3000 	ldr.w	r3, [r8]
 80057fc:	9005      	str	r0, [sp, #20]
 80057fe:	3307      	adds	r3, #7
 8005800:	f023 0307 	bic.w	r3, r3, #7
 8005804:	f103 0208 	add.w	r2, r3, #8
 8005808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800580c:	f8d4 b000 	ldr.w	fp, [r4]
 8005810:	f8c8 2000 	str.w	r2, [r8]
 8005814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800581c:	9307      	str	r3, [sp, #28]
 800581e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005822:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800582a:	4b9c      	ldr	r3, [pc, #624]	@ (8005a9c <_printf_float+0x2c8>)
 800582c:	f04f 32ff 	mov.w	r2, #4294967295
 8005830:	f7fb f99c 	bl	8000b6c <__aeabi_dcmpun>
 8005834:	bb70      	cbnz	r0, 8005894 <_printf_float+0xc0>
 8005836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800583a:	4b98      	ldr	r3, [pc, #608]	@ (8005a9c <_printf_float+0x2c8>)
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	f7fb f976 	bl	8000b30 <__aeabi_dcmple>
 8005844:	bb30      	cbnz	r0, 8005894 <_printf_float+0xc0>
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	f7fb f965 	bl	8000b1c <__aeabi_dcmplt>
 8005852:	b110      	cbz	r0, 800585a <_printf_float+0x86>
 8005854:	232d      	movs	r3, #45	@ 0x2d
 8005856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585a:	4a91      	ldr	r2, [pc, #580]	@ (8005aa0 <_printf_float+0x2cc>)
 800585c:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <_printf_float+0x2d0>)
 800585e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005862:	bf94      	ite	ls
 8005864:	4690      	movls	r8, r2
 8005866:	4698      	movhi	r8, r3
 8005868:	2303      	movs	r3, #3
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	f02b 0304 	bic.w	r3, fp, #4
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	f04f 0900 	mov.w	r9, #0
 8005876:	9700      	str	r7, [sp, #0]
 8005878:	4633      	mov	r3, r6
 800587a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f9d2 	bl	8005c28 <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	f040 808d 	bne.w	80059a4 <_printf_float+0x1d0>
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	b00d      	add	sp, #52	@ 0x34
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	4640      	mov	r0, r8
 800589a:	4649      	mov	r1, r9
 800589c:	f7fb f966 	bl	8000b6c <__aeabi_dcmpun>
 80058a0:	b140      	cbz	r0, 80058b4 <_printf_float+0xe0>
 80058a2:	464b      	mov	r3, r9
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bfbc      	itt	lt
 80058a8:	232d      	movlt	r3, #45	@ 0x2d
 80058aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058ae:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa8 <_printf_float+0x2d4>)
 80058b0:	4b7e      	ldr	r3, [pc, #504]	@ (8005aac <_printf_float+0x2d8>)
 80058b2:	e7d4      	b.n	800585e <_printf_float+0x8a>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058ba:	9206      	str	r2, [sp, #24]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	d13b      	bne.n	8005938 <_printf_float+0x164>
 80058c0:	2306      	movs	r3, #6
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058c8:	2300      	movs	r3, #0
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	9303      	str	r3, [sp, #12]
 80058ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80058d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058d4:	ab09      	add	r3, sp, #36	@ 0x24
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	ec49 8b10 	vmov	d0, r8, r9
 80058de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7ff fed6 	bl	8005694 <__cvt>
 80058e8:	9b06      	ldr	r3, [sp, #24]
 80058ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058ec:	2b47      	cmp	r3, #71	@ 0x47
 80058ee:	4680      	mov	r8, r0
 80058f0:	d129      	bne.n	8005946 <_printf_float+0x172>
 80058f2:	1cc8      	adds	r0, r1, #3
 80058f4:	db02      	blt.n	80058fc <_printf_float+0x128>
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	4299      	cmp	r1, r3
 80058fa:	dd41      	ble.n	8005980 <_printf_float+0x1ac>
 80058fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005900:	fa5f fa8a 	uxtb.w	sl, sl
 8005904:	3901      	subs	r1, #1
 8005906:	4652      	mov	r2, sl
 8005908:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800590c:	9109      	str	r1, [sp, #36]	@ 0x24
 800590e:	f7ff ff26 	bl	800575e <__exponent>
 8005912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005914:	1813      	adds	r3, r2, r0
 8005916:	2a01      	cmp	r2, #1
 8005918:	4681      	mov	r9, r0
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	dc02      	bgt.n	8005924 <_printf_float+0x150>
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	07d2      	lsls	r2, r2, #31
 8005922:	d501      	bpl.n	8005928 <_printf_float+0x154>
 8005924:	3301      	adds	r3, #1
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0a2      	beq.n	8005876 <_printf_float+0xa2>
 8005930:	232d      	movs	r3, #45	@ 0x2d
 8005932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005936:	e79e      	b.n	8005876 <_printf_float+0xa2>
 8005938:	9a06      	ldr	r2, [sp, #24]
 800593a:	2a47      	cmp	r2, #71	@ 0x47
 800593c:	d1c2      	bne.n	80058c4 <_printf_float+0xf0>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1c0      	bne.n	80058c4 <_printf_float+0xf0>
 8005942:	2301      	movs	r3, #1
 8005944:	e7bd      	b.n	80058c2 <_printf_float+0xee>
 8005946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800594a:	d9db      	bls.n	8005904 <_printf_float+0x130>
 800594c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005950:	d118      	bne.n	8005984 <_printf_float+0x1b0>
 8005952:	2900      	cmp	r1, #0
 8005954:	6863      	ldr	r3, [r4, #4]
 8005956:	dd0b      	ble.n	8005970 <_printf_float+0x19c>
 8005958:	6121      	str	r1, [r4, #16]
 800595a:	b913      	cbnz	r3, 8005962 <_printf_float+0x18e>
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	07d0      	lsls	r0, r2, #31
 8005960:	d502      	bpl.n	8005968 <_printf_float+0x194>
 8005962:	3301      	adds	r3, #1
 8005964:	440b      	add	r3, r1
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	65a1      	str	r1, [r4, #88]	@ 0x58
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	e7db      	b.n	8005928 <_printf_float+0x154>
 8005970:	b913      	cbnz	r3, 8005978 <_printf_float+0x1a4>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	07d2      	lsls	r2, r2, #31
 8005976:	d501      	bpl.n	800597c <_printf_float+0x1a8>
 8005978:	3302      	adds	r3, #2
 800597a:	e7f4      	b.n	8005966 <_printf_float+0x192>
 800597c:	2301      	movs	r3, #1
 800597e:	e7f2      	b.n	8005966 <_printf_float+0x192>
 8005980:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005986:	4299      	cmp	r1, r3
 8005988:	db05      	blt.n	8005996 <_printf_float+0x1c2>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	6121      	str	r1, [r4, #16]
 800598e:	07d8      	lsls	r0, r3, #31
 8005990:	d5ea      	bpl.n	8005968 <_printf_float+0x194>
 8005992:	1c4b      	adds	r3, r1, #1
 8005994:	e7e7      	b.n	8005966 <_printf_float+0x192>
 8005996:	2900      	cmp	r1, #0
 8005998:	bfd4      	ite	le
 800599a:	f1c1 0202 	rsble	r2, r1, #2
 800599e:	2201      	movgt	r2, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	e7e0      	b.n	8005966 <_printf_float+0x192>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	055a      	lsls	r2, r3, #21
 80059a8:	d407      	bmi.n	80059ba <_printf_float+0x1e6>
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	4642      	mov	r2, r8
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	d12b      	bne.n	8005a10 <_printf_float+0x23c>
 80059b8:	e767      	b.n	800588a <_printf_float+0xb6>
 80059ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059be:	f240 80dd 	bls.w	8005b7c <_printf_float+0x3a8>
 80059c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	f7fb f89d 	bl	8000b08 <__aeabi_dcmpeq>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d033      	beq.n	8005a3a <_printf_float+0x266>
 80059d2:	4a37      	ldr	r2, [pc, #220]	@ (8005ab0 <_printf_float+0x2dc>)
 80059d4:	2301      	movs	r3, #1
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f af54 	beq.w	800588a <_printf_float+0xb6>
 80059e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059e6:	4543      	cmp	r3, r8
 80059e8:	db02      	blt.n	80059f0 <_printf_float+0x21c>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	07d8      	lsls	r0, r3, #31
 80059ee:	d50f      	bpl.n	8005a10 <_printf_float+0x23c>
 80059f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af45 	beq.w	800588a <_printf_float+0xb6>
 8005a00:	f04f 0900 	mov.w	r9, #0
 8005a04:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a08:	f104 0a1a 	add.w	sl, r4, #26
 8005a0c:	45c8      	cmp	r8, r9
 8005a0e:	dc09      	bgt.n	8005a24 <_printf_float+0x250>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	079b      	lsls	r3, r3, #30
 8005a14:	f100 8103 	bmi.w	8005c1e <_printf_float+0x44a>
 8005a18:	68e0      	ldr	r0, [r4, #12]
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a1c:	4298      	cmp	r0, r3
 8005a1e:	bfb8      	it	lt
 8005a20:	4618      	movlt	r0, r3
 8005a22:	e734      	b.n	800588e <_printf_float+0xba>
 8005a24:	2301      	movs	r3, #1
 8005a26:	4652      	mov	r2, sl
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af2b 	beq.w	800588a <_printf_float+0xb6>
 8005a34:	f109 0901 	add.w	r9, r9, #1
 8005a38:	e7e8      	b.n	8005a0c <_printf_float+0x238>
 8005a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dc39      	bgt.n	8005ab4 <_printf_float+0x2e0>
 8005a40:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <_printf_float+0x2dc>)
 8005a42:	2301      	movs	r3, #1
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f af1d 	beq.w	800588a <_printf_float+0xb6>
 8005a50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a54:	ea59 0303 	orrs.w	r3, r9, r3
 8005a58:	d102      	bne.n	8005a60 <_printf_float+0x28c>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	07d9      	lsls	r1, r3, #31
 8005a5e:	d5d7      	bpl.n	8005a10 <_printf_float+0x23c>
 8005a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af0d 	beq.w	800588a <_printf_float+0xb6>
 8005a70:	f04f 0a00 	mov.w	sl, #0
 8005a74:	f104 0b1a 	add.w	fp, r4, #26
 8005a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a7a:	425b      	negs	r3, r3
 8005a7c:	4553      	cmp	r3, sl
 8005a7e:	dc01      	bgt.n	8005a84 <_printf_float+0x2b0>
 8005a80:	464b      	mov	r3, r9
 8005a82:	e793      	b.n	80059ac <_printf_float+0x1d8>
 8005a84:	2301      	movs	r3, #1
 8005a86:	465a      	mov	r2, fp
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f aefb 	beq.w	800588a <_printf_float+0xb6>
 8005a94:	f10a 0a01 	add.w	sl, sl, #1
 8005a98:	e7ee      	b.n	8005a78 <_printf_float+0x2a4>
 8005a9a:	bf00      	nop
 8005a9c:	7fefffff 	.word	0x7fefffff
 8005aa0:	08008418 	.word	0x08008418
 8005aa4:	0800841c 	.word	0x0800841c
 8005aa8:	08008420 	.word	0x08008420
 8005aac:	08008424 	.word	0x08008424
 8005ab0:	08008428 	.word	0x08008428
 8005ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005aba:	4553      	cmp	r3, sl
 8005abc:	bfa8      	it	ge
 8005abe:	4653      	movge	r3, sl
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	4699      	mov	r9, r3
 8005ac4:	dc36      	bgt.n	8005b34 <_printf_float+0x360>
 8005ac6:	f04f 0b00 	mov.w	fp, #0
 8005aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ace:	f104 021a 	add.w	r2, r4, #26
 8005ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ad4:	9306      	str	r3, [sp, #24]
 8005ad6:	eba3 0309 	sub.w	r3, r3, r9
 8005ada:	455b      	cmp	r3, fp
 8005adc:	dc31      	bgt.n	8005b42 <_printf_float+0x36e>
 8005ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae0:	459a      	cmp	sl, r3
 8005ae2:	dc3a      	bgt.n	8005b5a <_printf_float+0x386>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07da      	lsls	r2, r3, #31
 8005ae8:	d437      	bmi.n	8005b5a <_printf_float+0x386>
 8005aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aec:	ebaa 0903 	sub.w	r9, sl, r3
 8005af0:	9b06      	ldr	r3, [sp, #24]
 8005af2:	ebaa 0303 	sub.w	r3, sl, r3
 8005af6:	4599      	cmp	r9, r3
 8005af8:	bfa8      	it	ge
 8005afa:	4699      	movge	r9, r3
 8005afc:	f1b9 0f00 	cmp.w	r9, #0
 8005b00:	dc33      	bgt.n	8005b6a <_printf_float+0x396>
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b0a:	f104 0b1a 	add.w	fp, r4, #26
 8005b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b10:	ebaa 0303 	sub.w	r3, sl, r3
 8005b14:	eba3 0309 	sub.w	r3, r3, r9
 8005b18:	4543      	cmp	r3, r8
 8005b1a:	f77f af79 	ble.w	8005a10 <_printf_float+0x23c>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	465a      	mov	r2, fp
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f aeae 	beq.w	800588a <_printf_float+0xb6>
 8005b2e:	f108 0801 	add.w	r8, r8, #1
 8005b32:	e7ec      	b.n	8005b0e <_printf_float+0x33a>
 8005b34:	4642      	mov	r2, r8
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1c2      	bne.n	8005ac6 <_printf_float+0x2f2>
 8005b40:	e6a3      	b.n	800588a <_printf_float+0xb6>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	9206      	str	r2, [sp, #24]
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f ae9c 	beq.w	800588a <_printf_float+0xb6>
 8005b52:	9a06      	ldr	r2, [sp, #24]
 8005b54:	f10b 0b01 	add.w	fp, fp, #1
 8005b58:	e7bb      	b.n	8005ad2 <_printf_float+0x2fe>
 8005b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	d1c0      	bne.n	8005aea <_printf_float+0x316>
 8005b68:	e68f      	b.n	800588a <_printf_float+0xb6>
 8005b6a:	9a06      	ldr	r2, [sp, #24]
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	4442      	add	r2, r8
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	d1c3      	bne.n	8005b02 <_printf_float+0x32e>
 8005b7a:	e686      	b.n	800588a <_printf_float+0xb6>
 8005b7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b80:	f1ba 0f01 	cmp.w	sl, #1
 8005b84:	dc01      	bgt.n	8005b8a <_printf_float+0x3b6>
 8005b86:	07db      	lsls	r3, r3, #31
 8005b88:	d536      	bpl.n	8005bf8 <_printf_float+0x424>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	f43f ae78 	beq.w	800588a <_printf_float+0xb6>
 8005b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f43f ae70 	beq.w	800588a <_printf_float+0xb6>
 8005baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bb6:	f7fa ffa7 	bl	8000b08 <__aeabi_dcmpeq>
 8005bba:	b9c0      	cbnz	r0, 8005bee <_printf_float+0x41a>
 8005bbc:	4653      	mov	r3, sl
 8005bbe:	f108 0201 	add.w	r2, r8, #1
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d10c      	bne.n	8005be6 <_printf_float+0x412>
 8005bcc:	e65d      	b.n	800588a <_printf_float+0xb6>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	465a      	mov	r2, fp
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f43f ae56 	beq.w	800588a <_printf_float+0xb6>
 8005bde:	f108 0801 	add.w	r8, r8, #1
 8005be2:	45d0      	cmp	r8, sl
 8005be4:	dbf3      	blt.n	8005bce <_printf_float+0x3fa>
 8005be6:	464b      	mov	r3, r9
 8005be8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bec:	e6df      	b.n	80059ae <_printf_float+0x1da>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	f104 0b1a 	add.w	fp, r4, #26
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x40e>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4642      	mov	r2, r8
 8005bfc:	e7e1      	b.n	8005bc2 <_printf_float+0x3ee>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	464a      	mov	r2, r9
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae3e 	beq.w	800588a <_printf_float+0xb6>
 8005c0e:	f108 0801 	add.w	r8, r8, #1
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	4543      	cmp	r3, r8
 8005c1a:	dcf0      	bgt.n	8005bfe <_printf_float+0x42a>
 8005c1c:	e6fc      	b.n	8005a18 <_printf_float+0x244>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	f104 0919 	add.w	r9, r4, #25
 8005c26:	e7f4      	b.n	8005c12 <_printf_float+0x43e>

08005c28 <_printf_common>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	4698      	mov	r8, r3
 8005c30:	688a      	ldr	r2, [r1, #8]
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	bfb8      	it	lt
 8005c3c:	4613      	movlt	r3, r2
 8005c3e:	6033      	str	r3, [r6, #0]
 8005c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c44:	4607      	mov	r7, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	b10a      	cbz	r2, 8005c4e <_printf_common+0x26>
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	6033      	str	r3, [r6, #0]
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	0699      	lsls	r1, r3, #26
 8005c52:	bf42      	ittt	mi
 8005c54:	6833      	ldrmi	r3, [r6, #0]
 8005c56:	3302      	addmi	r3, #2
 8005c58:	6033      	strmi	r3, [r6, #0]
 8005c5a:	6825      	ldr	r5, [r4, #0]
 8005c5c:	f015 0506 	ands.w	r5, r5, #6
 8005c60:	d106      	bne.n	8005c70 <_printf_common+0x48>
 8005c62:	f104 0a19 	add.w	sl, r4, #25
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	6832      	ldr	r2, [r6, #0]
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dc26      	bgt.n	8005cbe <_printf_common+0x96>
 8005c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	3b00      	subs	r3, #0
 8005c78:	bf18      	it	ne
 8005c7a:	2301      	movne	r3, #1
 8005c7c:	0692      	lsls	r2, r2, #26
 8005c7e:	d42b      	bmi.n	8005cd8 <_printf_common+0xb0>
 8005c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c84:	4641      	mov	r1, r8
 8005c86:	4638      	mov	r0, r7
 8005c88:	47c8      	blx	r9
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d01e      	beq.n	8005ccc <_printf_common+0xa4>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	6922      	ldr	r2, [r4, #16]
 8005c92:	f003 0306 	and.w	r3, r3, #6
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	bf02      	ittt	eq
 8005c9a:	68e5      	ldreq	r5, [r4, #12]
 8005c9c:	6833      	ldreq	r3, [r6, #0]
 8005c9e:	1aed      	subeq	r5, r5, r3
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	bf0c      	ite	eq
 8005ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ca8:	2500      	movne	r5, #0
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bfc4      	itt	gt
 8005cae:	1a9b      	subgt	r3, r3, r2
 8005cb0:	18ed      	addgt	r5, r5, r3
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	341a      	adds	r4, #26
 8005cb6:	42b5      	cmp	r5, r6
 8005cb8:	d11a      	bne.n	8005cf0 <_printf_common+0xc8>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e008      	b.n	8005cd0 <_printf_common+0xa8>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4652      	mov	r2, sl
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	47c8      	blx	r9
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d103      	bne.n	8005cd4 <_printf_common+0xac>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	e7c6      	b.n	8005c66 <_printf_common+0x3e>
 8005cd8:	18e1      	adds	r1, r4, r3
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	2030      	movs	r0, #48	@ 0x30
 8005cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ce2:	4422      	add	r2, r4
 8005ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cec:	3302      	adds	r3, #2
 8005cee:	e7c7      	b.n	8005c80 <_printf_common+0x58>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c8      	blx	r9
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d0e6      	beq.n	8005ccc <_printf_common+0xa4>
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7d9      	b.n	8005cb6 <_printf_common+0x8e>
	...

08005d04 <_printf_i>:
 8005d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	7e0f      	ldrb	r7, [r1, #24]
 8005d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d0c:	2f78      	cmp	r7, #120	@ 0x78
 8005d0e:	4691      	mov	r9, r2
 8005d10:	4680      	mov	r8, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	469a      	mov	sl, r3
 8005d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d1a:	d807      	bhi.n	8005d2c <_printf_i+0x28>
 8005d1c:	2f62      	cmp	r7, #98	@ 0x62
 8005d1e:	d80a      	bhi.n	8005d36 <_printf_i+0x32>
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	f000 80d2 	beq.w	8005eca <_printf_i+0x1c6>
 8005d26:	2f58      	cmp	r7, #88	@ 0x58
 8005d28:	f000 80b9 	beq.w	8005e9e <_printf_i+0x19a>
 8005d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d34:	e03a      	b.n	8005dac <_printf_i+0xa8>
 8005d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d3a:	2b15      	cmp	r3, #21
 8005d3c:	d8f6      	bhi.n	8005d2c <_printf_i+0x28>
 8005d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d44 <_printf_i+0x40>)
 8005d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005db1 	.word	0x08005db1
 8005d4c:	08005d2d 	.word	0x08005d2d
 8005d50:	08005d2d 	.word	0x08005d2d
 8005d54:	08005d2d 	.word	0x08005d2d
 8005d58:	08005d2d 	.word	0x08005d2d
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005d2d 	.word	0x08005d2d
 8005d64:	08005d2d 	.word	0x08005d2d
 8005d68:	08005d2d 	.word	0x08005d2d
 8005d6c:	08005d2d 	.word	0x08005d2d
 8005d70:	08005eb1 	.word	0x08005eb1
 8005d74:	08005ddb 	.word	0x08005ddb
 8005d78:	08005e6b 	.word	0x08005e6b
 8005d7c:	08005d2d 	.word	0x08005d2d
 8005d80:	08005d2d 	.word	0x08005d2d
 8005d84:	08005ed3 	.word	0x08005ed3
 8005d88:	08005d2d 	.word	0x08005d2d
 8005d8c:	08005ddb 	.word	0x08005ddb
 8005d90:	08005d2d 	.word	0x08005d2d
 8005d94:	08005d2d 	.word	0x08005d2d
 8005d98:	08005e73 	.word	0x08005e73
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6032      	str	r2, [r6, #0]
 8005da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dac:	2301      	movs	r3, #1
 8005dae:	e09d      	b.n	8005eec <_printf_i+0x1e8>
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	6031      	str	r1, [r6, #0]
 8005db8:	0606      	lsls	r6, r0, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xbc>
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	e003      	b.n	8005dc8 <_printf_i+0xc4>
 8005dc0:	0645      	lsls	r5, r0, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xb8>
 8005dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	da03      	bge.n	8005dd4 <_printf_i+0xd0>
 8005dcc:	232d      	movs	r3, #45	@ 0x2d
 8005dce:	426d      	negs	r5, r5
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd4:	4859      	ldr	r0, [pc, #356]	@ (8005f3c <_printf_i+0x238>)
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	e011      	b.n	8005dfe <_printf_i+0xfa>
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	0608      	lsls	r0, r1, #24
 8005de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005de4:	d402      	bmi.n	8005dec <_printf_i+0xe8>
 8005de6:	0649      	lsls	r1, r1, #25
 8005de8:	bf48      	it	mi
 8005dea:	b2ad      	uxthmi	r5, r5
 8005dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dee:	4853      	ldr	r0, [pc, #332]	@ (8005f3c <_printf_i+0x238>)
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	bf14      	ite	ne
 8005df4:	230a      	movne	r3, #10
 8005df6:	2308      	moveq	r3, #8
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dfe:	6866      	ldr	r6, [r4, #4]
 8005e00:	60a6      	str	r6, [r4, #8]
 8005e02:	2e00      	cmp	r6, #0
 8005e04:	bfa2      	ittt	ge
 8005e06:	6821      	ldrge	r1, [r4, #0]
 8005e08:	f021 0104 	bicge.w	r1, r1, #4
 8005e0c:	6021      	strge	r1, [r4, #0]
 8005e0e:	b90d      	cbnz	r5, 8005e14 <_printf_i+0x110>
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	d04b      	beq.n	8005eac <_printf_i+0x1a8>
 8005e14:	4616      	mov	r6, r2
 8005e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e1e:	5dc7      	ldrb	r7, [r0, r7]
 8005e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e24:	462f      	mov	r7, r5
 8005e26:	42bb      	cmp	r3, r7
 8005e28:	460d      	mov	r5, r1
 8005e2a:	d9f4      	bls.n	8005e16 <_printf_i+0x112>
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d10b      	bne.n	8005e48 <_printf_i+0x144>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	07df      	lsls	r7, r3, #31
 8005e34:	d508      	bpl.n	8005e48 <_printf_i+0x144>
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	6861      	ldr	r1, [r4, #4]
 8005e3a:	4299      	cmp	r1, r3
 8005e3c:	bfde      	ittt	le
 8005e3e:	2330      	movle	r3, #48	@ 0x30
 8005e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e48:	1b92      	subs	r2, r2, r6
 8005e4a:	6122      	str	r2, [r4, #16]
 8005e4c:	f8cd a000 	str.w	sl, [sp]
 8005e50:	464b      	mov	r3, r9
 8005e52:	aa03      	add	r2, sp, #12
 8005e54:	4621      	mov	r1, r4
 8005e56:	4640      	mov	r0, r8
 8005e58:	f7ff fee6 	bl	8005c28 <_printf_common>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d14a      	bne.n	8005ef6 <_printf_i+0x1f2>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	b004      	add	sp, #16
 8005e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	4833      	ldr	r0, [pc, #204]	@ (8005f40 <_printf_i+0x23c>)
 8005e74:	2778      	movs	r7, #120	@ 0x78
 8005e76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	6831      	ldr	r1, [r6, #0]
 8005e7e:	061f      	lsls	r7, r3, #24
 8005e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e84:	d402      	bmi.n	8005e8c <_printf_i+0x188>
 8005e86:	065f      	lsls	r7, r3, #25
 8005e88:	bf48      	it	mi
 8005e8a:	b2ad      	uxthmi	r5, r5
 8005e8c:	6031      	str	r1, [r6, #0]
 8005e8e:	07d9      	lsls	r1, r3, #31
 8005e90:	bf44      	itt	mi
 8005e92:	f043 0320 	orrmi.w	r3, r3, #32
 8005e96:	6023      	strmi	r3, [r4, #0]
 8005e98:	b11d      	cbz	r5, 8005ea2 <_printf_i+0x19e>
 8005e9a:	2310      	movs	r3, #16
 8005e9c:	e7ac      	b.n	8005df8 <_printf_i+0xf4>
 8005e9e:	4827      	ldr	r0, [pc, #156]	@ (8005f3c <_printf_i+0x238>)
 8005ea0:	e7e9      	b.n	8005e76 <_printf_i+0x172>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	f023 0320 	bic.w	r3, r3, #32
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	e7f6      	b.n	8005e9a <_printf_i+0x196>
 8005eac:	4616      	mov	r6, r2
 8005eae:	e7bd      	b.n	8005e2c <_printf_i+0x128>
 8005eb0:	6833      	ldr	r3, [r6, #0]
 8005eb2:	6825      	ldr	r5, [r4, #0]
 8005eb4:	6961      	ldr	r1, [r4, #20]
 8005eb6:	1d18      	adds	r0, r3, #4
 8005eb8:	6030      	str	r0, [r6, #0]
 8005eba:	062e      	lsls	r6, r5, #24
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_i+0x1c0>
 8005ec0:	6019      	str	r1, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <_printf_i+0x1c6>
 8005ec4:	0668      	lsls	r0, r5, #25
 8005ec6:	d5fb      	bpl.n	8005ec0 <_printf_i+0x1bc>
 8005ec8:	8019      	strh	r1, [r3, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	4616      	mov	r6, r2
 8005ed0:	e7bc      	b.n	8005e4c <_printf_i+0x148>
 8005ed2:	6833      	ldr	r3, [r6, #0]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	6862      	ldr	r2, [r4, #4]
 8005edc:	2100      	movs	r1, #0
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7fa f996 	bl	8000210 <memchr>
 8005ee4:	b108      	cbz	r0, 8005eea <_printf_i+0x1e6>
 8005ee6:	1b80      	subs	r0, r0, r6
 8005ee8:	6060      	str	r0, [r4, #4]
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef4:	e7aa      	b.n	8005e4c <_printf_i+0x148>
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	47d0      	blx	sl
 8005f00:	3001      	adds	r0, #1
 8005f02:	d0ad      	beq.n	8005e60 <_printf_i+0x15c>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	079b      	lsls	r3, r3, #30
 8005f08:	d413      	bmi.n	8005f32 <_printf_i+0x22e>
 8005f0a:	68e0      	ldr	r0, [r4, #12]
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	4298      	cmp	r0, r3
 8005f10:	bfb8      	it	lt
 8005f12:	4618      	movlt	r0, r3
 8005f14:	e7a6      	b.n	8005e64 <_printf_i+0x160>
 8005f16:	2301      	movs	r3, #1
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	47d0      	blx	sl
 8005f20:	3001      	adds	r0, #1
 8005f22:	d09d      	beq.n	8005e60 <_printf_i+0x15c>
 8005f24:	3501      	adds	r5, #1
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	9903      	ldr	r1, [sp, #12]
 8005f2a:	1a5b      	subs	r3, r3, r1
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dcf2      	bgt.n	8005f16 <_printf_i+0x212>
 8005f30:	e7eb      	b.n	8005f0a <_printf_i+0x206>
 8005f32:	2500      	movs	r5, #0
 8005f34:	f104 0619 	add.w	r6, r4, #25
 8005f38:	e7f5      	b.n	8005f26 <_printf_i+0x222>
 8005f3a:	bf00      	nop
 8005f3c:	0800842a 	.word	0x0800842a
 8005f40:	0800843b 	.word	0x0800843b

08005f44 <std>:
 8005f44:	2300      	movs	r3, #0
 8005f46:	b510      	push	{r4, lr}
 8005f48:	4604      	mov	r4, r0
 8005f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f52:	6083      	str	r3, [r0, #8]
 8005f54:	8181      	strh	r1, [r0, #12]
 8005f56:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f58:	81c2      	strh	r2, [r0, #14]
 8005f5a:	6183      	str	r3, [r0, #24]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	2208      	movs	r2, #8
 8005f60:	305c      	adds	r0, #92	@ 0x5c
 8005f62:	f000 f928 	bl	80061b6 <memset>
 8005f66:	4b0d      	ldr	r3, [pc, #52]	@ (8005f9c <std+0x58>)
 8005f68:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <std+0x5c>)
 8005f6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <std+0x60>)
 8005f70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f72:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <std+0x64>)
 8005f74:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f76:	4b0d      	ldr	r3, [pc, #52]	@ (8005fac <std+0x68>)
 8005f78:	6224      	str	r4, [r4, #32]
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	d006      	beq.n	8005f8c <std+0x48>
 8005f7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f82:	4294      	cmp	r4, r2
 8005f84:	d002      	beq.n	8005f8c <std+0x48>
 8005f86:	33d0      	adds	r3, #208	@ 0xd0
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d105      	bne.n	8005f98 <std+0x54>
 8005f8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f94:	f000 b99e 	b.w	80062d4 <__retarget_lock_init_recursive>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08006131 	.word	0x08006131
 8005fa0:	08006153 	.word	0x08006153
 8005fa4:	0800618b 	.word	0x0800618b
 8005fa8:	080061af 	.word	0x080061af
 8005fac:	200003c0 	.word	0x200003c0

08005fb0 <stdio_exit_handler>:
 8005fb0:	4a02      	ldr	r2, [pc, #8]	@ (8005fbc <stdio_exit_handler+0xc>)
 8005fb2:	4903      	ldr	r1, [pc, #12]	@ (8005fc0 <stdio_exit_handler+0x10>)
 8005fb4:	4803      	ldr	r0, [pc, #12]	@ (8005fc4 <stdio_exit_handler+0x14>)
 8005fb6:	f000 b869 	b.w	800608c <_fwalk_sglue>
 8005fba:	bf00      	nop
 8005fbc:	20000034 	.word	0x20000034
 8005fc0:	08007c35 	.word	0x08007c35
 8005fc4:	20000044 	.word	0x20000044

08005fc8 <cleanup_stdio>:
 8005fc8:	6841      	ldr	r1, [r0, #4]
 8005fca:	4b0c      	ldr	r3, [pc, #48]	@ (8005ffc <cleanup_stdio+0x34>)
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	d001      	beq.n	8005fd8 <cleanup_stdio+0x10>
 8005fd4:	f001 fe2e 	bl	8007c34 <_fflush_r>
 8005fd8:	68a1      	ldr	r1, [r4, #8]
 8005fda:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <cleanup_stdio+0x38>)
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	d002      	beq.n	8005fe6 <cleanup_stdio+0x1e>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f001 fe27 	bl	8007c34 <_fflush_r>
 8005fe6:	68e1      	ldr	r1, [r4, #12]
 8005fe8:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <cleanup_stdio+0x3c>)
 8005fea:	4299      	cmp	r1, r3
 8005fec:	d004      	beq.n	8005ff8 <cleanup_stdio+0x30>
 8005fee:	4620      	mov	r0, r4
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	f001 be1e 	b.w	8007c34 <_fflush_r>
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200003c0 	.word	0x200003c0
 8006000:	20000428 	.word	0x20000428
 8006004:	20000490 	.word	0x20000490

08006008 <global_stdio_init.part.0>:
 8006008:	b510      	push	{r4, lr}
 800600a:	4b0b      	ldr	r3, [pc, #44]	@ (8006038 <global_stdio_init.part.0+0x30>)
 800600c:	4c0b      	ldr	r4, [pc, #44]	@ (800603c <global_stdio_init.part.0+0x34>)
 800600e:	4a0c      	ldr	r2, [pc, #48]	@ (8006040 <global_stdio_init.part.0+0x38>)
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	4620      	mov	r0, r4
 8006014:	2200      	movs	r2, #0
 8006016:	2104      	movs	r1, #4
 8006018:	f7ff ff94 	bl	8005f44 <std>
 800601c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006020:	2201      	movs	r2, #1
 8006022:	2109      	movs	r1, #9
 8006024:	f7ff ff8e 	bl	8005f44 <std>
 8006028:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800602c:	2202      	movs	r2, #2
 800602e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006032:	2112      	movs	r1, #18
 8006034:	f7ff bf86 	b.w	8005f44 <std>
 8006038:	200004f8 	.word	0x200004f8
 800603c:	200003c0 	.word	0x200003c0
 8006040:	08005fb1 	.word	0x08005fb1

08006044 <__sfp_lock_acquire>:
 8006044:	4801      	ldr	r0, [pc, #4]	@ (800604c <__sfp_lock_acquire+0x8>)
 8006046:	f000 b946 	b.w	80062d6 <__retarget_lock_acquire_recursive>
 800604a:	bf00      	nop
 800604c:	20000501 	.word	0x20000501

08006050 <__sfp_lock_release>:
 8006050:	4801      	ldr	r0, [pc, #4]	@ (8006058 <__sfp_lock_release+0x8>)
 8006052:	f000 b941 	b.w	80062d8 <__retarget_lock_release_recursive>
 8006056:	bf00      	nop
 8006058:	20000501 	.word	0x20000501

0800605c <__sinit>:
 800605c:	b510      	push	{r4, lr}
 800605e:	4604      	mov	r4, r0
 8006060:	f7ff fff0 	bl	8006044 <__sfp_lock_acquire>
 8006064:	6a23      	ldr	r3, [r4, #32]
 8006066:	b11b      	cbz	r3, 8006070 <__sinit+0x14>
 8006068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800606c:	f7ff bff0 	b.w	8006050 <__sfp_lock_release>
 8006070:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <__sinit+0x28>)
 8006072:	6223      	str	r3, [r4, #32]
 8006074:	4b04      	ldr	r3, [pc, #16]	@ (8006088 <__sinit+0x2c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f5      	bne.n	8006068 <__sinit+0xc>
 800607c:	f7ff ffc4 	bl	8006008 <global_stdio_init.part.0>
 8006080:	e7f2      	b.n	8006068 <__sinit+0xc>
 8006082:	bf00      	nop
 8006084:	08005fc9 	.word	0x08005fc9
 8006088:	200004f8 	.word	0x200004f8

0800608c <_fwalk_sglue>:
 800608c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006090:	4607      	mov	r7, r0
 8006092:	4688      	mov	r8, r1
 8006094:	4614      	mov	r4, r2
 8006096:	2600      	movs	r6, #0
 8006098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800609c:	f1b9 0901 	subs.w	r9, r9, #1
 80060a0:	d505      	bpl.n	80060ae <_fwalk_sglue+0x22>
 80060a2:	6824      	ldr	r4, [r4, #0]
 80060a4:	2c00      	cmp	r4, #0
 80060a6:	d1f7      	bne.n	8006098 <_fwalk_sglue+0xc>
 80060a8:	4630      	mov	r0, r6
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d907      	bls.n	80060c4 <_fwalk_sglue+0x38>
 80060b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060b8:	3301      	adds	r3, #1
 80060ba:	d003      	beq.n	80060c4 <_fwalk_sglue+0x38>
 80060bc:	4629      	mov	r1, r5
 80060be:	4638      	mov	r0, r7
 80060c0:	47c0      	blx	r8
 80060c2:	4306      	orrs	r6, r0
 80060c4:	3568      	adds	r5, #104	@ 0x68
 80060c6:	e7e9      	b.n	800609c <_fwalk_sglue+0x10>

080060c8 <sniprintf>:
 80060c8:	b40c      	push	{r2, r3}
 80060ca:	b530      	push	{r4, r5, lr}
 80060cc:	4b17      	ldr	r3, [pc, #92]	@ (800612c <sniprintf+0x64>)
 80060ce:	1e0c      	subs	r4, r1, #0
 80060d0:	681d      	ldr	r5, [r3, #0]
 80060d2:	b09d      	sub	sp, #116	@ 0x74
 80060d4:	da08      	bge.n	80060e8 <sniprintf+0x20>
 80060d6:	238b      	movs	r3, #139	@ 0x8b
 80060d8:	602b      	str	r3, [r5, #0]
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	b01d      	add	sp, #116	@ 0x74
 80060e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e4:	b002      	add	sp, #8
 80060e6:	4770      	bx	lr
 80060e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060f0:	bf14      	ite	ne
 80060f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060f6:	4623      	moveq	r3, r4
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006100:	9002      	str	r0, [sp, #8]
 8006102:	9006      	str	r0, [sp, #24]
 8006104:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006108:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800610a:	ab21      	add	r3, sp, #132	@ 0x84
 800610c:	a902      	add	r1, sp, #8
 800610e:	4628      	mov	r0, r5
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	f001 fc0f 	bl	8007934 <_svfiprintf_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	bfbc      	itt	lt
 800611a:	238b      	movlt	r3, #139	@ 0x8b
 800611c:	602b      	strlt	r3, [r5, #0]
 800611e:	2c00      	cmp	r4, #0
 8006120:	d0dd      	beq.n	80060de <sniprintf+0x16>
 8006122:	9b02      	ldr	r3, [sp, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	e7d9      	b.n	80060de <sniprintf+0x16>
 800612a:	bf00      	nop
 800612c:	20000040 	.word	0x20000040

08006130 <__sread>:
 8006130:	b510      	push	{r4, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006138:	f000 f87e 	bl	8006238 <_read_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	bfab      	itete	ge
 8006140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006142:	89a3      	ldrhlt	r3, [r4, #12]
 8006144:	181b      	addge	r3, r3, r0
 8006146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800614a:	bfac      	ite	ge
 800614c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800614e:	81a3      	strhlt	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__swrite>:
 8006152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	461f      	mov	r7, r3
 8006158:	898b      	ldrh	r3, [r1, #12]
 800615a:	05db      	lsls	r3, r3, #23
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	4616      	mov	r6, r2
 8006162:	d505      	bpl.n	8006170 <__swrite+0x1e>
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	2302      	movs	r3, #2
 800616a:	2200      	movs	r2, #0
 800616c:	f000 f852 	bl	8006214 <_lseek_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	f000 b869 	b.w	800625c <_write_r>

0800618a <__sseek>:
 800618a:	b510      	push	{r4, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006192:	f000 f83f 	bl	8006214 <_lseek_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	bf15      	itete	ne
 800619c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800619e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061a6:	81a3      	strheq	r3, [r4, #12]
 80061a8:	bf18      	it	ne
 80061aa:	81a3      	strhne	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__sclose>:
 80061ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b2:	f000 b81f 	b.w	80061f4 <_close_r>

080061b6 <memset>:
 80061b6:	4402      	add	r2, r0
 80061b8:	4603      	mov	r3, r0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d100      	bne.n	80061c0 <memset+0xa>
 80061be:	4770      	bx	lr
 80061c0:	f803 1b01 	strb.w	r1, [r3], #1
 80061c4:	e7f9      	b.n	80061ba <memset+0x4>

080061c6 <strncpy>:
 80061c6:	b510      	push	{r4, lr}
 80061c8:	3901      	subs	r1, #1
 80061ca:	4603      	mov	r3, r0
 80061cc:	b132      	cbz	r2, 80061dc <strncpy+0x16>
 80061ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80061d2:	f803 4b01 	strb.w	r4, [r3], #1
 80061d6:	3a01      	subs	r2, #1
 80061d8:	2c00      	cmp	r4, #0
 80061da:	d1f7      	bne.n	80061cc <strncpy+0x6>
 80061dc:	441a      	add	r2, r3
 80061de:	2100      	movs	r1, #0
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d100      	bne.n	80061e6 <strncpy+0x20>
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ea:	e7f9      	b.n	80061e0 <strncpy+0x1a>

080061ec <_localeconv_r>:
 80061ec:	4800      	ldr	r0, [pc, #0]	@ (80061f0 <_localeconv_r+0x4>)
 80061ee:	4770      	bx	lr
 80061f0:	20000180 	.word	0x20000180

080061f4 <_close_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d06      	ldr	r5, [pc, #24]	@ (8006210 <_close_r+0x1c>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	f7fb fc04 	bl	8001a0c <_close>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_close_r+0x1a>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_close_r+0x1a>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	200004fc 	.word	0x200004fc

08006214 <_lseek_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	@ (8006234 <_lseek_r+0x20>)
 8006218:	4604      	mov	r4, r0
 800621a:	4608      	mov	r0, r1
 800621c:	4611      	mov	r1, r2
 800621e:	2200      	movs	r2, #0
 8006220:	602a      	str	r2, [r5, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f7fb fc19 	bl	8001a5a <_lseek>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_lseek_r+0x1e>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_lseek_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	200004fc 	.word	0x200004fc

08006238 <_read_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4d07      	ldr	r5, [pc, #28]	@ (8006258 <_read_r+0x20>)
 800623c:	4604      	mov	r4, r0
 800623e:	4608      	mov	r0, r1
 8006240:	4611      	mov	r1, r2
 8006242:	2200      	movs	r2, #0
 8006244:	602a      	str	r2, [r5, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	f7fb fba7 	bl	800199a <_read>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_read_r+0x1e>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_read_r+0x1e>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	200004fc 	.word	0x200004fc

0800625c <_write_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4d07      	ldr	r5, [pc, #28]	@ (800627c <_write_r+0x20>)
 8006260:	4604      	mov	r4, r0
 8006262:	4608      	mov	r0, r1
 8006264:	4611      	mov	r1, r2
 8006266:	2200      	movs	r2, #0
 8006268:	602a      	str	r2, [r5, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f7fb fbb2 	bl	80019d4 <_write>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_write_r+0x1e>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_write_r+0x1e>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	200004fc 	.word	0x200004fc

08006280 <__errno>:
 8006280:	4b01      	ldr	r3, [pc, #4]	@ (8006288 <__errno+0x8>)
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20000040 	.word	0x20000040

0800628c <__libc_init_array>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4d0d      	ldr	r5, [pc, #52]	@ (80062c4 <__libc_init_array+0x38>)
 8006290:	4c0d      	ldr	r4, [pc, #52]	@ (80062c8 <__libc_init_array+0x3c>)
 8006292:	1b64      	subs	r4, r4, r5
 8006294:	10a4      	asrs	r4, r4, #2
 8006296:	2600      	movs	r6, #0
 8006298:	42a6      	cmp	r6, r4
 800629a:	d109      	bne.n	80062b0 <__libc_init_array+0x24>
 800629c:	4d0b      	ldr	r5, [pc, #44]	@ (80062cc <__libc_init_array+0x40>)
 800629e:	4c0c      	ldr	r4, [pc, #48]	@ (80062d0 <__libc_init_array+0x44>)
 80062a0:	f002 f866 	bl	8008370 <_init>
 80062a4:	1b64      	subs	r4, r4, r5
 80062a6:	10a4      	asrs	r4, r4, #2
 80062a8:	2600      	movs	r6, #0
 80062aa:	42a6      	cmp	r6, r4
 80062ac:	d105      	bne.n	80062ba <__libc_init_array+0x2e>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b4:	4798      	blx	r3
 80062b6:	3601      	adds	r6, #1
 80062b8:	e7ee      	b.n	8006298 <__libc_init_array+0xc>
 80062ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80062be:	4798      	blx	r3
 80062c0:	3601      	adds	r6, #1
 80062c2:	e7f2      	b.n	80062aa <__libc_init_array+0x1e>
 80062c4:	08008790 	.word	0x08008790
 80062c8:	08008790 	.word	0x08008790
 80062cc:	08008790 	.word	0x08008790
 80062d0:	08008794 	.word	0x08008794

080062d4 <__retarget_lock_init_recursive>:
 80062d4:	4770      	bx	lr

080062d6 <__retarget_lock_acquire_recursive>:
 80062d6:	4770      	bx	lr

080062d8 <__retarget_lock_release_recursive>:
 80062d8:	4770      	bx	lr

080062da <quorem>:
 80062da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062de:	6903      	ldr	r3, [r0, #16]
 80062e0:	690c      	ldr	r4, [r1, #16]
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	4607      	mov	r7, r0
 80062e6:	db7e      	blt.n	80063e6 <quorem+0x10c>
 80062e8:	3c01      	subs	r4, #1
 80062ea:	f101 0814 	add.w	r8, r1, #20
 80062ee:	00a3      	lsls	r3, r4, #2
 80062f0:	f100 0514 	add.w	r5, r0, #20
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006304:	3301      	adds	r3, #1
 8006306:	429a      	cmp	r2, r3
 8006308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800630c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006310:	d32e      	bcc.n	8006370 <quorem+0x96>
 8006312:	f04f 0a00 	mov.w	sl, #0
 8006316:	46c4      	mov	ip, r8
 8006318:	46ae      	mov	lr, r5
 800631a:	46d3      	mov	fp, sl
 800631c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006320:	b298      	uxth	r0, r3
 8006322:	fb06 a000 	mla	r0, r6, r0, sl
 8006326:	0c02      	lsrs	r2, r0, #16
 8006328:	0c1b      	lsrs	r3, r3, #16
 800632a:	fb06 2303 	mla	r3, r6, r3, r2
 800632e:	f8de 2000 	ldr.w	r2, [lr]
 8006332:	b280      	uxth	r0, r0
 8006334:	b292      	uxth	r2, r2
 8006336:	1a12      	subs	r2, r2, r0
 8006338:	445a      	add	r2, fp
 800633a:	f8de 0000 	ldr.w	r0, [lr]
 800633e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006342:	b29b      	uxth	r3, r3
 8006344:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006348:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800634c:	b292      	uxth	r2, r2
 800634e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006352:	45e1      	cmp	r9, ip
 8006354:	f84e 2b04 	str.w	r2, [lr], #4
 8006358:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800635c:	d2de      	bcs.n	800631c <quorem+0x42>
 800635e:	9b00      	ldr	r3, [sp, #0]
 8006360:	58eb      	ldr	r3, [r5, r3]
 8006362:	b92b      	cbnz	r3, 8006370 <quorem+0x96>
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	3b04      	subs	r3, #4
 8006368:	429d      	cmp	r5, r3
 800636a:	461a      	mov	r2, r3
 800636c:	d32f      	bcc.n	80063ce <quorem+0xf4>
 800636e:	613c      	str	r4, [r7, #16]
 8006370:	4638      	mov	r0, r7
 8006372:	f001 f97b 	bl	800766c <__mcmp>
 8006376:	2800      	cmp	r0, #0
 8006378:	db25      	blt.n	80063c6 <quorem+0xec>
 800637a:	4629      	mov	r1, r5
 800637c:	2000      	movs	r0, #0
 800637e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006382:	f8d1 c000 	ldr.w	ip, [r1]
 8006386:	fa1f fe82 	uxth.w	lr, r2
 800638a:	fa1f f38c 	uxth.w	r3, ip
 800638e:	eba3 030e 	sub.w	r3, r3, lr
 8006392:	4403      	add	r3, r0
 8006394:	0c12      	lsrs	r2, r2, #16
 8006396:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800639a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800639e:	b29b      	uxth	r3, r3
 80063a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063a4:	45c1      	cmp	r9, r8
 80063a6:	f841 3b04 	str.w	r3, [r1], #4
 80063aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063ae:	d2e6      	bcs.n	800637e <quorem+0xa4>
 80063b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063b8:	b922      	cbnz	r2, 80063c4 <quorem+0xea>
 80063ba:	3b04      	subs	r3, #4
 80063bc:	429d      	cmp	r5, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	d30b      	bcc.n	80063da <quorem+0x100>
 80063c2:	613c      	str	r4, [r7, #16]
 80063c4:	3601      	adds	r6, #1
 80063c6:	4630      	mov	r0, r6
 80063c8:	b003      	add	sp, #12
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	3b04      	subs	r3, #4
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d1cb      	bne.n	800636e <quorem+0x94>
 80063d6:	3c01      	subs	r4, #1
 80063d8:	e7c6      	b.n	8006368 <quorem+0x8e>
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	3b04      	subs	r3, #4
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d1ef      	bne.n	80063c2 <quorem+0xe8>
 80063e2:	3c01      	subs	r4, #1
 80063e4:	e7ea      	b.n	80063bc <quorem+0xe2>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e7ee      	b.n	80063c8 <quorem+0xee>
 80063ea:	0000      	movs	r0, r0
 80063ec:	0000      	movs	r0, r0
	...

080063f0 <_dtoa_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	69c7      	ldr	r7, [r0, #28]
 80063f6:	b099      	sub	sp, #100	@ 0x64
 80063f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063fc:	ec55 4b10 	vmov	r4, r5, d0
 8006400:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006402:	9109      	str	r1, [sp, #36]	@ 0x24
 8006404:	4683      	mov	fp, r0
 8006406:	920e      	str	r2, [sp, #56]	@ 0x38
 8006408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800640a:	b97f      	cbnz	r7, 800642c <_dtoa_r+0x3c>
 800640c:	2010      	movs	r0, #16
 800640e:	f000 fdfd 	bl	800700c <malloc>
 8006412:	4602      	mov	r2, r0
 8006414:	f8cb 001c 	str.w	r0, [fp, #28]
 8006418:	b920      	cbnz	r0, 8006424 <_dtoa_r+0x34>
 800641a:	4ba7      	ldr	r3, [pc, #668]	@ (80066b8 <_dtoa_r+0x2c8>)
 800641c:	21ef      	movs	r1, #239	@ 0xef
 800641e:	48a7      	ldr	r0, [pc, #668]	@ (80066bc <_dtoa_r+0x2cc>)
 8006420:	f001 fc68 	bl	8007cf4 <__assert_func>
 8006424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006428:	6007      	str	r7, [r0, #0]
 800642a:	60c7      	str	r7, [r0, #12]
 800642c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006430:	6819      	ldr	r1, [r3, #0]
 8006432:	b159      	cbz	r1, 800644c <_dtoa_r+0x5c>
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	604a      	str	r2, [r1, #4]
 8006438:	2301      	movs	r3, #1
 800643a:	4093      	lsls	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
 800643e:	4658      	mov	r0, fp
 8006440:	f000 feda 	bl	80071f8 <_Bfree>
 8006444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	1e2b      	subs	r3, r5, #0
 800644e:	bfb9      	ittee	lt
 8006450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006454:	9303      	strlt	r3, [sp, #12]
 8006456:	2300      	movge	r3, #0
 8006458:	6033      	strge	r3, [r6, #0]
 800645a:	9f03      	ldr	r7, [sp, #12]
 800645c:	4b98      	ldr	r3, [pc, #608]	@ (80066c0 <_dtoa_r+0x2d0>)
 800645e:	bfbc      	itt	lt
 8006460:	2201      	movlt	r2, #1
 8006462:	6032      	strlt	r2, [r6, #0]
 8006464:	43bb      	bics	r3, r7
 8006466:	d112      	bne.n	800648e <_dtoa_r+0x9e>
 8006468:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800646a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006474:	4323      	orrs	r3, r4
 8006476:	f000 854d 	beq.w	8006f14 <_dtoa_r+0xb24>
 800647a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800647c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80066d4 <_dtoa_r+0x2e4>
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 854f 	beq.w	8006f24 <_dtoa_r+0xb34>
 8006486:	f10a 0303 	add.w	r3, sl, #3
 800648a:	f000 bd49 	b.w	8006f20 <_dtoa_r+0xb30>
 800648e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	ec51 0b17 	vmov	r0, r1, d7
 8006498:	2300      	movs	r3, #0
 800649a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800649e:	f7fa fb33 	bl	8000b08 <__aeabi_dcmpeq>
 80064a2:	4680      	mov	r8, r0
 80064a4:	b158      	cbz	r0, 80064be <_dtoa_r+0xce>
 80064a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064a8:	2301      	movs	r3, #1
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064ae:	b113      	cbz	r3, 80064b6 <_dtoa_r+0xc6>
 80064b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80064b2:	4b84      	ldr	r3, [pc, #528]	@ (80066c4 <_dtoa_r+0x2d4>)
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80066d8 <_dtoa_r+0x2e8>
 80064ba:	f000 bd33 	b.w	8006f24 <_dtoa_r+0xb34>
 80064be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80064c2:	aa16      	add	r2, sp, #88	@ 0x58
 80064c4:	a917      	add	r1, sp, #92	@ 0x5c
 80064c6:	4658      	mov	r0, fp
 80064c8:	f001 f980 	bl	80077cc <__d2b>
 80064cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80064d0:	4681      	mov	r9, r0
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d077      	beq.n	80065c6 <_dtoa_r+0x1d6>
 80064d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80064dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064f0:	4619      	mov	r1, r3
 80064f2:	2200      	movs	r2, #0
 80064f4:	4b74      	ldr	r3, [pc, #464]	@ (80066c8 <_dtoa_r+0x2d8>)
 80064f6:	f7f9 fee7 	bl	80002c8 <__aeabi_dsub>
 80064fa:	a369      	add	r3, pc, #420	@ (adr r3, 80066a0 <_dtoa_r+0x2b0>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7fa f89a 	bl	8000638 <__aeabi_dmul>
 8006504:	a368      	add	r3, pc, #416	@ (adr r3, 80066a8 <_dtoa_r+0x2b8>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7f9 fedf 	bl	80002cc <__adddf3>
 800650e:	4604      	mov	r4, r0
 8006510:	4630      	mov	r0, r6
 8006512:	460d      	mov	r5, r1
 8006514:	f7fa f826 	bl	8000564 <__aeabi_i2d>
 8006518:	a365      	add	r3, pc, #404	@ (adr r3, 80066b0 <_dtoa_r+0x2c0>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7fa f88b 	bl	8000638 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7f9 fecf 	bl	80002cc <__adddf3>
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	f7fa fb31 	bl	8000b98 <__aeabi_d2iz>
 8006536:	2200      	movs	r2, #0
 8006538:	4607      	mov	r7, r0
 800653a:	2300      	movs	r3, #0
 800653c:	4620      	mov	r0, r4
 800653e:	4629      	mov	r1, r5
 8006540:	f7fa faec 	bl	8000b1c <__aeabi_dcmplt>
 8006544:	b140      	cbz	r0, 8006558 <_dtoa_r+0x168>
 8006546:	4638      	mov	r0, r7
 8006548:	f7fa f80c 	bl	8000564 <__aeabi_i2d>
 800654c:	4622      	mov	r2, r4
 800654e:	462b      	mov	r3, r5
 8006550:	f7fa fada 	bl	8000b08 <__aeabi_dcmpeq>
 8006554:	b900      	cbnz	r0, 8006558 <_dtoa_r+0x168>
 8006556:	3f01      	subs	r7, #1
 8006558:	2f16      	cmp	r7, #22
 800655a:	d851      	bhi.n	8006600 <_dtoa_r+0x210>
 800655c:	4b5b      	ldr	r3, [pc, #364]	@ (80066cc <_dtoa_r+0x2dc>)
 800655e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800656a:	f7fa fad7 	bl	8000b1c <__aeabi_dcmplt>
 800656e:	2800      	cmp	r0, #0
 8006570:	d048      	beq.n	8006604 <_dtoa_r+0x214>
 8006572:	3f01      	subs	r7, #1
 8006574:	2300      	movs	r3, #0
 8006576:	9312      	str	r3, [sp, #72]	@ 0x48
 8006578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800657a:	1b9b      	subs	r3, r3, r6
 800657c:	1e5a      	subs	r2, r3, #1
 800657e:	bf44      	itt	mi
 8006580:	f1c3 0801 	rsbmi	r8, r3, #1
 8006584:	2300      	movmi	r3, #0
 8006586:	9208      	str	r2, [sp, #32]
 8006588:	bf54      	ite	pl
 800658a:	f04f 0800 	movpl.w	r8, #0
 800658e:	9308      	strmi	r3, [sp, #32]
 8006590:	2f00      	cmp	r7, #0
 8006592:	db39      	blt.n	8006608 <_dtoa_r+0x218>
 8006594:	9b08      	ldr	r3, [sp, #32]
 8006596:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006598:	443b      	add	r3, r7
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	2300      	movs	r3, #0
 800659e:	930a      	str	r3, [sp, #40]	@ 0x28
 80065a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a2:	2b09      	cmp	r3, #9
 80065a4:	d864      	bhi.n	8006670 <_dtoa_r+0x280>
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	bfc4      	itt	gt
 80065aa:	3b04      	subgt	r3, #4
 80065ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80065ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b0:	f1a3 0302 	sub.w	r3, r3, #2
 80065b4:	bfcc      	ite	gt
 80065b6:	2400      	movgt	r4, #0
 80065b8:	2401      	movle	r4, #1
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d863      	bhi.n	8006686 <_dtoa_r+0x296>
 80065be:	e8df f003 	tbb	[pc, r3]
 80065c2:	372a      	.short	0x372a
 80065c4:	5535      	.short	0x5535
 80065c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80065ca:	441e      	add	r6, r3
 80065cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	bfc1      	itttt	gt
 80065d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065d8:	409f      	lslgt	r7, r3
 80065da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065e2:	bfd6      	itet	le
 80065e4:	f1c3 0320 	rsble	r3, r3, #32
 80065e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80065ec:	fa04 f003 	lslle.w	r0, r4, r3
 80065f0:	f7f9 ffa8 	bl	8000544 <__aeabi_ui2d>
 80065f4:	2201      	movs	r2, #1
 80065f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065fa:	3e01      	subs	r6, #1
 80065fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80065fe:	e777      	b.n	80064f0 <_dtoa_r+0x100>
 8006600:	2301      	movs	r3, #1
 8006602:	e7b8      	b.n	8006576 <_dtoa_r+0x186>
 8006604:	9012      	str	r0, [sp, #72]	@ 0x48
 8006606:	e7b7      	b.n	8006578 <_dtoa_r+0x188>
 8006608:	427b      	negs	r3, r7
 800660a:	930a      	str	r3, [sp, #40]	@ 0x28
 800660c:	2300      	movs	r3, #0
 800660e:	eba8 0807 	sub.w	r8, r8, r7
 8006612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006614:	e7c4      	b.n	80065a0 <_dtoa_r+0x1b0>
 8006616:	2300      	movs	r3, #0
 8006618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800661a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	dc35      	bgt.n	800668c <_dtoa_r+0x29c>
 8006620:	2301      	movs	r3, #1
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	9307      	str	r3, [sp, #28]
 8006626:	461a      	mov	r2, r3
 8006628:	920e      	str	r2, [sp, #56]	@ 0x38
 800662a:	e00b      	b.n	8006644 <_dtoa_r+0x254>
 800662c:	2301      	movs	r3, #1
 800662e:	e7f3      	b.n	8006618 <_dtoa_r+0x228>
 8006630:	2300      	movs	r3, #0
 8006632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	bfb8      	it	lt
 8006642:	2301      	movlt	r3, #1
 8006644:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006648:	2100      	movs	r1, #0
 800664a:	2204      	movs	r2, #4
 800664c:	f102 0514 	add.w	r5, r2, #20
 8006650:	429d      	cmp	r5, r3
 8006652:	d91f      	bls.n	8006694 <_dtoa_r+0x2a4>
 8006654:	6041      	str	r1, [r0, #4]
 8006656:	4658      	mov	r0, fp
 8006658:	f000 fd8e 	bl	8007178 <_Balloc>
 800665c:	4682      	mov	sl, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d13c      	bne.n	80066dc <_dtoa_r+0x2ec>
 8006662:	4b1b      	ldr	r3, [pc, #108]	@ (80066d0 <_dtoa_r+0x2e0>)
 8006664:	4602      	mov	r2, r0
 8006666:	f240 11af 	movw	r1, #431	@ 0x1af
 800666a:	e6d8      	b.n	800641e <_dtoa_r+0x2e>
 800666c:	2301      	movs	r3, #1
 800666e:	e7e0      	b.n	8006632 <_dtoa_r+0x242>
 8006670:	2401      	movs	r4, #1
 8006672:	2300      	movs	r3, #0
 8006674:	9309      	str	r3, [sp, #36]	@ 0x24
 8006676:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	2200      	movs	r2, #0
 8006682:	2312      	movs	r3, #18
 8006684:	e7d0      	b.n	8006628 <_dtoa_r+0x238>
 8006686:	2301      	movs	r3, #1
 8006688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800668a:	e7f5      	b.n	8006678 <_dtoa_r+0x288>
 800668c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	9307      	str	r3, [sp, #28]
 8006692:	e7d7      	b.n	8006644 <_dtoa_r+0x254>
 8006694:	3101      	adds	r1, #1
 8006696:	0052      	lsls	r2, r2, #1
 8006698:	e7d8      	b.n	800664c <_dtoa_r+0x25c>
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	636f4361 	.word	0x636f4361
 80066a4:	3fd287a7 	.word	0x3fd287a7
 80066a8:	8b60c8b3 	.word	0x8b60c8b3
 80066ac:	3fc68a28 	.word	0x3fc68a28
 80066b0:	509f79fb 	.word	0x509f79fb
 80066b4:	3fd34413 	.word	0x3fd34413
 80066b8:	08008459 	.word	0x08008459
 80066bc:	08008470 	.word	0x08008470
 80066c0:	7ff00000 	.word	0x7ff00000
 80066c4:	08008429 	.word	0x08008429
 80066c8:	3ff80000 	.word	0x3ff80000
 80066cc:	08008568 	.word	0x08008568
 80066d0:	080084c8 	.word	0x080084c8
 80066d4:	08008455 	.word	0x08008455
 80066d8:	08008428 	.word	0x08008428
 80066dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066e0:	6018      	str	r0, [r3, #0]
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	2b0e      	cmp	r3, #14
 80066e6:	f200 80a4 	bhi.w	8006832 <_dtoa_r+0x442>
 80066ea:	2c00      	cmp	r4, #0
 80066ec:	f000 80a1 	beq.w	8006832 <_dtoa_r+0x442>
 80066f0:	2f00      	cmp	r7, #0
 80066f2:	dd33      	ble.n	800675c <_dtoa_r+0x36c>
 80066f4:	4bad      	ldr	r3, [pc, #692]	@ (80069ac <_dtoa_r+0x5bc>)
 80066f6:	f007 020f 	and.w	r2, r7, #15
 80066fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066fe:	ed93 7b00 	vldr	d7, [r3]
 8006702:	05f8      	lsls	r0, r7, #23
 8006704:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800670c:	d516      	bpl.n	800673c <_dtoa_r+0x34c>
 800670e:	4ba8      	ldr	r3, [pc, #672]	@ (80069b0 <_dtoa_r+0x5c0>)
 8006710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006718:	f7fa f8b8 	bl	800088c <__aeabi_ddiv>
 800671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006720:	f004 040f 	and.w	r4, r4, #15
 8006724:	2603      	movs	r6, #3
 8006726:	4da2      	ldr	r5, [pc, #648]	@ (80069b0 <_dtoa_r+0x5c0>)
 8006728:	b954      	cbnz	r4, 8006740 <_dtoa_r+0x350>
 800672a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800672e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006732:	f7fa f8ab 	bl	800088c <__aeabi_ddiv>
 8006736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800673a:	e028      	b.n	800678e <_dtoa_r+0x39e>
 800673c:	2602      	movs	r6, #2
 800673e:	e7f2      	b.n	8006726 <_dtoa_r+0x336>
 8006740:	07e1      	lsls	r1, r4, #31
 8006742:	d508      	bpl.n	8006756 <_dtoa_r+0x366>
 8006744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800674c:	f7f9 ff74 	bl	8000638 <__aeabi_dmul>
 8006750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006754:	3601      	adds	r6, #1
 8006756:	1064      	asrs	r4, r4, #1
 8006758:	3508      	adds	r5, #8
 800675a:	e7e5      	b.n	8006728 <_dtoa_r+0x338>
 800675c:	f000 80d2 	beq.w	8006904 <_dtoa_r+0x514>
 8006760:	427c      	negs	r4, r7
 8006762:	4b92      	ldr	r3, [pc, #584]	@ (80069ac <_dtoa_r+0x5bc>)
 8006764:	4d92      	ldr	r5, [pc, #584]	@ (80069b0 <_dtoa_r+0x5c0>)
 8006766:	f004 020f 	and.w	r2, r4, #15
 800676a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006776:	f7f9 ff5f 	bl	8000638 <__aeabi_dmul>
 800677a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677e:	1124      	asrs	r4, r4, #4
 8006780:	2300      	movs	r3, #0
 8006782:	2602      	movs	r6, #2
 8006784:	2c00      	cmp	r4, #0
 8006786:	f040 80b2 	bne.w	80068ee <_dtoa_r+0x4fe>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1d3      	bne.n	8006736 <_dtoa_r+0x346>
 800678e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80b7 	beq.w	8006908 <_dtoa_r+0x518>
 800679a:	4b86      	ldr	r3, [pc, #536]	@ (80069b4 <_dtoa_r+0x5c4>)
 800679c:	2200      	movs	r2, #0
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f9bb 	bl	8000b1c <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f000 80ae 	beq.w	8006908 <_dtoa_r+0x518>
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80aa 	beq.w	8006908 <_dtoa_r+0x518>
 80067b4:	9b00      	ldr	r3, [sp, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dd37      	ble.n	800682a <_dtoa_r+0x43a>
 80067ba:	1e7b      	subs	r3, r7, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	4620      	mov	r0, r4
 80067c0:	4b7d      	ldr	r3, [pc, #500]	@ (80069b8 <_dtoa_r+0x5c8>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7f9 ff37 	bl	8000638 <__aeabi_dmul>
 80067ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ce:	9c00      	ldr	r4, [sp, #0]
 80067d0:	3601      	adds	r6, #1
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7f9 fec6 	bl	8000564 <__aeabi_i2d>
 80067d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067dc:	f7f9 ff2c 	bl	8000638 <__aeabi_dmul>
 80067e0:	4b76      	ldr	r3, [pc, #472]	@ (80069bc <_dtoa_r+0x5cc>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	f7f9 fd72 	bl	80002cc <__adddf3>
 80067e8:	4605      	mov	r5, r0
 80067ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	f040 808d 	bne.w	800690e <_dtoa_r+0x51e>
 80067f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f8:	4b71      	ldr	r3, [pc, #452]	@ (80069c0 <_dtoa_r+0x5d0>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	f7f9 fd64 	bl	80002c8 <__aeabi_dsub>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006808:	462a      	mov	r2, r5
 800680a:	4633      	mov	r3, r6
 800680c:	f7fa f9a4 	bl	8000b58 <__aeabi_dcmpgt>
 8006810:	2800      	cmp	r0, #0
 8006812:	f040 828b 	bne.w	8006d2c <_dtoa_r+0x93c>
 8006816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681a:	462a      	mov	r2, r5
 800681c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006820:	f7fa f97c 	bl	8000b1c <__aeabi_dcmplt>
 8006824:	2800      	cmp	r0, #0
 8006826:	f040 8128 	bne.w	8006a7a <_dtoa_r+0x68a>
 800682a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800682e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f2c0 815a 	blt.w	8006aee <_dtoa_r+0x6fe>
 800683a:	2f0e      	cmp	r7, #14
 800683c:	f300 8157 	bgt.w	8006aee <_dtoa_r+0x6fe>
 8006840:	4b5a      	ldr	r3, [pc, #360]	@ (80069ac <_dtoa_r+0x5bc>)
 8006842:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006846:	ed93 7b00 	vldr	d7, [r3]
 800684a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	ed8d 7b00 	vstr	d7, [sp]
 8006852:	da03      	bge.n	800685c <_dtoa_r+0x46c>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f340 8101 	ble.w	8006a5e <_dtoa_r+0x66e>
 800685c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006860:	4656      	mov	r6, sl
 8006862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7fa f80f 	bl	800088c <__aeabi_ddiv>
 800686e:	f7fa f993 	bl	8000b98 <__aeabi_d2iz>
 8006872:	4680      	mov	r8, r0
 8006874:	f7f9 fe76 	bl	8000564 <__aeabi_i2d>
 8006878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800687c:	f7f9 fedc 	bl	8000638 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800688c:	f7f9 fd1c 	bl	80002c8 <__aeabi_dsub>
 8006890:	f806 4b01 	strb.w	r4, [r6], #1
 8006894:	9d07      	ldr	r5, [sp, #28]
 8006896:	eba6 040a 	sub.w	r4, r6, sl
 800689a:	42a5      	cmp	r5, r4
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	f040 8117 	bne.w	8006ad2 <_dtoa_r+0x6e2>
 80068a4:	f7f9 fd12 	bl	80002cc <__adddf3>
 80068a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ac:	4604      	mov	r4, r0
 80068ae:	460d      	mov	r5, r1
 80068b0:	f7fa f952 	bl	8000b58 <__aeabi_dcmpgt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 80f9 	bne.w	8006aac <_dtoa_r+0x6bc>
 80068ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068be:	4620      	mov	r0, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7fa f921 	bl	8000b08 <__aeabi_dcmpeq>
 80068c6:	b118      	cbz	r0, 80068d0 <_dtoa_r+0x4e0>
 80068c8:	f018 0f01 	tst.w	r8, #1
 80068cc:	f040 80ee 	bne.w	8006aac <_dtoa_r+0x6bc>
 80068d0:	4649      	mov	r1, r9
 80068d2:	4658      	mov	r0, fp
 80068d4:	f000 fc90 	bl	80071f8 <_Bfree>
 80068d8:	2300      	movs	r3, #0
 80068da:	7033      	strb	r3, [r6, #0]
 80068dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068de:	3701      	adds	r7, #1
 80068e0:	601f      	str	r7, [r3, #0]
 80068e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 831d 	beq.w	8006f24 <_dtoa_r+0xb34>
 80068ea:	601e      	str	r6, [r3, #0]
 80068ec:	e31a      	b.n	8006f24 <_dtoa_r+0xb34>
 80068ee:	07e2      	lsls	r2, r4, #31
 80068f0:	d505      	bpl.n	80068fe <_dtoa_r+0x50e>
 80068f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068f6:	f7f9 fe9f 	bl	8000638 <__aeabi_dmul>
 80068fa:	3601      	adds	r6, #1
 80068fc:	2301      	movs	r3, #1
 80068fe:	1064      	asrs	r4, r4, #1
 8006900:	3508      	adds	r5, #8
 8006902:	e73f      	b.n	8006784 <_dtoa_r+0x394>
 8006904:	2602      	movs	r6, #2
 8006906:	e742      	b.n	800678e <_dtoa_r+0x39e>
 8006908:	9c07      	ldr	r4, [sp, #28]
 800690a:	9704      	str	r7, [sp, #16]
 800690c:	e761      	b.n	80067d2 <_dtoa_r+0x3e2>
 800690e:	4b27      	ldr	r3, [pc, #156]	@ (80069ac <_dtoa_r+0x5bc>)
 8006910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006916:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800691a:	4454      	add	r4, sl
 800691c:	2900      	cmp	r1, #0
 800691e:	d053      	beq.n	80069c8 <_dtoa_r+0x5d8>
 8006920:	4928      	ldr	r1, [pc, #160]	@ (80069c4 <_dtoa_r+0x5d4>)
 8006922:	2000      	movs	r0, #0
 8006924:	f7f9 ffb2 	bl	800088c <__aeabi_ddiv>
 8006928:	4633      	mov	r3, r6
 800692a:	462a      	mov	r2, r5
 800692c:	f7f9 fccc 	bl	80002c8 <__aeabi_dsub>
 8006930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006934:	4656      	mov	r6, sl
 8006936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693a:	f7fa f92d 	bl	8000b98 <__aeabi_d2iz>
 800693e:	4605      	mov	r5, r0
 8006940:	f7f9 fe10 	bl	8000564 <__aeabi_i2d>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800694c:	f7f9 fcbc 	bl	80002c8 <__aeabi_dsub>
 8006950:	3530      	adds	r5, #48	@ 0x30
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800695a:	f806 5b01 	strb.w	r5, [r6], #1
 800695e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006962:	f7fa f8db 	bl	8000b1c <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	d171      	bne.n	8006a4e <_dtoa_r+0x65e>
 800696a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800696e:	4911      	ldr	r1, [pc, #68]	@ (80069b4 <_dtoa_r+0x5c4>)
 8006970:	2000      	movs	r0, #0
 8006972:	f7f9 fca9 	bl	80002c8 <__aeabi_dsub>
 8006976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800697a:	f7fa f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	f040 8095 	bne.w	8006aae <_dtoa_r+0x6be>
 8006984:	42a6      	cmp	r6, r4
 8006986:	f43f af50 	beq.w	800682a <_dtoa_r+0x43a>
 800698a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800698e:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <_dtoa_r+0x5c8>)
 8006990:	2200      	movs	r2, #0
 8006992:	f7f9 fe51 	bl	8000638 <__aeabi_dmul>
 8006996:	4b08      	ldr	r3, [pc, #32]	@ (80069b8 <_dtoa_r+0x5c8>)
 8006998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800699c:	2200      	movs	r2, #0
 800699e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a2:	f7f9 fe49 	bl	8000638 <__aeabi_dmul>
 80069a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069aa:	e7c4      	b.n	8006936 <_dtoa_r+0x546>
 80069ac:	08008568 	.word	0x08008568
 80069b0:	08008540 	.word	0x08008540
 80069b4:	3ff00000 	.word	0x3ff00000
 80069b8:	40240000 	.word	0x40240000
 80069bc:	401c0000 	.word	0x401c0000
 80069c0:	40140000 	.word	0x40140000
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	f7f9 fe34 	bl	8000638 <__aeabi_dmul>
 80069d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80069d6:	4656      	mov	r6, sl
 80069d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069dc:	f7fa f8dc 	bl	8000b98 <__aeabi_d2iz>
 80069e0:	4605      	mov	r5, r0
 80069e2:	f7f9 fdbf 	bl	8000564 <__aeabi_i2d>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ee:	f7f9 fc6b 	bl	80002c8 <__aeabi_dsub>
 80069f2:	3530      	adds	r5, #48	@ 0x30
 80069f4:	f806 5b01 	strb.w	r5, [r6], #1
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	42a6      	cmp	r6, r4
 80069fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	d124      	bne.n	8006a52 <_dtoa_r+0x662>
 8006a08:	4bac      	ldr	r3, [pc, #688]	@ (8006cbc <_dtoa_r+0x8cc>)
 8006a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a0e:	f7f9 fc5d 	bl	80002cc <__adddf3>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1a:	f7fa f89d 	bl	8000b58 <__aeabi_dcmpgt>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d145      	bne.n	8006aae <_dtoa_r+0x6be>
 8006a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a26:	49a5      	ldr	r1, [pc, #660]	@ (8006cbc <_dtoa_r+0x8cc>)
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f7f9 fc4d 	bl	80002c8 <__aeabi_dsub>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a36:	f7fa f871 	bl	8000b1c <__aeabi_dcmplt>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f43f aef5 	beq.w	800682a <_dtoa_r+0x43a>
 8006a40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a42:	1e73      	subs	r3, r6, #1
 8006a44:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a4a:	2b30      	cmp	r3, #48	@ 0x30
 8006a4c:	d0f8      	beq.n	8006a40 <_dtoa_r+0x650>
 8006a4e:	9f04      	ldr	r7, [sp, #16]
 8006a50:	e73e      	b.n	80068d0 <_dtoa_r+0x4e0>
 8006a52:	4b9b      	ldr	r3, [pc, #620]	@ (8006cc0 <_dtoa_r+0x8d0>)
 8006a54:	f7f9 fdf0 	bl	8000638 <__aeabi_dmul>
 8006a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a5c:	e7bc      	b.n	80069d8 <_dtoa_r+0x5e8>
 8006a5e:	d10c      	bne.n	8006a7a <_dtoa_r+0x68a>
 8006a60:	4b98      	ldr	r3, [pc, #608]	@ (8006cc4 <_dtoa_r+0x8d4>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a68:	f7f9 fde6 	bl	8000638 <__aeabi_dmul>
 8006a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a70:	f7fa f868 	bl	8000b44 <__aeabi_dcmpge>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f000 8157 	beq.w	8006d28 <_dtoa_r+0x938>
 8006a7a:	2400      	movs	r4, #0
 8006a7c:	4625      	mov	r5, r4
 8006a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a80:	43db      	mvns	r3, r3
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	4656      	mov	r6, sl
 8006a86:	2700      	movs	r7, #0
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	f000 fbb4 	bl	80071f8 <_Bfree>
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	d0dc      	beq.n	8006a4e <_dtoa_r+0x65e>
 8006a94:	b12f      	cbz	r7, 8006aa2 <_dtoa_r+0x6b2>
 8006a96:	42af      	cmp	r7, r5
 8006a98:	d003      	beq.n	8006aa2 <_dtoa_r+0x6b2>
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	4658      	mov	r0, fp
 8006a9e:	f000 fbab 	bl	80071f8 <_Bfree>
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4658      	mov	r0, fp
 8006aa6:	f000 fba7 	bl	80071f8 <_Bfree>
 8006aaa:	e7d0      	b.n	8006a4e <_dtoa_r+0x65e>
 8006aac:	9704      	str	r7, [sp, #16]
 8006aae:	4633      	mov	r3, r6
 8006ab0:	461e      	mov	r6, r3
 8006ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ab6:	2a39      	cmp	r2, #57	@ 0x39
 8006ab8:	d107      	bne.n	8006aca <_dtoa_r+0x6da>
 8006aba:	459a      	cmp	sl, r3
 8006abc:	d1f8      	bne.n	8006ab0 <_dtoa_r+0x6c0>
 8006abe:	9a04      	ldr	r2, [sp, #16]
 8006ac0:	3201      	adds	r2, #1
 8006ac2:	9204      	str	r2, [sp, #16]
 8006ac4:	2230      	movs	r2, #48	@ 0x30
 8006ac6:	f88a 2000 	strb.w	r2, [sl]
 8006aca:	781a      	ldrb	r2, [r3, #0]
 8006acc:	3201      	adds	r2, #1
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e7bd      	b.n	8006a4e <_dtoa_r+0x65e>
 8006ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc0 <_dtoa_r+0x8d0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f7f9 fdaf 	bl	8000638 <__aeabi_dmul>
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	f7fa f811 	bl	8000b08 <__aeabi_dcmpeq>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f43f aebb 	beq.w	8006862 <_dtoa_r+0x472>
 8006aec:	e6f0      	b.n	80068d0 <_dtoa_r+0x4e0>
 8006aee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	f000 80db 	beq.w	8006cac <_dtoa_r+0x8bc>
 8006af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006af8:	2a01      	cmp	r2, #1
 8006afa:	f300 80bf 	bgt.w	8006c7c <_dtoa_r+0x88c>
 8006afe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	f000 80b7 	beq.w	8006c74 <_dtoa_r+0x884>
 8006b06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b0c:	4646      	mov	r6, r8
 8006b0e:	9a08      	ldr	r2, [sp, #32]
 8006b10:	2101      	movs	r1, #1
 8006b12:	441a      	add	r2, r3
 8006b14:	4658      	mov	r0, fp
 8006b16:	4498      	add	r8, r3
 8006b18:	9208      	str	r2, [sp, #32]
 8006b1a:	f000 fc21 	bl	8007360 <__i2b>
 8006b1e:	4605      	mov	r5, r0
 8006b20:	b15e      	cbz	r6, 8006b3a <_dtoa_r+0x74a>
 8006b22:	9b08      	ldr	r3, [sp, #32]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dd08      	ble.n	8006b3a <_dtoa_r+0x74a>
 8006b28:	42b3      	cmp	r3, r6
 8006b2a:	9a08      	ldr	r2, [sp, #32]
 8006b2c:	bfa8      	it	ge
 8006b2e:	4633      	movge	r3, r6
 8006b30:	eba8 0803 	sub.w	r8, r8, r3
 8006b34:	1af6      	subs	r6, r6, r3
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	9308      	str	r3, [sp, #32]
 8006b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b3c:	b1f3      	cbz	r3, 8006b7c <_dtoa_r+0x78c>
 8006b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80b7 	beq.w	8006cb4 <_dtoa_r+0x8c4>
 8006b46:	b18c      	cbz	r4, 8006b6c <_dtoa_r+0x77c>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f000 fcc7 	bl	80074e0 <__pow5mult>
 8006b52:	464a      	mov	r2, r9
 8006b54:	4601      	mov	r1, r0
 8006b56:	4605      	mov	r5, r0
 8006b58:	4658      	mov	r0, fp
 8006b5a:	f000 fc17 	bl	800738c <__multiply>
 8006b5e:	4649      	mov	r1, r9
 8006b60:	9004      	str	r0, [sp, #16]
 8006b62:	4658      	mov	r0, fp
 8006b64:	f000 fb48 	bl	80071f8 <_Bfree>
 8006b68:	9b04      	ldr	r3, [sp, #16]
 8006b6a:	4699      	mov	r9, r3
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b6e:	1b1a      	subs	r2, r3, r4
 8006b70:	d004      	beq.n	8006b7c <_dtoa_r+0x78c>
 8006b72:	4649      	mov	r1, r9
 8006b74:	4658      	mov	r0, fp
 8006b76:	f000 fcb3 	bl	80074e0 <__pow5mult>
 8006b7a:	4681      	mov	r9, r0
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	4658      	mov	r0, fp
 8006b80:	f000 fbee 	bl	8007360 <__i2b>
 8006b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b86:	4604      	mov	r4, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 81cf 	beq.w	8006f2c <_dtoa_r+0xb3c>
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4601      	mov	r1, r0
 8006b92:	4658      	mov	r0, fp
 8006b94:	f000 fca4 	bl	80074e0 <__pow5mult>
 8006b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	f300 8095 	bgt.w	8006ccc <_dtoa_r+0x8dc>
 8006ba2:	9b02      	ldr	r3, [sp, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8087 	bne.w	8006cb8 <_dtoa_r+0x8c8>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 8089 	bne.w	8006cc8 <_dtoa_r+0x8d8>
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bbc:	0d1b      	lsrs	r3, r3, #20
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	b12b      	cbz	r3, 8006bce <_dtoa_r+0x7de>
 8006bc2:	9b08      	ldr	r3, [sp, #32]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	9308      	str	r3, [sp, #32]
 8006bc8:	f108 0801 	add.w	r8, r8, #1
 8006bcc:	2301      	movs	r3, #1
 8006bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 81b0 	beq.w	8006f38 <_dtoa_r+0xb48>
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bde:	6918      	ldr	r0, [r3, #16]
 8006be0:	f000 fb72 	bl	80072c8 <__hi0bits>
 8006be4:	f1c0 0020 	rsb	r0, r0, #32
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	4418      	add	r0, r3
 8006bec:	f010 001f 	ands.w	r0, r0, #31
 8006bf0:	d077      	beq.n	8006ce2 <_dtoa_r+0x8f2>
 8006bf2:	f1c0 0320 	rsb	r3, r0, #32
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	dd6b      	ble.n	8006cd2 <_dtoa_r+0x8e2>
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	f1c0 001c 	rsb	r0, r0, #28
 8006c00:	4403      	add	r3, r0
 8006c02:	4480      	add	r8, r0
 8006c04:	4406      	add	r6, r0
 8006c06:	9308      	str	r3, [sp, #32]
 8006c08:	f1b8 0f00 	cmp.w	r8, #0
 8006c0c:	dd05      	ble.n	8006c1a <_dtoa_r+0x82a>
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4642      	mov	r2, r8
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fcbe 	bl	8007594 <__lshift>
 8006c18:	4681      	mov	r9, r0
 8006c1a:	9b08      	ldr	r3, [sp, #32]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dd05      	ble.n	8006c2c <_dtoa_r+0x83c>
 8006c20:	4621      	mov	r1, r4
 8006c22:	461a      	mov	r2, r3
 8006c24:	4658      	mov	r0, fp
 8006c26:	f000 fcb5 	bl	8007594 <__lshift>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d059      	beq.n	8006ce6 <_dtoa_r+0x8f6>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4648      	mov	r0, r9
 8006c36:	f000 fd19 	bl	800766c <__mcmp>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	da53      	bge.n	8006ce6 <_dtoa_r+0x8f6>
 8006c3e:	1e7b      	subs	r3, r7, #1
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	4649      	mov	r1, r9
 8006c44:	2300      	movs	r3, #0
 8006c46:	220a      	movs	r2, #10
 8006c48:	4658      	mov	r0, fp
 8006c4a:	f000 faf7 	bl	800723c <__multadd>
 8006c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c50:	4681      	mov	r9, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8172 	beq.w	8006f3c <_dtoa_r+0xb4c>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	220a      	movs	r2, #10
 8006c5e:	4658      	mov	r0, fp
 8006c60:	f000 faec 	bl	800723c <__multadd>
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	4605      	mov	r5, r0
 8006c6a:	dc67      	bgt.n	8006d3c <_dtoa_r+0x94c>
 8006c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	dc41      	bgt.n	8006cf6 <_dtoa_r+0x906>
 8006c72:	e063      	b.n	8006d3c <_dtoa_r+0x94c>
 8006c74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c7a:	e746      	b.n	8006b0a <_dtoa_r+0x71a>
 8006c7c:	9b07      	ldr	r3, [sp, #28]
 8006c7e:	1e5c      	subs	r4, r3, #1
 8006c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	bfbf      	itttt	lt
 8006c86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c8c:	1ae3      	sublt	r3, r4, r3
 8006c8e:	bfb4      	ite	lt
 8006c90:	18d2      	addlt	r2, r2, r3
 8006c92:	1b1c      	subge	r4, r3, r4
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	bfbc      	itt	lt
 8006c98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c9a:	2400      	movlt	r4, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bfb5      	itete	lt
 8006ca0:	eba8 0603 	sublt.w	r6, r8, r3
 8006ca4:	9b07      	ldrge	r3, [sp, #28]
 8006ca6:	2300      	movlt	r3, #0
 8006ca8:	4646      	movge	r6, r8
 8006caa:	e730      	b.n	8006b0e <_dtoa_r+0x71e>
 8006cac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006cae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006cb0:	4646      	mov	r6, r8
 8006cb2:	e735      	b.n	8006b20 <_dtoa_r+0x730>
 8006cb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cb6:	e75c      	b.n	8006b72 <_dtoa_r+0x782>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e788      	b.n	8006bce <_dtoa_r+0x7de>
 8006cbc:	3fe00000 	.word	0x3fe00000
 8006cc0:	40240000 	.word	0x40240000
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	e780      	b.n	8006bce <_dtoa_r+0x7de>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd0:	e782      	b.n	8006bd8 <_dtoa_r+0x7e8>
 8006cd2:	d099      	beq.n	8006c08 <_dtoa_r+0x818>
 8006cd4:	9a08      	ldr	r2, [sp, #32]
 8006cd6:	331c      	adds	r3, #28
 8006cd8:	441a      	add	r2, r3
 8006cda:	4498      	add	r8, r3
 8006cdc:	441e      	add	r6, r3
 8006cde:	9208      	str	r2, [sp, #32]
 8006ce0:	e792      	b.n	8006c08 <_dtoa_r+0x818>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	e7f6      	b.n	8006cd4 <_dtoa_r+0x8e4>
 8006ce6:	9b07      	ldr	r3, [sp, #28]
 8006ce8:	9704      	str	r7, [sp, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc20      	bgt.n	8006d30 <_dtoa_r+0x940>
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	dd1e      	ble.n	8006d34 <_dtoa_r+0x944>
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f aec0 	bne.w	8006a7e <_dtoa_r+0x68e>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	2205      	movs	r2, #5
 8006d02:	4658      	mov	r0, fp
 8006d04:	f000 fa9a 	bl	800723c <__multadd>
 8006d08:	4601      	mov	r1, r0
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	f000 fcad 	bl	800766c <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f77f aeb3 	ble.w	8006a7e <_dtoa_r+0x68e>
 8006d18:	4656      	mov	r6, sl
 8006d1a:	2331      	movs	r3, #49	@ 0x31
 8006d1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d20:	9b04      	ldr	r3, [sp, #16]
 8006d22:	3301      	adds	r3, #1
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	e6ae      	b.n	8006a86 <_dtoa_r+0x696>
 8006d28:	9c07      	ldr	r4, [sp, #28]
 8006d2a:	9704      	str	r7, [sp, #16]
 8006d2c:	4625      	mov	r5, r4
 8006d2e:	e7f3      	b.n	8006d18 <_dtoa_r+0x928>
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8104 	beq.w	8006f44 <_dtoa_r+0xb54>
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	dd05      	ble.n	8006d4c <_dtoa_r+0x95c>
 8006d40:	4629      	mov	r1, r5
 8006d42:	4632      	mov	r2, r6
 8006d44:	4658      	mov	r0, fp
 8006d46:	f000 fc25 	bl	8007594 <__lshift>
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d05a      	beq.n	8006e08 <_dtoa_r+0xa18>
 8006d52:	6869      	ldr	r1, [r5, #4]
 8006d54:	4658      	mov	r0, fp
 8006d56:	f000 fa0f 	bl	8007178 <_Balloc>
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	b928      	cbnz	r0, 8006d6a <_dtoa_r+0x97a>
 8006d5e:	4b84      	ldr	r3, [pc, #528]	@ (8006f70 <_dtoa_r+0xb80>)
 8006d60:	4602      	mov	r2, r0
 8006d62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d66:	f7ff bb5a 	b.w	800641e <_dtoa_r+0x2e>
 8006d6a:	692a      	ldr	r2, [r5, #16]
 8006d6c:	3202      	adds	r2, #2
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	f105 010c 	add.w	r1, r5, #12
 8006d74:	300c      	adds	r0, #12
 8006d76:	f000 ffaf 	bl	8007cd8 <memcpy>
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4658      	mov	r0, fp
 8006d80:	f000 fc08 	bl	8007594 <__lshift>
 8006d84:	f10a 0301 	add.w	r3, sl, #1
 8006d88:	9307      	str	r3, [sp, #28]
 8006d8a:	9b00      	ldr	r3, [sp, #0]
 8006d8c:	4453      	add	r3, sl
 8006d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d90:	9b02      	ldr	r3, [sp, #8]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	462f      	mov	r7, r5
 8006d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	4621      	mov	r1, r4
 8006da0:	3b01      	subs	r3, #1
 8006da2:	4648      	mov	r0, r9
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	f7ff fa98 	bl	80062da <quorem>
 8006daa:	4639      	mov	r1, r7
 8006dac:	9002      	str	r0, [sp, #8]
 8006dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006db2:	4648      	mov	r0, r9
 8006db4:	f000 fc5a 	bl	800766c <__mcmp>
 8006db8:	462a      	mov	r2, r5
 8006dba:	9008      	str	r0, [sp, #32]
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4658      	mov	r0, fp
 8006dc0:	f000 fc70 	bl	80076a4 <__mdiff>
 8006dc4:	68c2      	ldr	r2, [r0, #12]
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	bb02      	cbnz	r2, 8006e0c <_dtoa_r+0xa1c>
 8006dca:	4601      	mov	r1, r0
 8006dcc:	4648      	mov	r0, r9
 8006dce:	f000 fc4d 	bl	800766c <__mcmp>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4658      	mov	r0, fp
 8006dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dda:	f000 fa0d 	bl	80071f8 <_Bfree>
 8006dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006de2:	9e07      	ldr	r6, [sp, #28]
 8006de4:	ea43 0102 	orr.w	r1, r3, r2
 8006de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dea:	4319      	orrs	r1, r3
 8006dec:	d110      	bne.n	8006e10 <_dtoa_r+0xa20>
 8006dee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006df2:	d029      	beq.n	8006e48 <_dtoa_r+0xa58>
 8006df4:	9b08      	ldr	r3, [sp, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dd02      	ble.n	8006e00 <_dtoa_r+0xa10>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	f883 8000 	strb.w	r8, [r3]
 8006e06:	e63f      	b.n	8006a88 <_dtoa_r+0x698>
 8006e08:	4628      	mov	r0, r5
 8006e0a:	e7bb      	b.n	8006d84 <_dtoa_r+0x994>
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	e7e1      	b.n	8006dd4 <_dtoa_r+0x9e4>
 8006e10:	9b08      	ldr	r3, [sp, #32]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db04      	blt.n	8006e20 <_dtoa_r+0xa30>
 8006e16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	d120      	bne.n	8006e62 <_dtoa_r+0xa72>
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	dded      	ble.n	8006e00 <_dtoa_r+0xa10>
 8006e24:	4649      	mov	r1, r9
 8006e26:	2201      	movs	r2, #1
 8006e28:	4658      	mov	r0, fp
 8006e2a:	f000 fbb3 	bl	8007594 <__lshift>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4681      	mov	r9, r0
 8006e32:	f000 fc1b 	bl	800766c <__mcmp>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	dc03      	bgt.n	8006e42 <_dtoa_r+0xa52>
 8006e3a:	d1e1      	bne.n	8006e00 <_dtoa_r+0xa10>
 8006e3c:	f018 0f01 	tst.w	r8, #1
 8006e40:	d0de      	beq.n	8006e00 <_dtoa_r+0xa10>
 8006e42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e46:	d1d8      	bne.n	8006dfa <_dtoa_r+0xa0a>
 8006e48:	9a00      	ldr	r2, [sp, #0]
 8006e4a:	2339      	movs	r3, #57	@ 0x39
 8006e4c:	7013      	strb	r3, [r2, #0]
 8006e4e:	4633      	mov	r3, r6
 8006e50:	461e      	mov	r6, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e58:	2a39      	cmp	r2, #57	@ 0x39
 8006e5a:	d052      	beq.n	8006f02 <_dtoa_r+0xb12>
 8006e5c:	3201      	adds	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	e612      	b.n	8006a88 <_dtoa_r+0x698>
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	dd07      	ble.n	8006e76 <_dtoa_r+0xa86>
 8006e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e6a:	d0ed      	beq.n	8006e48 <_dtoa_r+0xa58>
 8006e6c:	9a00      	ldr	r2, [sp, #0]
 8006e6e:	f108 0301 	add.w	r3, r8, #1
 8006e72:	7013      	strb	r3, [r2, #0]
 8006e74:	e608      	b.n	8006a88 <_dtoa_r+0x698>
 8006e76:	9b07      	ldr	r3, [sp, #28]
 8006e78:	9a07      	ldr	r2, [sp, #28]
 8006e7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d028      	beq.n	8006ed6 <_dtoa_r+0xae6>
 8006e84:	4649      	mov	r1, r9
 8006e86:	2300      	movs	r3, #0
 8006e88:	220a      	movs	r2, #10
 8006e8a:	4658      	mov	r0, fp
 8006e8c:	f000 f9d6 	bl	800723c <__multadd>
 8006e90:	42af      	cmp	r7, r5
 8006e92:	4681      	mov	r9, r0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	f04f 020a 	mov.w	r2, #10
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	d107      	bne.n	8006eb2 <_dtoa_r+0xac2>
 8006ea2:	f000 f9cb 	bl	800723c <__multadd>
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	9b07      	ldr	r3, [sp, #28]
 8006eac:	3301      	adds	r3, #1
 8006eae:	9307      	str	r3, [sp, #28]
 8006eb0:	e774      	b.n	8006d9c <_dtoa_r+0x9ac>
 8006eb2:	f000 f9c3 	bl	800723c <__multadd>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4607      	mov	r7, r0
 8006eba:	2300      	movs	r3, #0
 8006ebc:	220a      	movs	r2, #10
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 f9bc 	bl	800723c <__multadd>
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	e7f0      	b.n	8006eaa <_dtoa_r+0xaba>
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfcc      	ite	gt
 8006ece:	461e      	movgt	r6, r3
 8006ed0:	2601      	movle	r6, #1
 8006ed2:	4456      	add	r6, sl
 8006ed4:	2700      	movs	r7, #0
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4658      	mov	r0, fp
 8006edc:	f000 fb5a 	bl	8007594 <__lshift>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4681      	mov	r9, r0
 8006ee4:	f000 fbc2 	bl	800766c <__mcmp>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	dcb0      	bgt.n	8006e4e <_dtoa_r+0xa5e>
 8006eec:	d102      	bne.n	8006ef4 <_dtoa_r+0xb04>
 8006eee:	f018 0f01 	tst.w	r8, #1
 8006ef2:	d1ac      	bne.n	8006e4e <_dtoa_r+0xa5e>
 8006ef4:	4633      	mov	r3, r6
 8006ef6:	461e      	mov	r6, r3
 8006ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006efc:	2a30      	cmp	r2, #48	@ 0x30
 8006efe:	d0fa      	beq.n	8006ef6 <_dtoa_r+0xb06>
 8006f00:	e5c2      	b.n	8006a88 <_dtoa_r+0x698>
 8006f02:	459a      	cmp	sl, r3
 8006f04:	d1a4      	bne.n	8006e50 <_dtoa_r+0xa60>
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	2331      	movs	r3, #49	@ 0x31
 8006f0e:	f88a 3000 	strb.w	r3, [sl]
 8006f12:	e5b9      	b.n	8006a88 <_dtoa_r+0x698>
 8006f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f74 <_dtoa_r+0xb84>
 8006f1a:	b11b      	cbz	r3, 8006f24 <_dtoa_r+0xb34>
 8006f1c:	f10a 0308 	add.w	r3, sl, #8
 8006f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4650      	mov	r0, sl
 8006f26:	b019      	add	sp, #100	@ 0x64
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	f77f ae37 	ble.w	8006ba2 <_dtoa_r+0x7b2>
 8006f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f38:	2001      	movs	r0, #1
 8006f3a:	e655      	b.n	8006be8 <_dtoa_r+0x7f8>
 8006f3c:	9b00      	ldr	r3, [sp, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f77f aed6 	ble.w	8006cf0 <_dtoa_r+0x900>
 8006f44:	4656      	mov	r6, sl
 8006f46:	4621      	mov	r1, r4
 8006f48:	4648      	mov	r0, r9
 8006f4a:	f7ff f9c6 	bl	80062da <quorem>
 8006f4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f52:	f806 8b01 	strb.w	r8, [r6], #1
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	eba6 020a 	sub.w	r2, r6, sl
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	ddb3      	ble.n	8006ec8 <_dtoa_r+0xad8>
 8006f60:	4649      	mov	r1, r9
 8006f62:	2300      	movs	r3, #0
 8006f64:	220a      	movs	r2, #10
 8006f66:	4658      	mov	r0, fp
 8006f68:	f000 f968 	bl	800723c <__multadd>
 8006f6c:	4681      	mov	r9, r0
 8006f6e:	e7ea      	b.n	8006f46 <_dtoa_r+0xb56>
 8006f70:	080084c8 	.word	0x080084c8
 8006f74:	0800844c 	.word	0x0800844c

08006f78 <_free_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d041      	beq.n	8007004 <_free_r+0x8c>
 8006f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f84:	1f0c      	subs	r4, r1, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfb8      	it	lt
 8006f8a:	18e4      	addlt	r4, r4, r3
 8006f8c:	f000 f8e8 	bl	8007160 <__malloc_lock>
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <_free_r+0x90>)
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	b933      	cbnz	r3, 8006fa4 <_free_r+0x2c>
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	6014      	str	r4, [r2, #0]
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa0:	f000 b8e4 	b.w	800716c <__malloc_unlock>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d908      	bls.n	8006fba <_free_r+0x42>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	1821      	adds	r1, r4, r0
 8006fac:	428b      	cmp	r3, r1
 8006fae:	bf01      	itttt	eq
 8006fb0:	6819      	ldreq	r1, [r3, #0]
 8006fb2:	685b      	ldreq	r3, [r3, #4]
 8006fb4:	1809      	addeq	r1, r1, r0
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	e7ed      	b.n	8006f96 <_free_r+0x1e>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x4c>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x42>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1850      	adds	r0, r2, r1
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x6c>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	4401      	add	r1, r0
 8006fd0:	1850      	adds	r0, r2, r1
 8006fd2:	4283      	cmp	r3, r0
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1e0      	bne.n	8006f9a <_free_r+0x22>
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	4408      	add	r0, r1
 8006fe0:	6010      	str	r0, [r2, #0]
 8006fe2:	e7da      	b.n	8006f9a <_free_r+0x22>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x74>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	e7d6      	b.n	8006f9a <_free_r+0x22>
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	1821      	adds	r1, r4, r0
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1809      	addeq	r1, r1, r0
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7ca      	b.n	8006f9a <_free_r+0x22>
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	20000508 	.word	0x20000508

0800700c <malloc>:
 800700c:	4b02      	ldr	r3, [pc, #8]	@ (8007018 <malloc+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f000 b825 	b.w	8007060 <_malloc_r>
 8007016:	bf00      	nop
 8007018:	20000040 	.word	0x20000040

0800701c <sbrk_aligned>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4e0f      	ldr	r6, [pc, #60]	@ (800705c <sbrk_aligned+0x40>)
 8007020:	460c      	mov	r4, r1
 8007022:	6831      	ldr	r1, [r6, #0]
 8007024:	4605      	mov	r5, r0
 8007026:	b911      	cbnz	r1, 800702e <sbrk_aligned+0x12>
 8007028:	f000 fe46 	bl	8007cb8 <_sbrk_r>
 800702c:	6030      	str	r0, [r6, #0]
 800702e:	4621      	mov	r1, r4
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fe41 	bl	8007cb8 <_sbrk_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d103      	bne.n	8007042 <sbrk_aligned+0x26>
 800703a:	f04f 34ff 	mov.w	r4, #4294967295
 800703e:	4620      	mov	r0, r4
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	1cc4      	adds	r4, r0, #3
 8007044:	f024 0403 	bic.w	r4, r4, #3
 8007048:	42a0      	cmp	r0, r4
 800704a:	d0f8      	beq.n	800703e <sbrk_aligned+0x22>
 800704c:	1a21      	subs	r1, r4, r0
 800704e:	4628      	mov	r0, r5
 8007050:	f000 fe32 	bl	8007cb8 <_sbrk_r>
 8007054:	3001      	adds	r0, #1
 8007056:	d1f2      	bne.n	800703e <sbrk_aligned+0x22>
 8007058:	e7ef      	b.n	800703a <sbrk_aligned+0x1e>
 800705a:	bf00      	nop
 800705c:	20000504 	.word	0x20000504

08007060 <_malloc_r>:
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	1ccd      	adds	r5, r1, #3
 8007066:	f025 0503 	bic.w	r5, r5, #3
 800706a:	3508      	adds	r5, #8
 800706c:	2d0c      	cmp	r5, #12
 800706e:	bf38      	it	cc
 8007070:	250c      	movcc	r5, #12
 8007072:	2d00      	cmp	r5, #0
 8007074:	4606      	mov	r6, r0
 8007076:	db01      	blt.n	800707c <_malloc_r+0x1c>
 8007078:	42a9      	cmp	r1, r5
 800707a:	d904      	bls.n	8007086 <_malloc_r+0x26>
 800707c:	230c      	movs	r3, #12
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	2000      	movs	r0, #0
 8007082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800715c <_malloc_r+0xfc>
 800708a:	f000 f869 	bl	8007160 <__malloc_lock>
 800708e:	f8d8 3000 	ldr.w	r3, [r8]
 8007092:	461c      	mov	r4, r3
 8007094:	bb44      	cbnz	r4, 80070e8 <_malloc_r+0x88>
 8007096:	4629      	mov	r1, r5
 8007098:	4630      	mov	r0, r6
 800709a:	f7ff ffbf 	bl	800701c <sbrk_aligned>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	4604      	mov	r4, r0
 80070a2:	d158      	bne.n	8007156 <_malloc_r+0xf6>
 80070a4:	f8d8 4000 	ldr.w	r4, [r8]
 80070a8:	4627      	mov	r7, r4
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	d143      	bne.n	8007136 <_malloc_r+0xd6>
 80070ae:	2c00      	cmp	r4, #0
 80070b0:	d04b      	beq.n	800714a <_malloc_r+0xea>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	4639      	mov	r1, r7
 80070b6:	4630      	mov	r0, r6
 80070b8:	eb04 0903 	add.w	r9, r4, r3
 80070bc:	f000 fdfc 	bl	8007cb8 <_sbrk_r>
 80070c0:	4581      	cmp	r9, r0
 80070c2:	d142      	bne.n	800714a <_malloc_r+0xea>
 80070c4:	6821      	ldr	r1, [r4, #0]
 80070c6:	1a6d      	subs	r5, r5, r1
 80070c8:	4629      	mov	r1, r5
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ffa6 	bl	800701c <sbrk_aligned>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d03a      	beq.n	800714a <_malloc_r+0xea>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	442b      	add	r3, r5
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	f8d8 3000 	ldr.w	r3, [r8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	bb62      	cbnz	r2, 800713c <_malloc_r+0xdc>
 80070e2:	f8c8 7000 	str.w	r7, [r8]
 80070e6:	e00f      	b.n	8007108 <_malloc_r+0xa8>
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	1b52      	subs	r2, r2, r5
 80070ec:	d420      	bmi.n	8007130 <_malloc_r+0xd0>
 80070ee:	2a0b      	cmp	r2, #11
 80070f0:	d917      	bls.n	8007122 <_malloc_r+0xc2>
 80070f2:	1961      	adds	r1, r4, r5
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	6025      	str	r5, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	6059      	strne	r1, [r3, #4]
 80070fc:	6863      	ldr	r3, [r4, #4]
 80070fe:	bf08      	it	eq
 8007100:	f8c8 1000 	streq.w	r1, [r8]
 8007104:	5162      	str	r2, [r4, r5]
 8007106:	604b      	str	r3, [r1, #4]
 8007108:	4630      	mov	r0, r6
 800710a:	f000 f82f 	bl	800716c <__malloc_unlock>
 800710e:	f104 000b 	add.w	r0, r4, #11
 8007112:	1d23      	adds	r3, r4, #4
 8007114:	f020 0007 	bic.w	r0, r0, #7
 8007118:	1ac2      	subs	r2, r0, r3
 800711a:	bf1c      	itt	ne
 800711c:	1a1b      	subne	r3, r3, r0
 800711e:	50a3      	strne	r3, [r4, r2]
 8007120:	e7af      	b.n	8007082 <_malloc_r+0x22>
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	42a3      	cmp	r3, r4
 8007126:	bf0c      	ite	eq
 8007128:	f8c8 2000 	streq.w	r2, [r8]
 800712c:	605a      	strne	r2, [r3, #4]
 800712e:	e7eb      	b.n	8007108 <_malloc_r+0xa8>
 8007130:	4623      	mov	r3, r4
 8007132:	6864      	ldr	r4, [r4, #4]
 8007134:	e7ae      	b.n	8007094 <_malloc_r+0x34>
 8007136:	463c      	mov	r4, r7
 8007138:	687f      	ldr	r7, [r7, #4]
 800713a:	e7b6      	b.n	80070aa <_malloc_r+0x4a>
 800713c:	461a      	mov	r2, r3
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	42a3      	cmp	r3, r4
 8007142:	d1fb      	bne.n	800713c <_malloc_r+0xdc>
 8007144:	2300      	movs	r3, #0
 8007146:	6053      	str	r3, [r2, #4]
 8007148:	e7de      	b.n	8007108 <_malloc_r+0xa8>
 800714a:	230c      	movs	r3, #12
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	4630      	mov	r0, r6
 8007150:	f000 f80c 	bl	800716c <__malloc_unlock>
 8007154:	e794      	b.n	8007080 <_malloc_r+0x20>
 8007156:	6005      	str	r5, [r0, #0]
 8007158:	e7d6      	b.n	8007108 <_malloc_r+0xa8>
 800715a:	bf00      	nop
 800715c:	20000508 	.word	0x20000508

08007160 <__malloc_lock>:
 8007160:	4801      	ldr	r0, [pc, #4]	@ (8007168 <__malloc_lock+0x8>)
 8007162:	f7ff b8b8 	b.w	80062d6 <__retarget_lock_acquire_recursive>
 8007166:	bf00      	nop
 8007168:	20000500 	.word	0x20000500

0800716c <__malloc_unlock>:
 800716c:	4801      	ldr	r0, [pc, #4]	@ (8007174 <__malloc_unlock+0x8>)
 800716e:	f7ff b8b3 	b.w	80062d8 <__retarget_lock_release_recursive>
 8007172:	bf00      	nop
 8007174:	20000500 	.word	0x20000500

08007178 <_Balloc>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	69c6      	ldr	r6, [r0, #28]
 800717c:	4604      	mov	r4, r0
 800717e:	460d      	mov	r5, r1
 8007180:	b976      	cbnz	r6, 80071a0 <_Balloc+0x28>
 8007182:	2010      	movs	r0, #16
 8007184:	f7ff ff42 	bl	800700c <malloc>
 8007188:	4602      	mov	r2, r0
 800718a:	61e0      	str	r0, [r4, #28]
 800718c:	b920      	cbnz	r0, 8007198 <_Balloc+0x20>
 800718e:	4b18      	ldr	r3, [pc, #96]	@ (80071f0 <_Balloc+0x78>)
 8007190:	4818      	ldr	r0, [pc, #96]	@ (80071f4 <_Balloc+0x7c>)
 8007192:	216b      	movs	r1, #107	@ 0x6b
 8007194:	f000 fdae 	bl	8007cf4 <__assert_func>
 8007198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800719c:	6006      	str	r6, [r0, #0]
 800719e:	60c6      	str	r6, [r0, #12]
 80071a0:	69e6      	ldr	r6, [r4, #28]
 80071a2:	68f3      	ldr	r3, [r6, #12]
 80071a4:	b183      	cbz	r3, 80071c8 <_Balloc+0x50>
 80071a6:	69e3      	ldr	r3, [r4, #28]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ae:	b9b8      	cbnz	r0, 80071e0 <_Balloc+0x68>
 80071b0:	2101      	movs	r1, #1
 80071b2:	fa01 f605 	lsl.w	r6, r1, r5
 80071b6:	1d72      	adds	r2, r6, #5
 80071b8:	0092      	lsls	r2, r2, #2
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fdb8 	bl	8007d30 <_calloc_r>
 80071c0:	b160      	cbz	r0, 80071dc <_Balloc+0x64>
 80071c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071c6:	e00e      	b.n	80071e6 <_Balloc+0x6e>
 80071c8:	2221      	movs	r2, #33	@ 0x21
 80071ca:	2104      	movs	r1, #4
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fdaf 	bl	8007d30 <_calloc_r>
 80071d2:	69e3      	ldr	r3, [r4, #28]
 80071d4:	60f0      	str	r0, [r6, #12]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <_Balloc+0x2e>
 80071dc:	2000      	movs	r0, #0
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	6802      	ldr	r2, [r0, #0]
 80071e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071e6:	2300      	movs	r3, #0
 80071e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071ec:	e7f7      	b.n	80071de <_Balloc+0x66>
 80071ee:	bf00      	nop
 80071f0:	08008459 	.word	0x08008459
 80071f4:	080084d9 	.word	0x080084d9

080071f8 <_Bfree>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	69c6      	ldr	r6, [r0, #28]
 80071fc:	4605      	mov	r5, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b976      	cbnz	r6, 8007220 <_Bfree+0x28>
 8007202:	2010      	movs	r0, #16
 8007204:	f7ff ff02 	bl	800700c <malloc>
 8007208:	4602      	mov	r2, r0
 800720a:	61e8      	str	r0, [r5, #28]
 800720c:	b920      	cbnz	r0, 8007218 <_Bfree+0x20>
 800720e:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <_Bfree+0x3c>)
 8007210:	4809      	ldr	r0, [pc, #36]	@ (8007238 <_Bfree+0x40>)
 8007212:	218f      	movs	r1, #143	@ 0x8f
 8007214:	f000 fd6e 	bl	8007cf4 <__assert_func>
 8007218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800721c:	6006      	str	r6, [r0, #0]
 800721e:	60c6      	str	r6, [r0, #12]
 8007220:	b13c      	cbz	r4, 8007232 <_Bfree+0x3a>
 8007222:	69eb      	ldr	r3, [r5, #28]
 8007224:	6862      	ldr	r2, [r4, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800722c:	6021      	str	r1, [r4, #0]
 800722e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	08008459 	.word	0x08008459
 8007238:	080084d9 	.word	0x080084d9

0800723c <__multadd>:
 800723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	690d      	ldr	r5, [r1, #16]
 8007242:	4607      	mov	r7, r0
 8007244:	460c      	mov	r4, r1
 8007246:	461e      	mov	r6, r3
 8007248:	f101 0c14 	add.w	ip, r1, #20
 800724c:	2000      	movs	r0, #0
 800724e:	f8dc 3000 	ldr.w	r3, [ip]
 8007252:	b299      	uxth	r1, r3
 8007254:	fb02 6101 	mla	r1, r2, r1, r6
 8007258:	0c1e      	lsrs	r6, r3, #16
 800725a:	0c0b      	lsrs	r3, r1, #16
 800725c:	fb02 3306 	mla	r3, r2, r6, r3
 8007260:	b289      	uxth	r1, r1
 8007262:	3001      	adds	r0, #1
 8007264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007268:	4285      	cmp	r5, r0
 800726a:	f84c 1b04 	str.w	r1, [ip], #4
 800726e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007272:	dcec      	bgt.n	800724e <__multadd+0x12>
 8007274:	b30e      	cbz	r6, 80072ba <__multadd+0x7e>
 8007276:	68a3      	ldr	r3, [r4, #8]
 8007278:	42ab      	cmp	r3, r5
 800727a:	dc19      	bgt.n	80072b0 <__multadd+0x74>
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4638      	mov	r0, r7
 8007280:	3101      	adds	r1, #1
 8007282:	f7ff ff79 	bl	8007178 <_Balloc>
 8007286:	4680      	mov	r8, r0
 8007288:	b928      	cbnz	r0, 8007296 <__multadd+0x5a>
 800728a:	4602      	mov	r2, r0
 800728c:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <__multadd+0x84>)
 800728e:	480d      	ldr	r0, [pc, #52]	@ (80072c4 <__multadd+0x88>)
 8007290:	21ba      	movs	r1, #186	@ 0xba
 8007292:	f000 fd2f 	bl	8007cf4 <__assert_func>
 8007296:	6922      	ldr	r2, [r4, #16]
 8007298:	3202      	adds	r2, #2
 800729a:	f104 010c 	add.w	r1, r4, #12
 800729e:	0092      	lsls	r2, r2, #2
 80072a0:	300c      	adds	r0, #12
 80072a2:	f000 fd19 	bl	8007cd8 <memcpy>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ffa5 	bl	80071f8 <_Bfree>
 80072ae:	4644      	mov	r4, r8
 80072b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072b4:	3501      	adds	r5, #1
 80072b6:	615e      	str	r6, [r3, #20]
 80072b8:	6125      	str	r5, [r4, #16]
 80072ba:	4620      	mov	r0, r4
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	080084c8 	.word	0x080084c8
 80072c4:	080084d9 	.word	0x080084d9

080072c8 <__hi0bits>:
 80072c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072cc:	4603      	mov	r3, r0
 80072ce:	bf36      	itet	cc
 80072d0:	0403      	lslcc	r3, r0, #16
 80072d2:	2000      	movcs	r0, #0
 80072d4:	2010      	movcc	r0, #16
 80072d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072da:	bf3c      	itt	cc
 80072dc:	021b      	lslcc	r3, r3, #8
 80072de:	3008      	addcc	r0, #8
 80072e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e4:	bf3c      	itt	cc
 80072e6:	011b      	lslcc	r3, r3, #4
 80072e8:	3004      	addcc	r0, #4
 80072ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ee:	bf3c      	itt	cc
 80072f0:	009b      	lslcc	r3, r3, #2
 80072f2:	3002      	addcc	r0, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db05      	blt.n	8007304 <__hi0bits+0x3c>
 80072f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072fc:	f100 0001 	add.w	r0, r0, #1
 8007300:	bf08      	it	eq
 8007302:	2020      	moveq	r0, #32
 8007304:	4770      	bx	lr

08007306 <__lo0bits>:
 8007306:	6803      	ldr	r3, [r0, #0]
 8007308:	4602      	mov	r2, r0
 800730a:	f013 0007 	ands.w	r0, r3, #7
 800730e:	d00b      	beq.n	8007328 <__lo0bits+0x22>
 8007310:	07d9      	lsls	r1, r3, #31
 8007312:	d421      	bmi.n	8007358 <__lo0bits+0x52>
 8007314:	0798      	lsls	r0, r3, #30
 8007316:	bf49      	itett	mi
 8007318:	085b      	lsrmi	r3, r3, #1
 800731a:	089b      	lsrpl	r3, r3, #2
 800731c:	2001      	movmi	r0, #1
 800731e:	6013      	strmi	r3, [r2, #0]
 8007320:	bf5c      	itt	pl
 8007322:	6013      	strpl	r3, [r2, #0]
 8007324:	2002      	movpl	r0, #2
 8007326:	4770      	bx	lr
 8007328:	b299      	uxth	r1, r3
 800732a:	b909      	cbnz	r1, 8007330 <__lo0bits+0x2a>
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	2010      	movs	r0, #16
 8007330:	b2d9      	uxtb	r1, r3
 8007332:	b909      	cbnz	r1, 8007338 <__lo0bits+0x32>
 8007334:	3008      	adds	r0, #8
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	0719      	lsls	r1, r3, #28
 800733a:	bf04      	itt	eq
 800733c:	091b      	lsreq	r3, r3, #4
 800733e:	3004      	addeq	r0, #4
 8007340:	0799      	lsls	r1, r3, #30
 8007342:	bf04      	itt	eq
 8007344:	089b      	lsreq	r3, r3, #2
 8007346:	3002      	addeq	r0, #2
 8007348:	07d9      	lsls	r1, r3, #31
 800734a:	d403      	bmi.n	8007354 <__lo0bits+0x4e>
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	f100 0001 	add.w	r0, r0, #1
 8007352:	d003      	beq.n	800735c <__lo0bits+0x56>
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4770      	bx	lr
 8007358:	2000      	movs	r0, #0
 800735a:	4770      	bx	lr
 800735c:	2020      	movs	r0, #32
 800735e:	4770      	bx	lr

08007360 <__i2b>:
 8007360:	b510      	push	{r4, lr}
 8007362:	460c      	mov	r4, r1
 8007364:	2101      	movs	r1, #1
 8007366:	f7ff ff07 	bl	8007178 <_Balloc>
 800736a:	4602      	mov	r2, r0
 800736c:	b928      	cbnz	r0, 800737a <__i2b+0x1a>
 800736e:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <__i2b+0x24>)
 8007370:	4805      	ldr	r0, [pc, #20]	@ (8007388 <__i2b+0x28>)
 8007372:	f240 1145 	movw	r1, #325	@ 0x145
 8007376:	f000 fcbd 	bl	8007cf4 <__assert_func>
 800737a:	2301      	movs	r3, #1
 800737c:	6144      	str	r4, [r0, #20]
 800737e:	6103      	str	r3, [r0, #16]
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	080084c8 	.word	0x080084c8
 8007388:	080084d9 	.word	0x080084d9

0800738c <__multiply>:
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	4614      	mov	r4, r2
 8007392:	690a      	ldr	r2, [r1, #16]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	bfa8      	it	ge
 800739a:	4623      	movge	r3, r4
 800739c:	460f      	mov	r7, r1
 800739e:	bfa4      	itt	ge
 80073a0:	460c      	movge	r4, r1
 80073a2:	461f      	movge	r7, r3
 80073a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073ac:	68a3      	ldr	r3, [r4, #8]
 80073ae:	6861      	ldr	r1, [r4, #4]
 80073b0:	eb0a 0609 	add.w	r6, sl, r9
 80073b4:	42b3      	cmp	r3, r6
 80073b6:	b085      	sub	sp, #20
 80073b8:	bfb8      	it	lt
 80073ba:	3101      	addlt	r1, #1
 80073bc:	f7ff fedc 	bl	8007178 <_Balloc>
 80073c0:	b930      	cbnz	r0, 80073d0 <__multiply+0x44>
 80073c2:	4602      	mov	r2, r0
 80073c4:	4b44      	ldr	r3, [pc, #272]	@ (80074d8 <__multiply+0x14c>)
 80073c6:	4845      	ldr	r0, [pc, #276]	@ (80074dc <__multiply+0x150>)
 80073c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073cc:	f000 fc92 	bl	8007cf4 <__assert_func>
 80073d0:	f100 0514 	add.w	r5, r0, #20
 80073d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073d8:	462b      	mov	r3, r5
 80073da:	2200      	movs	r2, #0
 80073dc:	4543      	cmp	r3, r8
 80073de:	d321      	bcc.n	8007424 <__multiply+0x98>
 80073e0:	f107 0114 	add.w	r1, r7, #20
 80073e4:	f104 0214 	add.w	r2, r4, #20
 80073e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	1b13      	subs	r3, r2, r4
 80073f4:	3b15      	subs	r3, #21
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	3304      	adds	r3, #4
 80073fc:	f104 0715 	add.w	r7, r4, #21
 8007400:	42ba      	cmp	r2, r7
 8007402:	bf38      	it	cc
 8007404:	2304      	movcc	r3, #4
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	9b02      	ldr	r3, [sp, #8]
 800740a:	9103      	str	r1, [sp, #12]
 800740c:	428b      	cmp	r3, r1
 800740e:	d80c      	bhi.n	800742a <__multiply+0x9e>
 8007410:	2e00      	cmp	r6, #0
 8007412:	dd03      	ble.n	800741c <__multiply+0x90>
 8007414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007418:	2b00      	cmp	r3, #0
 800741a:	d05b      	beq.n	80074d4 <__multiply+0x148>
 800741c:	6106      	str	r6, [r0, #16]
 800741e:	b005      	add	sp, #20
 8007420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007424:	f843 2b04 	str.w	r2, [r3], #4
 8007428:	e7d8      	b.n	80073dc <__multiply+0x50>
 800742a:	f8b1 a000 	ldrh.w	sl, [r1]
 800742e:	f1ba 0f00 	cmp.w	sl, #0
 8007432:	d024      	beq.n	800747e <__multiply+0xf2>
 8007434:	f104 0e14 	add.w	lr, r4, #20
 8007438:	46a9      	mov	r9, r5
 800743a:	f04f 0c00 	mov.w	ip, #0
 800743e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007442:	f8d9 3000 	ldr.w	r3, [r9]
 8007446:	fa1f fb87 	uxth.w	fp, r7
 800744a:	b29b      	uxth	r3, r3
 800744c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007450:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007454:	f8d9 7000 	ldr.w	r7, [r9]
 8007458:	4463      	add	r3, ip
 800745a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800745e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007462:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800746c:	4572      	cmp	r2, lr
 800746e:	f849 3b04 	str.w	r3, [r9], #4
 8007472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007476:	d8e2      	bhi.n	800743e <__multiply+0xb2>
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	f845 c003 	str.w	ip, [r5, r3]
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007484:	3104      	adds	r1, #4
 8007486:	f1b9 0f00 	cmp.w	r9, #0
 800748a:	d021      	beq.n	80074d0 <__multiply+0x144>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	f104 0c14 	add.w	ip, r4, #20
 8007492:	46ae      	mov	lr, r5
 8007494:	f04f 0a00 	mov.w	sl, #0
 8007498:	f8bc b000 	ldrh.w	fp, [ip]
 800749c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074a0:	fb09 770b 	mla	r7, r9, fp, r7
 80074a4:	4457      	add	r7, sl
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074ac:	f84e 3b04 	str.w	r3, [lr], #4
 80074b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074b8:	f8be 3000 	ldrh.w	r3, [lr]
 80074bc:	fb09 330a 	mla	r3, r9, sl, r3
 80074c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80074c4:	4562      	cmp	r2, ip
 80074c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074ca:	d8e5      	bhi.n	8007498 <__multiply+0x10c>
 80074cc:	9f01      	ldr	r7, [sp, #4]
 80074ce:	51eb      	str	r3, [r5, r7]
 80074d0:	3504      	adds	r5, #4
 80074d2:	e799      	b.n	8007408 <__multiply+0x7c>
 80074d4:	3e01      	subs	r6, #1
 80074d6:	e79b      	b.n	8007410 <__multiply+0x84>
 80074d8:	080084c8 	.word	0x080084c8
 80074dc:	080084d9 	.word	0x080084d9

080074e0 <__pow5mult>:
 80074e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e4:	4615      	mov	r5, r2
 80074e6:	f012 0203 	ands.w	r2, r2, #3
 80074ea:	4607      	mov	r7, r0
 80074ec:	460e      	mov	r6, r1
 80074ee:	d007      	beq.n	8007500 <__pow5mult+0x20>
 80074f0:	4c25      	ldr	r4, [pc, #148]	@ (8007588 <__pow5mult+0xa8>)
 80074f2:	3a01      	subs	r2, #1
 80074f4:	2300      	movs	r3, #0
 80074f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074fa:	f7ff fe9f 	bl	800723c <__multadd>
 80074fe:	4606      	mov	r6, r0
 8007500:	10ad      	asrs	r5, r5, #2
 8007502:	d03d      	beq.n	8007580 <__pow5mult+0xa0>
 8007504:	69fc      	ldr	r4, [r7, #28]
 8007506:	b97c      	cbnz	r4, 8007528 <__pow5mult+0x48>
 8007508:	2010      	movs	r0, #16
 800750a:	f7ff fd7f 	bl	800700c <malloc>
 800750e:	4602      	mov	r2, r0
 8007510:	61f8      	str	r0, [r7, #28]
 8007512:	b928      	cbnz	r0, 8007520 <__pow5mult+0x40>
 8007514:	4b1d      	ldr	r3, [pc, #116]	@ (800758c <__pow5mult+0xac>)
 8007516:	481e      	ldr	r0, [pc, #120]	@ (8007590 <__pow5mult+0xb0>)
 8007518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800751c:	f000 fbea 	bl	8007cf4 <__assert_func>
 8007520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007524:	6004      	str	r4, [r0, #0]
 8007526:	60c4      	str	r4, [r0, #12]
 8007528:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800752c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007530:	b94c      	cbnz	r4, 8007546 <__pow5mult+0x66>
 8007532:	f240 2171 	movw	r1, #625	@ 0x271
 8007536:	4638      	mov	r0, r7
 8007538:	f7ff ff12 	bl	8007360 <__i2b>
 800753c:	2300      	movs	r3, #0
 800753e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007542:	4604      	mov	r4, r0
 8007544:	6003      	str	r3, [r0, #0]
 8007546:	f04f 0900 	mov.w	r9, #0
 800754a:	07eb      	lsls	r3, r5, #31
 800754c:	d50a      	bpl.n	8007564 <__pow5mult+0x84>
 800754e:	4631      	mov	r1, r6
 8007550:	4622      	mov	r2, r4
 8007552:	4638      	mov	r0, r7
 8007554:	f7ff ff1a 	bl	800738c <__multiply>
 8007558:	4631      	mov	r1, r6
 800755a:	4680      	mov	r8, r0
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fe4b 	bl	80071f8 <_Bfree>
 8007562:	4646      	mov	r6, r8
 8007564:	106d      	asrs	r5, r5, #1
 8007566:	d00b      	beq.n	8007580 <__pow5mult+0xa0>
 8007568:	6820      	ldr	r0, [r4, #0]
 800756a:	b938      	cbnz	r0, 800757c <__pow5mult+0x9c>
 800756c:	4622      	mov	r2, r4
 800756e:	4621      	mov	r1, r4
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff ff0b 	bl	800738c <__multiply>
 8007576:	6020      	str	r0, [r4, #0]
 8007578:	f8c0 9000 	str.w	r9, [r0]
 800757c:	4604      	mov	r4, r0
 800757e:	e7e4      	b.n	800754a <__pow5mult+0x6a>
 8007580:	4630      	mov	r0, r6
 8007582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007586:	bf00      	nop
 8007588:	08008534 	.word	0x08008534
 800758c:	08008459 	.word	0x08008459
 8007590:	080084d9 	.word	0x080084d9

08007594 <__lshift>:
 8007594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	460c      	mov	r4, r1
 800759a:	6849      	ldr	r1, [r1, #4]
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	4607      	mov	r7, r0
 80075a6:	4691      	mov	r9, r2
 80075a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075ac:	f108 0601 	add.w	r6, r8, #1
 80075b0:	42b3      	cmp	r3, r6
 80075b2:	db0b      	blt.n	80075cc <__lshift+0x38>
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7ff fddf 	bl	8007178 <_Balloc>
 80075ba:	4605      	mov	r5, r0
 80075bc:	b948      	cbnz	r0, 80075d2 <__lshift+0x3e>
 80075be:	4602      	mov	r2, r0
 80075c0:	4b28      	ldr	r3, [pc, #160]	@ (8007664 <__lshift+0xd0>)
 80075c2:	4829      	ldr	r0, [pc, #164]	@ (8007668 <__lshift+0xd4>)
 80075c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075c8:	f000 fb94 	bl	8007cf4 <__assert_func>
 80075cc:	3101      	adds	r1, #1
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	e7ee      	b.n	80075b0 <__lshift+0x1c>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f100 0114 	add.w	r1, r0, #20
 80075d8:	f100 0210 	add.w	r2, r0, #16
 80075dc:	4618      	mov	r0, r3
 80075de:	4553      	cmp	r3, sl
 80075e0:	db33      	blt.n	800764a <__lshift+0xb6>
 80075e2:	6920      	ldr	r0, [r4, #16]
 80075e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075e8:	f104 0314 	add.w	r3, r4, #20
 80075ec:	f019 091f 	ands.w	r9, r9, #31
 80075f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075f8:	d02b      	beq.n	8007652 <__lshift+0xbe>
 80075fa:	f1c9 0e20 	rsb	lr, r9, #32
 80075fe:	468a      	mov	sl, r1
 8007600:	2200      	movs	r2, #0
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	fa00 f009 	lsl.w	r0, r0, r9
 8007608:	4310      	orrs	r0, r2
 800760a:	f84a 0b04 	str.w	r0, [sl], #4
 800760e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007612:	459c      	cmp	ip, r3
 8007614:	fa22 f20e 	lsr.w	r2, r2, lr
 8007618:	d8f3      	bhi.n	8007602 <__lshift+0x6e>
 800761a:	ebac 0304 	sub.w	r3, ip, r4
 800761e:	3b15      	subs	r3, #21
 8007620:	f023 0303 	bic.w	r3, r3, #3
 8007624:	3304      	adds	r3, #4
 8007626:	f104 0015 	add.w	r0, r4, #21
 800762a:	4584      	cmp	ip, r0
 800762c:	bf38      	it	cc
 800762e:	2304      	movcc	r3, #4
 8007630:	50ca      	str	r2, [r1, r3]
 8007632:	b10a      	cbz	r2, 8007638 <__lshift+0xa4>
 8007634:	f108 0602 	add.w	r6, r8, #2
 8007638:	3e01      	subs	r6, #1
 800763a:	4638      	mov	r0, r7
 800763c:	612e      	str	r6, [r5, #16]
 800763e:	4621      	mov	r1, r4
 8007640:	f7ff fdda 	bl	80071f8 <_Bfree>
 8007644:	4628      	mov	r0, r5
 8007646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764a:	f842 0f04 	str.w	r0, [r2, #4]!
 800764e:	3301      	adds	r3, #1
 8007650:	e7c5      	b.n	80075de <__lshift+0x4a>
 8007652:	3904      	subs	r1, #4
 8007654:	f853 2b04 	ldr.w	r2, [r3], #4
 8007658:	f841 2f04 	str.w	r2, [r1, #4]!
 800765c:	459c      	cmp	ip, r3
 800765e:	d8f9      	bhi.n	8007654 <__lshift+0xc0>
 8007660:	e7ea      	b.n	8007638 <__lshift+0xa4>
 8007662:	bf00      	nop
 8007664:	080084c8 	.word	0x080084c8
 8007668:	080084d9 	.word	0x080084d9

0800766c <__mcmp>:
 800766c:	690a      	ldr	r2, [r1, #16]
 800766e:	4603      	mov	r3, r0
 8007670:	6900      	ldr	r0, [r0, #16]
 8007672:	1a80      	subs	r0, r0, r2
 8007674:	b530      	push	{r4, r5, lr}
 8007676:	d10e      	bne.n	8007696 <__mcmp+0x2a>
 8007678:	3314      	adds	r3, #20
 800767a:	3114      	adds	r1, #20
 800767c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007680:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800768c:	4295      	cmp	r5, r2
 800768e:	d003      	beq.n	8007698 <__mcmp+0x2c>
 8007690:	d205      	bcs.n	800769e <__mcmp+0x32>
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	bd30      	pop	{r4, r5, pc}
 8007698:	42a3      	cmp	r3, r4
 800769a:	d3f3      	bcc.n	8007684 <__mcmp+0x18>
 800769c:	e7fb      	b.n	8007696 <__mcmp+0x2a>
 800769e:	2001      	movs	r0, #1
 80076a0:	e7f9      	b.n	8007696 <__mcmp+0x2a>
	...

080076a4 <__mdiff>:
 80076a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	4689      	mov	r9, r1
 80076aa:	4606      	mov	r6, r0
 80076ac:	4611      	mov	r1, r2
 80076ae:	4648      	mov	r0, r9
 80076b0:	4614      	mov	r4, r2
 80076b2:	f7ff ffdb 	bl	800766c <__mcmp>
 80076b6:	1e05      	subs	r5, r0, #0
 80076b8:	d112      	bne.n	80076e0 <__mdiff+0x3c>
 80076ba:	4629      	mov	r1, r5
 80076bc:	4630      	mov	r0, r6
 80076be:	f7ff fd5b 	bl	8007178 <_Balloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	b928      	cbnz	r0, 80076d2 <__mdiff+0x2e>
 80076c6:	4b3f      	ldr	r3, [pc, #252]	@ (80077c4 <__mdiff+0x120>)
 80076c8:	f240 2137 	movw	r1, #567	@ 0x237
 80076cc:	483e      	ldr	r0, [pc, #248]	@ (80077c8 <__mdiff+0x124>)
 80076ce:	f000 fb11 	bl	8007cf4 <__assert_func>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076d8:	4610      	mov	r0, r2
 80076da:	b003      	add	sp, #12
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	bfbc      	itt	lt
 80076e2:	464b      	movlt	r3, r9
 80076e4:	46a1      	movlt	r9, r4
 80076e6:	4630      	mov	r0, r6
 80076e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076ec:	bfba      	itte	lt
 80076ee:	461c      	movlt	r4, r3
 80076f0:	2501      	movlt	r5, #1
 80076f2:	2500      	movge	r5, #0
 80076f4:	f7ff fd40 	bl	8007178 <_Balloc>
 80076f8:	4602      	mov	r2, r0
 80076fa:	b918      	cbnz	r0, 8007704 <__mdiff+0x60>
 80076fc:	4b31      	ldr	r3, [pc, #196]	@ (80077c4 <__mdiff+0x120>)
 80076fe:	f240 2145 	movw	r1, #581	@ 0x245
 8007702:	e7e3      	b.n	80076cc <__mdiff+0x28>
 8007704:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007708:	6926      	ldr	r6, [r4, #16]
 800770a:	60c5      	str	r5, [r0, #12]
 800770c:	f109 0310 	add.w	r3, r9, #16
 8007710:	f109 0514 	add.w	r5, r9, #20
 8007714:	f104 0e14 	add.w	lr, r4, #20
 8007718:	f100 0b14 	add.w	fp, r0, #20
 800771c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007720:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	46d9      	mov	r9, fp
 8007728:	f04f 0c00 	mov.w	ip, #0
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007732:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	fa1f f38a 	uxth.w	r3, sl
 800773c:	4619      	mov	r1, r3
 800773e:	b283      	uxth	r3, r0
 8007740:	1acb      	subs	r3, r1, r3
 8007742:	0c00      	lsrs	r0, r0, #16
 8007744:	4463      	add	r3, ip
 8007746:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800774a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800774e:	b29b      	uxth	r3, r3
 8007750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007754:	4576      	cmp	r6, lr
 8007756:	f849 3b04 	str.w	r3, [r9], #4
 800775a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800775e:	d8e5      	bhi.n	800772c <__mdiff+0x88>
 8007760:	1b33      	subs	r3, r6, r4
 8007762:	3b15      	subs	r3, #21
 8007764:	f023 0303 	bic.w	r3, r3, #3
 8007768:	3415      	adds	r4, #21
 800776a:	3304      	adds	r3, #4
 800776c:	42a6      	cmp	r6, r4
 800776e:	bf38      	it	cc
 8007770:	2304      	movcc	r3, #4
 8007772:	441d      	add	r5, r3
 8007774:	445b      	add	r3, fp
 8007776:	461e      	mov	r6, r3
 8007778:	462c      	mov	r4, r5
 800777a:	4544      	cmp	r4, r8
 800777c:	d30e      	bcc.n	800779c <__mdiff+0xf8>
 800777e:	f108 0103 	add.w	r1, r8, #3
 8007782:	1b49      	subs	r1, r1, r5
 8007784:	f021 0103 	bic.w	r1, r1, #3
 8007788:	3d03      	subs	r5, #3
 800778a:	45a8      	cmp	r8, r5
 800778c:	bf38      	it	cc
 800778e:	2100      	movcc	r1, #0
 8007790:	440b      	add	r3, r1
 8007792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007796:	b191      	cbz	r1, 80077be <__mdiff+0x11a>
 8007798:	6117      	str	r7, [r2, #16]
 800779a:	e79d      	b.n	80076d8 <__mdiff+0x34>
 800779c:	f854 1b04 	ldr.w	r1, [r4], #4
 80077a0:	46e6      	mov	lr, ip
 80077a2:	0c08      	lsrs	r0, r1, #16
 80077a4:	fa1c fc81 	uxtah	ip, ip, r1
 80077a8:	4471      	add	r1, lr
 80077aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077ae:	b289      	uxth	r1, r1
 80077b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077b4:	f846 1b04 	str.w	r1, [r6], #4
 80077b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077bc:	e7dd      	b.n	800777a <__mdiff+0xd6>
 80077be:	3f01      	subs	r7, #1
 80077c0:	e7e7      	b.n	8007792 <__mdiff+0xee>
 80077c2:	bf00      	nop
 80077c4:	080084c8 	.word	0x080084c8
 80077c8:	080084d9 	.word	0x080084d9

080077cc <__d2b>:
 80077cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077d0:	460f      	mov	r7, r1
 80077d2:	2101      	movs	r1, #1
 80077d4:	ec59 8b10 	vmov	r8, r9, d0
 80077d8:	4616      	mov	r6, r2
 80077da:	f7ff fccd 	bl	8007178 <_Balloc>
 80077de:	4604      	mov	r4, r0
 80077e0:	b930      	cbnz	r0, 80077f0 <__d2b+0x24>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b23      	ldr	r3, [pc, #140]	@ (8007874 <__d2b+0xa8>)
 80077e6:	4824      	ldr	r0, [pc, #144]	@ (8007878 <__d2b+0xac>)
 80077e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80077ec:	f000 fa82 	bl	8007cf4 <__assert_func>
 80077f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077f8:	b10d      	cbz	r5, 80077fe <__d2b+0x32>
 80077fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	f1b8 0300 	subs.w	r3, r8, #0
 8007804:	d023      	beq.n	800784e <__d2b+0x82>
 8007806:	4668      	mov	r0, sp
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	f7ff fd7c 	bl	8007306 <__lo0bits>
 800780e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007812:	b1d0      	cbz	r0, 800784a <__d2b+0x7e>
 8007814:	f1c0 0320 	rsb	r3, r0, #32
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	430b      	orrs	r3, r1
 800781e:	40c2      	lsrs	r2, r0
 8007820:	6163      	str	r3, [r4, #20]
 8007822:	9201      	str	r2, [sp, #4]
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	61a3      	str	r3, [r4, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bf0c      	ite	eq
 800782c:	2201      	moveq	r2, #1
 800782e:	2202      	movne	r2, #2
 8007830:	6122      	str	r2, [r4, #16]
 8007832:	b1a5      	cbz	r5, 800785e <__d2b+0x92>
 8007834:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007838:	4405      	add	r5, r0
 800783a:	603d      	str	r5, [r7, #0]
 800783c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4620      	mov	r0, r4
 8007844:	b003      	add	sp, #12
 8007846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800784a:	6161      	str	r1, [r4, #20]
 800784c:	e7ea      	b.n	8007824 <__d2b+0x58>
 800784e:	a801      	add	r0, sp, #4
 8007850:	f7ff fd59 	bl	8007306 <__lo0bits>
 8007854:	9b01      	ldr	r3, [sp, #4]
 8007856:	6163      	str	r3, [r4, #20]
 8007858:	3020      	adds	r0, #32
 800785a:	2201      	movs	r2, #1
 800785c:	e7e8      	b.n	8007830 <__d2b+0x64>
 800785e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007866:	6038      	str	r0, [r7, #0]
 8007868:	6918      	ldr	r0, [r3, #16]
 800786a:	f7ff fd2d 	bl	80072c8 <__hi0bits>
 800786e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007872:	e7e5      	b.n	8007840 <__d2b+0x74>
 8007874:	080084c8 	.word	0x080084c8
 8007878:	080084d9 	.word	0x080084d9

0800787c <__ssputs_r>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	688e      	ldr	r6, [r1, #8]
 8007882:	461f      	mov	r7, r3
 8007884:	42be      	cmp	r6, r7
 8007886:	680b      	ldr	r3, [r1, #0]
 8007888:	4682      	mov	sl, r0
 800788a:	460c      	mov	r4, r1
 800788c:	4690      	mov	r8, r2
 800788e:	d82d      	bhi.n	80078ec <__ssputs_r+0x70>
 8007890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007898:	d026      	beq.n	80078e8 <__ssputs_r+0x6c>
 800789a:	6965      	ldr	r5, [r4, #20]
 800789c:	6909      	ldr	r1, [r1, #16]
 800789e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078a2:	eba3 0901 	sub.w	r9, r3, r1
 80078a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078aa:	1c7b      	adds	r3, r7, #1
 80078ac:	444b      	add	r3, r9
 80078ae:	106d      	asrs	r5, r5, #1
 80078b0:	429d      	cmp	r5, r3
 80078b2:	bf38      	it	cc
 80078b4:	461d      	movcc	r5, r3
 80078b6:	0553      	lsls	r3, r2, #21
 80078b8:	d527      	bpl.n	800790a <__ssputs_r+0x8e>
 80078ba:	4629      	mov	r1, r5
 80078bc:	f7ff fbd0 	bl	8007060 <_malloc_r>
 80078c0:	4606      	mov	r6, r0
 80078c2:	b360      	cbz	r0, 800791e <__ssputs_r+0xa2>
 80078c4:	6921      	ldr	r1, [r4, #16]
 80078c6:	464a      	mov	r2, r9
 80078c8:	f000 fa06 	bl	8007cd8 <memcpy>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d6:	81a3      	strh	r3, [r4, #12]
 80078d8:	6126      	str	r6, [r4, #16]
 80078da:	6165      	str	r5, [r4, #20]
 80078dc:	444e      	add	r6, r9
 80078de:	eba5 0509 	sub.w	r5, r5, r9
 80078e2:	6026      	str	r6, [r4, #0]
 80078e4:	60a5      	str	r5, [r4, #8]
 80078e6:	463e      	mov	r6, r7
 80078e8:	42be      	cmp	r6, r7
 80078ea:	d900      	bls.n	80078ee <__ssputs_r+0x72>
 80078ec:	463e      	mov	r6, r7
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	4632      	mov	r2, r6
 80078f2:	4641      	mov	r1, r8
 80078f4:	f000 f9c6 	bl	8007c84 <memmove>
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	1b9b      	subs	r3, r3, r6
 80078fc:	60a3      	str	r3, [r4, #8]
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	4433      	add	r3, r6
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	2000      	movs	r0, #0
 8007906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790a:	462a      	mov	r2, r5
 800790c:	f000 fa36 	bl	8007d7c <_realloc_r>
 8007910:	4606      	mov	r6, r0
 8007912:	2800      	cmp	r0, #0
 8007914:	d1e0      	bne.n	80078d8 <__ssputs_r+0x5c>
 8007916:	6921      	ldr	r1, [r4, #16]
 8007918:	4650      	mov	r0, sl
 800791a:	f7ff fb2d 	bl	8006f78 <_free_r>
 800791e:	230c      	movs	r3, #12
 8007920:	f8ca 3000 	str.w	r3, [sl]
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	e7e9      	b.n	8007906 <__ssputs_r+0x8a>
	...

08007934 <_svfiprintf_r>:
 8007934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	4698      	mov	r8, r3
 800793a:	898b      	ldrh	r3, [r1, #12]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	b09d      	sub	sp, #116	@ 0x74
 8007940:	4607      	mov	r7, r0
 8007942:	460d      	mov	r5, r1
 8007944:	4614      	mov	r4, r2
 8007946:	d510      	bpl.n	800796a <_svfiprintf_r+0x36>
 8007948:	690b      	ldr	r3, [r1, #16]
 800794a:	b973      	cbnz	r3, 800796a <_svfiprintf_r+0x36>
 800794c:	2140      	movs	r1, #64	@ 0x40
 800794e:	f7ff fb87 	bl	8007060 <_malloc_r>
 8007952:	6028      	str	r0, [r5, #0]
 8007954:	6128      	str	r0, [r5, #16]
 8007956:	b930      	cbnz	r0, 8007966 <_svfiprintf_r+0x32>
 8007958:	230c      	movs	r3, #12
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	b01d      	add	sp, #116	@ 0x74
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	2340      	movs	r3, #64	@ 0x40
 8007968:	616b      	str	r3, [r5, #20]
 800796a:	2300      	movs	r3, #0
 800796c:	9309      	str	r3, [sp, #36]	@ 0x24
 800796e:	2320      	movs	r3, #32
 8007970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007974:	f8cd 800c 	str.w	r8, [sp, #12]
 8007978:	2330      	movs	r3, #48	@ 0x30
 800797a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b18 <_svfiprintf_r+0x1e4>
 800797e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007982:	f04f 0901 	mov.w	r9, #1
 8007986:	4623      	mov	r3, r4
 8007988:	469a      	mov	sl, r3
 800798a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800798e:	b10a      	cbz	r2, 8007994 <_svfiprintf_r+0x60>
 8007990:	2a25      	cmp	r2, #37	@ 0x25
 8007992:	d1f9      	bne.n	8007988 <_svfiprintf_r+0x54>
 8007994:	ebba 0b04 	subs.w	fp, sl, r4
 8007998:	d00b      	beq.n	80079b2 <_svfiprintf_r+0x7e>
 800799a:	465b      	mov	r3, fp
 800799c:	4622      	mov	r2, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	4638      	mov	r0, r7
 80079a2:	f7ff ff6b 	bl	800787c <__ssputs_r>
 80079a6:	3001      	adds	r0, #1
 80079a8:	f000 80a7 	beq.w	8007afa <_svfiprintf_r+0x1c6>
 80079ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ae:	445a      	add	r2, fp
 80079b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079b2:	f89a 3000 	ldrb.w	r3, [sl]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 809f 	beq.w	8007afa <_svfiprintf_r+0x1c6>
 80079bc:	2300      	movs	r3, #0
 80079be:	f04f 32ff 	mov.w	r2, #4294967295
 80079c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079c6:	f10a 0a01 	add.w	sl, sl, #1
 80079ca:	9304      	str	r3, [sp, #16]
 80079cc:	9307      	str	r3, [sp, #28]
 80079ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079d4:	4654      	mov	r4, sl
 80079d6:	2205      	movs	r2, #5
 80079d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079dc:	484e      	ldr	r0, [pc, #312]	@ (8007b18 <_svfiprintf_r+0x1e4>)
 80079de:	f7f8 fc17 	bl	8000210 <memchr>
 80079e2:	9a04      	ldr	r2, [sp, #16]
 80079e4:	b9d8      	cbnz	r0, 8007a1e <_svfiprintf_r+0xea>
 80079e6:	06d0      	lsls	r0, r2, #27
 80079e8:	bf44      	itt	mi
 80079ea:	2320      	movmi	r3, #32
 80079ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079f0:	0711      	lsls	r1, r2, #28
 80079f2:	bf44      	itt	mi
 80079f4:	232b      	movmi	r3, #43	@ 0x2b
 80079f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079fa:	f89a 3000 	ldrb.w	r3, [sl]
 80079fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a00:	d015      	beq.n	8007a2e <_svfiprintf_r+0xfa>
 8007a02:	9a07      	ldr	r2, [sp, #28]
 8007a04:	4654      	mov	r4, sl
 8007a06:	2000      	movs	r0, #0
 8007a08:	f04f 0c0a 	mov.w	ip, #10
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a12:	3b30      	subs	r3, #48	@ 0x30
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d94b      	bls.n	8007ab0 <_svfiprintf_r+0x17c>
 8007a18:	b1b0      	cbz	r0, 8007a48 <_svfiprintf_r+0x114>
 8007a1a:	9207      	str	r2, [sp, #28]
 8007a1c:	e014      	b.n	8007a48 <_svfiprintf_r+0x114>
 8007a1e:	eba0 0308 	sub.w	r3, r0, r8
 8007a22:	fa09 f303 	lsl.w	r3, r9, r3
 8007a26:	4313      	orrs	r3, r2
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	46a2      	mov	sl, r4
 8007a2c:	e7d2      	b.n	80079d4 <_svfiprintf_r+0xa0>
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	1d19      	adds	r1, r3, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	9103      	str	r1, [sp, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bfbb      	ittet	lt
 8007a3a:	425b      	neglt	r3, r3
 8007a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a40:	9307      	strge	r3, [sp, #28]
 8007a42:	9307      	strlt	r3, [sp, #28]
 8007a44:	bfb8      	it	lt
 8007a46:	9204      	strlt	r2, [sp, #16]
 8007a48:	7823      	ldrb	r3, [r4, #0]
 8007a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a4c:	d10a      	bne.n	8007a64 <_svfiprintf_r+0x130>
 8007a4e:	7863      	ldrb	r3, [r4, #1]
 8007a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a52:	d132      	bne.n	8007aba <_svfiprintf_r+0x186>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	1d1a      	adds	r2, r3, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	9203      	str	r2, [sp, #12]
 8007a5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a60:	3402      	adds	r4, #2
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b28 <_svfiprintf_r+0x1f4>
 8007a68:	7821      	ldrb	r1, [r4, #0]
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	f7f8 fbcf 	bl	8000210 <memchr>
 8007a72:	b138      	cbz	r0, 8007a84 <_svfiprintf_r+0x150>
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	eba0 000a 	sub.w	r0, r0, sl
 8007a7a:	2240      	movs	r2, #64	@ 0x40
 8007a7c:	4082      	lsls	r2, r0
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	3401      	adds	r4, #1
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a88:	4824      	ldr	r0, [pc, #144]	@ (8007b1c <_svfiprintf_r+0x1e8>)
 8007a8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a8e:	2206      	movs	r2, #6
 8007a90:	f7f8 fbbe 	bl	8000210 <memchr>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d036      	beq.n	8007b06 <_svfiprintf_r+0x1d2>
 8007a98:	4b21      	ldr	r3, [pc, #132]	@ (8007b20 <_svfiprintf_r+0x1ec>)
 8007a9a:	bb1b      	cbnz	r3, 8007ae4 <_svfiprintf_r+0x1b0>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	3307      	adds	r3, #7
 8007aa0:	f023 0307 	bic.w	r3, r3, #7
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	9303      	str	r3, [sp, #12]
 8007aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aaa:	4433      	add	r3, r6
 8007aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aae:	e76a      	b.n	8007986 <_svfiprintf_r+0x52>
 8007ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	e7a8      	b.n	8007a0c <_svfiprintf_r+0xd8>
 8007aba:	2300      	movs	r3, #0
 8007abc:	3401      	adds	r4, #1
 8007abe:	9305      	str	r3, [sp, #20]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f04f 0c0a 	mov.w	ip, #10
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007acc:	3a30      	subs	r2, #48	@ 0x30
 8007ace:	2a09      	cmp	r2, #9
 8007ad0:	d903      	bls.n	8007ada <_svfiprintf_r+0x1a6>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0c6      	beq.n	8007a64 <_svfiprintf_r+0x130>
 8007ad6:	9105      	str	r1, [sp, #20]
 8007ad8:	e7c4      	b.n	8007a64 <_svfiprintf_r+0x130>
 8007ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ade:	4604      	mov	r4, r0
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e7f0      	b.n	8007ac6 <_svfiprintf_r+0x192>
 8007ae4:	ab03      	add	r3, sp, #12
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4b0e      	ldr	r3, [pc, #56]	@ (8007b24 <_svfiprintf_r+0x1f0>)
 8007aec:	a904      	add	r1, sp, #16
 8007aee:	4638      	mov	r0, r7
 8007af0:	f7fd fe70 	bl	80057d4 <_printf_float>
 8007af4:	1c42      	adds	r2, r0, #1
 8007af6:	4606      	mov	r6, r0
 8007af8:	d1d6      	bne.n	8007aa8 <_svfiprintf_r+0x174>
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	065b      	lsls	r3, r3, #25
 8007afe:	f53f af2d 	bmi.w	800795c <_svfiprintf_r+0x28>
 8007b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b04:	e72c      	b.n	8007960 <_svfiprintf_r+0x2c>
 8007b06:	ab03      	add	r3, sp, #12
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	4b05      	ldr	r3, [pc, #20]	@ (8007b24 <_svfiprintf_r+0x1f0>)
 8007b0e:	a904      	add	r1, sp, #16
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7fe f8f7 	bl	8005d04 <_printf_i>
 8007b16:	e7ed      	b.n	8007af4 <_svfiprintf_r+0x1c0>
 8007b18:	08008630 	.word	0x08008630
 8007b1c:	0800863a 	.word	0x0800863a
 8007b20:	080057d5 	.word	0x080057d5
 8007b24:	0800787d 	.word	0x0800787d
 8007b28:	08008636 	.word	0x08008636

08007b2c <__sflush_r>:
 8007b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b34:	0716      	lsls	r6, r2, #28
 8007b36:	4605      	mov	r5, r0
 8007b38:	460c      	mov	r4, r1
 8007b3a:	d454      	bmi.n	8007be6 <__sflush_r+0xba>
 8007b3c:	684b      	ldr	r3, [r1, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dc02      	bgt.n	8007b48 <__sflush_r+0x1c>
 8007b42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dd48      	ble.n	8007bda <__sflush_r+0xae>
 8007b48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	d045      	beq.n	8007bda <__sflush_r+0xae>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b54:	682f      	ldr	r7, [r5, #0]
 8007b56:	6a21      	ldr	r1, [r4, #32]
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	d030      	beq.n	8007bbe <__sflush_r+0x92>
 8007b5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	0759      	lsls	r1, r3, #29
 8007b62:	d505      	bpl.n	8007b70 <__sflush_r+0x44>
 8007b64:	6863      	ldr	r3, [r4, #4]
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b6a:	b10b      	cbz	r3, 8007b70 <__sflush_r+0x44>
 8007b6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	2300      	movs	r3, #0
 8007b72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b74:	6a21      	ldr	r1, [r4, #32]
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b0      	blx	r6
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	d106      	bne.n	8007b8e <__sflush_r+0x62>
 8007b80:	6829      	ldr	r1, [r5, #0]
 8007b82:	291d      	cmp	r1, #29
 8007b84:	d82b      	bhi.n	8007bde <__sflush_r+0xb2>
 8007b86:	4a2a      	ldr	r2, [pc, #168]	@ (8007c30 <__sflush_r+0x104>)
 8007b88:	410a      	asrs	r2, r1
 8007b8a:	07d6      	lsls	r6, r2, #31
 8007b8c:	d427      	bmi.n	8007bde <__sflush_r+0xb2>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	6062      	str	r2, [r4, #4]
 8007b92:	04d9      	lsls	r1, r3, #19
 8007b94:	6922      	ldr	r2, [r4, #16]
 8007b96:	6022      	str	r2, [r4, #0]
 8007b98:	d504      	bpl.n	8007ba4 <__sflush_r+0x78>
 8007b9a:	1c42      	adds	r2, r0, #1
 8007b9c:	d101      	bne.n	8007ba2 <__sflush_r+0x76>
 8007b9e:	682b      	ldr	r3, [r5, #0]
 8007ba0:	b903      	cbnz	r3, 8007ba4 <__sflush_r+0x78>
 8007ba2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ba6:	602f      	str	r7, [r5, #0]
 8007ba8:	b1b9      	cbz	r1, 8007bda <__sflush_r+0xae>
 8007baa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	d002      	beq.n	8007bb8 <__sflush_r+0x8c>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f7ff f9e0 	bl	8006f78 <_free_r>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bbc:	e00d      	b.n	8007bda <__sflush_r+0xae>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b0      	blx	r6
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	1c50      	adds	r0, r2, #1
 8007bc8:	d1c9      	bne.n	8007b5e <__sflush_r+0x32>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0c6      	beq.n	8007b5e <__sflush_r+0x32>
 8007bd0:	2b1d      	cmp	r3, #29
 8007bd2:	d001      	beq.n	8007bd8 <__sflush_r+0xac>
 8007bd4:	2b16      	cmp	r3, #22
 8007bd6:	d11e      	bne.n	8007c16 <__sflush_r+0xea>
 8007bd8:	602f      	str	r7, [r5, #0]
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e022      	b.n	8007c24 <__sflush_r+0xf8>
 8007bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be2:	b21b      	sxth	r3, r3
 8007be4:	e01b      	b.n	8007c1e <__sflush_r+0xf2>
 8007be6:	690f      	ldr	r7, [r1, #16]
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	d0f6      	beq.n	8007bda <__sflush_r+0xae>
 8007bec:	0793      	lsls	r3, r2, #30
 8007bee:	680e      	ldr	r6, [r1, #0]
 8007bf0:	bf08      	it	eq
 8007bf2:	694b      	ldreq	r3, [r1, #20]
 8007bf4:	600f      	str	r7, [r1, #0]
 8007bf6:	bf18      	it	ne
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	eba6 0807 	sub.w	r8, r6, r7
 8007bfe:	608b      	str	r3, [r1, #8]
 8007c00:	f1b8 0f00 	cmp.w	r8, #0
 8007c04:	dde9      	ble.n	8007bda <__sflush_r+0xae>
 8007c06:	6a21      	ldr	r1, [r4, #32]
 8007c08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c0a:	4643      	mov	r3, r8
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b0      	blx	r6
 8007c12:	2800      	cmp	r0, #0
 8007c14:	dc08      	bgt.n	8007c28 <__sflush_r+0xfc>
 8007c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	4407      	add	r7, r0
 8007c2a:	eba8 0800 	sub.w	r8, r8, r0
 8007c2e:	e7e7      	b.n	8007c00 <__sflush_r+0xd4>
 8007c30:	dfbffffe 	.word	0xdfbffffe

08007c34 <_fflush_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	690b      	ldr	r3, [r1, #16]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	b913      	cbnz	r3, 8007c44 <_fflush_r+0x10>
 8007c3e:	2500      	movs	r5, #0
 8007c40:	4628      	mov	r0, r5
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	b118      	cbz	r0, 8007c4e <_fflush_r+0x1a>
 8007c46:	6a03      	ldr	r3, [r0, #32]
 8007c48:	b90b      	cbnz	r3, 8007c4e <_fflush_r+0x1a>
 8007c4a:	f7fe fa07 	bl	800605c <__sinit>
 8007c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f3      	beq.n	8007c3e <_fflush_r+0xa>
 8007c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c58:	07d0      	lsls	r0, r2, #31
 8007c5a:	d404      	bmi.n	8007c66 <_fflush_r+0x32>
 8007c5c:	0599      	lsls	r1, r3, #22
 8007c5e:	d402      	bmi.n	8007c66 <_fflush_r+0x32>
 8007c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c62:	f7fe fb38 	bl	80062d6 <__retarget_lock_acquire_recursive>
 8007c66:	4628      	mov	r0, r5
 8007c68:	4621      	mov	r1, r4
 8007c6a:	f7ff ff5f 	bl	8007b2c <__sflush_r>
 8007c6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c70:	07da      	lsls	r2, r3, #31
 8007c72:	4605      	mov	r5, r0
 8007c74:	d4e4      	bmi.n	8007c40 <_fflush_r+0xc>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	059b      	lsls	r3, r3, #22
 8007c7a:	d4e1      	bmi.n	8007c40 <_fflush_r+0xc>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7e:	f7fe fb2b 	bl	80062d8 <__retarget_lock_release_recursive>
 8007c82:	e7dd      	b.n	8007c40 <_fflush_r+0xc>

08007c84 <memmove>:
 8007c84:	4288      	cmp	r0, r1
 8007c86:	b510      	push	{r4, lr}
 8007c88:	eb01 0402 	add.w	r4, r1, r2
 8007c8c:	d902      	bls.n	8007c94 <memmove+0x10>
 8007c8e:	4284      	cmp	r4, r0
 8007c90:	4623      	mov	r3, r4
 8007c92:	d807      	bhi.n	8007ca4 <memmove+0x20>
 8007c94:	1e43      	subs	r3, r0, #1
 8007c96:	42a1      	cmp	r1, r4
 8007c98:	d008      	beq.n	8007cac <memmove+0x28>
 8007c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ca2:	e7f8      	b.n	8007c96 <memmove+0x12>
 8007ca4:	4402      	add	r2, r0
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	428a      	cmp	r2, r1
 8007caa:	d100      	bne.n	8007cae <memmove+0x2a>
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cb6:	e7f7      	b.n	8007ca8 <memmove+0x24>

08007cb8 <_sbrk_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d06      	ldr	r5, [pc, #24]	@ (8007cd4 <_sbrk_r+0x1c>)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	f7f9 fed6 	bl	8001a74 <_sbrk>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_sbrk_r+0x1a>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_sbrk_r+0x1a>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	200004fc 	.word	0x200004fc

08007cd8 <memcpy>:
 8007cd8:	440a      	add	r2, r1
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce0:	d100      	bne.n	8007ce4 <memcpy+0xc>
 8007ce2:	4770      	bx	lr
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	d1f9      	bne.n	8007ce6 <memcpy+0xe>
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <__assert_func>:
 8007cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4b09      	ldr	r3, [pc, #36]	@ (8007d20 <__assert_func+0x2c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4605      	mov	r5, r0
 8007d00:	68d8      	ldr	r0, [r3, #12]
 8007d02:	b954      	cbnz	r4, 8007d1a <__assert_func+0x26>
 8007d04:	4b07      	ldr	r3, [pc, #28]	@ (8007d24 <__assert_func+0x30>)
 8007d06:	461c      	mov	r4, r3
 8007d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d0c:	9100      	str	r1, [sp, #0]
 8007d0e:	462b      	mov	r3, r5
 8007d10:	4905      	ldr	r1, [pc, #20]	@ (8007d28 <__assert_func+0x34>)
 8007d12:	f000 f86f 	bl	8007df4 <fiprintf>
 8007d16:	f000 f87f 	bl	8007e18 <abort>
 8007d1a:	4b04      	ldr	r3, [pc, #16]	@ (8007d2c <__assert_func+0x38>)
 8007d1c:	e7f4      	b.n	8007d08 <__assert_func+0x14>
 8007d1e:	bf00      	nop
 8007d20:	20000040 	.word	0x20000040
 8007d24:	08008686 	.word	0x08008686
 8007d28:	08008658 	.word	0x08008658
 8007d2c:	0800864b 	.word	0x0800864b

08007d30 <_calloc_r>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	fba1 5402 	umull	r5, r4, r1, r2
 8007d36:	b93c      	cbnz	r4, 8007d48 <_calloc_r+0x18>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7ff f991 	bl	8007060 <_malloc_r>
 8007d3e:	4606      	mov	r6, r0
 8007d40:	b928      	cbnz	r0, 8007d4e <_calloc_r+0x1e>
 8007d42:	2600      	movs	r6, #0
 8007d44:	4630      	mov	r0, r6
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	220c      	movs	r2, #12
 8007d4a:	6002      	str	r2, [r0, #0]
 8007d4c:	e7f9      	b.n	8007d42 <_calloc_r+0x12>
 8007d4e:	462a      	mov	r2, r5
 8007d50:	4621      	mov	r1, r4
 8007d52:	f7fe fa30 	bl	80061b6 <memset>
 8007d56:	e7f5      	b.n	8007d44 <_calloc_r+0x14>

08007d58 <__ascii_mbtowc>:
 8007d58:	b082      	sub	sp, #8
 8007d5a:	b901      	cbnz	r1, 8007d5e <__ascii_mbtowc+0x6>
 8007d5c:	a901      	add	r1, sp, #4
 8007d5e:	b142      	cbz	r2, 8007d72 <__ascii_mbtowc+0x1a>
 8007d60:	b14b      	cbz	r3, 8007d76 <__ascii_mbtowc+0x1e>
 8007d62:	7813      	ldrb	r3, [r2, #0]
 8007d64:	600b      	str	r3, [r1, #0]
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	1e10      	subs	r0, r2, #0
 8007d6a:	bf18      	it	ne
 8007d6c:	2001      	movne	r0, #1
 8007d6e:	b002      	add	sp, #8
 8007d70:	4770      	bx	lr
 8007d72:	4610      	mov	r0, r2
 8007d74:	e7fb      	b.n	8007d6e <__ascii_mbtowc+0x16>
 8007d76:	f06f 0001 	mvn.w	r0, #1
 8007d7a:	e7f8      	b.n	8007d6e <__ascii_mbtowc+0x16>

08007d7c <_realloc_r>:
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4680      	mov	r8, r0
 8007d82:	4615      	mov	r5, r2
 8007d84:	460c      	mov	r4, r1
 8007d86:	b921      	cbnz	r1, 8007d92 <_realloc_r+0x16>
 8007d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	f7ff b967 	b.w	8007060 <_malloc_r>
 8007d92:	b92a      	cbnz	r2, 8007da0 <_realloc_r+0x24>
 8007d94:	f7ff f8f0 	bl	8006f78 <_free_r>
 8007d98:	2400      	movs	r4, #0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	f000 f841 	bl	8007e26 <_malloc_usable_size_r>
 8007da4:	4285      	cmp	r5, r0
 8007da6:	4606      	mov	r6, r0
 8007da8:	d802      	bhi.n	8007db0 <_realloc_r+0x34>
 8007daa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007dae:	d8f4      	bhi.n	8007d9a <_realloc_r+0x1e>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4640      	mov	r0, r8
 8007db4:	f7ff f954 	bl	8007060 <_malloc_r>
 8007db8:	4607      	mov	r7, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0ec      	beq.n	8007d98 <_realloc_r+0x1c>
 8007dbe:	42b5      	cmp	r5, r6
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	bf28      	it	cs
 8007dc6:	4632      	movcs	r2, r6
 8007dc8:	f7ff ff86 	bl	8007cd8 <memcpy>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7ff f8d2 	bl	8006f78 <_free_r>
 8007dd4:	463c      	mov	r4, r7
 8007dd6:	e7e0      	b.n	8007d9a <_realloc_r+0x1e>

08007dd8 <__ascii_wctomb>:
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	b141      	cbz	r1, 8007df0 <__ascii_wctomb+0x18>
 8007dde:	2aff      	cmp	r2, #255	@ 0xff
 8007de0:	d904      	bls.n	8007dec <__ascii_wctomb+0x14>
 8007de2:	228a      	movs	r2, #138	@ 0x8a
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	4770      	bx	lr
 8007dec:	700a      	strb	r2, [r1, #0]
 8007dee:	2001      	movs	r0, #1
 8007df0:	4770      	bx	lr
	...

08007df4 <fiprintf>:
 8007df4:	b40e      	push	{r1, r2, r3}
 8007df6:	b503      	push	{r0, r1, lr}
 8007df8:	4601      	mov	r1, r0
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	4805      	ldr	r0, [pc, #20]	@ (8007e14 <fiprintf+0x20>)
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	f000 f83f 	bl	8007e88 <_vfiprintf_r>
 8007e0a:	b002      	add	sp, #8
 8007e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e10:	b003      	add	sp, #12
 8007e12:	4770      	bx	lr
 8007e14:	20000040 	.word	0x20000040

08007e18 <abort>:
 8007e18:	b508      	push	{r3, lr}
 8007e1a:	2006      	movs	r0, #6
 8007e1c:	f000 fa08 	bl	8008230 <raise>
 8007e20:	2001      	movs	r0, #1
 8007e22:	f7f9 fdaf 	bl	8001984 <_exit>

08007e26 <_malloc_usable_size_r>:
 8007e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e2a:	1f18      	subs	r0, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfbc      	itt	lt
 8007e30:	580b      	ldrlt	r3, [r1, r0]
 8007e32:	18c0      	addlt	r0, r0, r3
 8007e34:	4770      	bx	lr

08007e36 <__sfputc_r>:
 8007e36:	6893      	ldr	r3, [r2, #8]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	b410      	push	{r4}
 8007e3e:	6093      	str	r3, [r2, #8]
 8007e40:	da08      	bge.n	8007e54 <__sfputc_r+0x1e>
 8007e42:	6994      	ldr	r4, [r2, #24]
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	db01      	blt.n	8007e4c <__sfputc_r+0x16>
 8007e48:	290a      	cmp	r1, #10
 8007e4a:	d103      	bne.n	8007e54 <__sfputc_r+0x1e>
 8007e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e50:	f000 b932 	b.w	80080b8 <__swbuf_r>
 8007e54:	6813      	ldr	r3, [r2, #0]
 8007e56:	1c58      	adds	r0, r3, #1
 8007e58:	6010      	str	r0, [r2, #0]
 8007e5a:	7019      	strb	r1, [r3, #0]
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <__sfputs_r>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	4606      	mov	r6, r0
 8007e68:	460f      	mov	r7, r1
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	18d5      	adds	r5, r2, r3
 8007e6e:	42ac      	cmp	r4, r5
 8007e70:	d101      	bne.n	8007e76 <__sfputs_r+0x12>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e007      	b.n	8007e86 <__sfputs_r+0x22>
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7ff ffda 	bl	8007e36 <__sfputc_r>
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	d1f3      	bne.n	8007e6e <__sfputs_r+0xa>
 8007e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e88 <_vfiprintf_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	460d      	mov	r5, r1
 8007e8e:	b09d      	sub	sp, #116	@ 0x74
 8007e90:	4614      	mov	r4, r2
 8007e92:	4698      	mov	r8, r3
 8007e94:	4606      	mov	r6, r0
 8007e96:	b118      	cbz	r0, 8007ea0 <_vfiprintf_r+0x18>
 8007e98:	6a03      	ldr	r3, [r0, #32]
 8007e9a:	b90b      	cbnz	r3, 8007ea0 <_vfiprintf_r+0x18>
 8007e9c:	f7fe f8de 	bl	800605c <__sinit>
 8007ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ea2:	07d9      	lsls	r1, r3, #31
 8007ea4:	d405      	bmi.n	8007eb2 <_vfiprintf_r+0x2a>
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	059a      	lsls	r2, r3, #22
 8007eaa:	d402      	bmi.n	8007eb2 <_vfiprintf_r+0x2a>
 8007eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eae:	f7fe fa12 	bl	80062d6 <__retarget_lock_acquire_recursive>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	071b      	lsls	r3, r3, #28
 8007eb6:	d501      	bpl.n	8007ebc <_vfiprintf_r+0x34>
 8007eb8:	692b      	ldr	r3, [r5, #16]
 8007eba:	b99b      	cbnz	r3, 8007ee4 <_vfiprintf_r+0x5c>
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f000 f938 	bl	8008134 <__swsetup_r>
 8007ec4:	b170      	cbz	r0, 8007ee4 <_vfiprintf_r+0x5c>
 8007ec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ec8:	07dc      	lsls	r4, r3, #31
 8007eca:	d504      	bpl.n	8007ed6 <_vfiprintf_r+0x4e>
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed0:	b01d      	add	sp, #116	@ 0x74
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	0598      	lsls	r0, r3, #22
 8007eda:	d4f7      	bmi.n	8007ecc <_vfiprintf_r+0x44>
 8007edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ede:	f7fe f9fb 	bl	80062d8 <__retarget_lock_release_recursive>
 8007ee2:	e7f3      	b.n	8007ecc <_vfiprintf_r+0x44>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ee8:	2320      	movs	r3, #32
 8007eea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ef2:	2330      	movs	r3, #48	@ 0x30
 8007ef4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080a4 <_vfiprintf_r+0x21c>
 8007ef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007efc:	f04f 0901 	mov.w	r9, #1
 8007f00:	4623      	mov	r3, r4
 8007f02:	469a      	mov	sl, r3
 8007f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f08:	b10a      	cbz	r2, 8007f0e <_vfiprintf_r+0x86>
 8007f0a:	2a25      	cmp	r2, #37	@ 0x25
 8007f0c:	d1f9      	bne.n	8007f02 <_vfiprintf_r+0x7a>
 8007f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f12:	d00b      	beq.n	8007f2c <_vfiprintf_r+0xa4>
 8007f14:	465b      	mov	r3, fp
 8007f16:	4622      	mov	r2, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff ffa2 	bl	8007e64 <__sfputs_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	f000 80a7 	beq.w	8008074 <_vfiprintf_r+0x1ec>
 8007f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f28:	445a      	add	r2, fp
 8007f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 809f 	beq.w	8008074 <_vfiprintf_r+0x1ec>
 8007f36:	2300      	movs	r3, #0
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f40:	f10a 0a01 	add.w	sl, sl, #1
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	9307      	str	r3, [sp, #28]
 8007f48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f4e:	4654      	mov	r4, sl
 8007f50:	2205      	movs	r2, #5
 8007f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f56:	4853      	ldr	r0, [pc, #332]	@ (80080a4 <_vfiprintf_r+0x21c>)
 8007f58:	f7f8 f95a 	bl	8000210 <memchr>
 8007f5c:	9a04      	ldr	r2, [sp, #16]
 8007f5e:	b9d8      	cbnz	r0, 8007f98 <_vfiprintf_r+0x110>
 8007f60:	06d1      	lsls	r1, r2, #27
 8007f62:	bf44      	itt	mi
 8007f64:	2320      	movmi	r3, #32
 8007f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f6a:	0713      	lsls	r3, r2, #28
 8007f6c:	bf44      	itt	mi
 8007f6e:	232b      	movmi	r3, #43	@ 0x2b
 8007f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f74:	f89a 3000 	ldrb.w	r3, [sl]
 8007f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f7a:	d015      	beq.n	8007fa8 <_vfiprintf_r+0x120>
 8007f7c:	9a07      	ldr	r2, [sp, #28]
 8007f7e:	4654      	mov	r4, sl
 8007f80:	2000      	movs	r0, #0
 8007f82:	f04f 0c0a 	mov.w	ip, #10
 8007f86:	4621      	mov	r1, r4
 8007f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f8c:	3b30      	subs	r3, #48	@ 0x30
 8007f8e:	2b09      	cmp	r3, #9
 8007f90:	d94b      	bls.n	800802a <_vfiprintf_r+0x1a2>
 8007f92:	b1b0      	cbz	r0, 8007fc2 <_vfiprintf_r+0x13a>
 8007f94:	9207      	str	r2, [sp, #28]
 8007f96:	e014      	b.n	8007fc2 <_vfiprintf_r+0x13a>
 8007f98:	eba0 0308 	sub.w	r3, r0, r8
 8007f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	9304      	str	r3, [sp, #16]
 8007fa4:	46a2      	mov	sl, r4
 8007fa6:	e7d2      	b.n	8007f4e <_vfiprintf_r+0xc6>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	1d19      	adds	r1, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	9103      	str	r1, [sp, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfbb      	ittet	lt
 8007fb4:	425b      	neglt	r3, r3
 8007fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8007fba:	9307      	strge	r3, [sp, #28]
 8007fbc:	9307      	strlt	r3, [sp, #28]
 8007fbe:	bfb8      	it	lt
 8007fc0:	9204      	strlt	r2, [sp, #16]
 8007fc2:	7823      	ldrb	r3, [r4, #0]
 8007fc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fc6:	d10a      	bne.n	8007fde <_vfiprintf_r+0x156>
 8007fc8:	7863      	ldrb	r3, [r4, #1]
 8007fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fcc:	d132      	bne.n	8008034 <_vfiprintf_r+0x1ac>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	1d1a      	adds	r2, r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	9203      	str	r2, [sp, #12]
 8007fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fda:	3402      	adds	r4, #2
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080b4 <_vfiprintf_r+0x22c>
 8007fe2:	7821      	ldrb	r1, [r4, #0]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	f7f8 f912 	bl	8000210 <memchr>
 8007fec:	b138      	cbz	r0, 8007ffe <_vfiprintf_r+0x176>
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	eba0 000a 	sub.w	r0, r0, sl
 8007ff4:	2240      	movs	r2, #64	@ 0x40
 8007ff6:	4082      	lsls	r2, r0
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	3401      	adds	r4, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008002:	4829      	ldr	r0, [pc, #164]	@ (80080a8 <_vfiprintf_r+0x220>)
 8008004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008008:	2206      	movs	r2, #6
 800800a:	f7f8 f901 	bl	8000210 <memchr>
 800800e:	2800      	cmp	r0, #0
 8008010:	d03f      	beq.n	8008092 <_vfiprintf_r+0x20a>
 8008012:	4b26      	ldr	r3, [pc, #152]	@ (80080ac <_vfiprintf_r+0x224>)
 8008014:	bb1b      	cbnz	r3, 800805e <_vfiprintf_r+0x1d6>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	3307      	adds	r3, #7
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	3308      	adds	r3, #8
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008024:	443b      	add	r3, r7
 8008026:	9309      	str	r3, [sp, #36]	@ 0x24
 8008028:	e76a      	b.n	8007f00 <_vfiprintf_r+0x78>
 800802a:	fb0c 3202 	mla	r2, ip, r2, r3
 800802e:	460c      	mov	r4, r1
 8008030:	2001      	movs	r0, #1
 8008032:	e7a8      	b.n	8007f86 <_vfiprintf_r+0xfe>
 8008034:	2300      	movs	r3, #0
 8008036:	3401      	adds	r4, #1
 8008038:	9305      	str	r3, [sp, #20]
 800803a:	4619      	mov	r1, r3
 800803c:	f04f 0c0a 	mov.w	ip, #10
 8008040:	4620      	mov	r0, r4
 8008042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008046:	3a30      	subs	r2, #48	@ 0x30
 8008048:	2a09      	cmp	r2, #9
 800804a:	d903      	bls.n	8008054 <_vfiprintf_r+0x1cc>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0c6      	beq.n	8007fde <_vfiprintf_r+0x156>
 8008050:	9105      	str	r1, [sp, #20]
 8008052:	e7c4      	b.n	8007fde <_vfiprintf_r+0x156>
 8008054:	fb0c 2101 	mla	r1, ip, r1, r2
 8008058:	4604      	mov	r4, r0
 800805a:	2301      	movs	r3, #1
 800805c:	e7f0      	b.n	8008040 <_vfiprintf_r+0x1b8>
 800805e:	ab03      	add	r3, sp, #12
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	462a      	mov	r2, r5
 8008064:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <_vfiprintf_r+0x228>)
 8008066:	a904      	add	r1, sp, #16
 8008068:	4630      	mov	r0, r6
 800806a:	f7fd fbb3 	bl	80057d4 <_printf_float>
 800806e:	4607      	mov	r7, r0
 8008070:	1c78      	adds	r0, r7, #1
 8008072:	d1d6      	bne.n	8008022 <_vfiprintf_r+0x19a>
 8008074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008076:	07d9      	lsls	r1, r3, #31
 8008078:	d405      	bmi.n	8008086 <_vfiprintf_r+0x1fe>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	059a      	lsls	r2, r3, #22
 800807e:	d402      	bmi.n	8008086 <_vfiprintf_r+0x1fe>
 8008080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008082:	f7fe f929 	bl	80062d8 <__retarget_lock_release_recursive>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	065b      	lsls	r3, r3, #25
 800808a:	f53f af1f 	bmi.w	8007ecc <_vfiprintf_r+0x44>
 800808e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008090:	e71e      	b.n	8007ed0 <_vfiprintf_r+0x48>
 8008092:	ab03      	add	r3, sp, #12
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	462a      	mov	r2, r5
 8008098:	4b05      	ldr	r3, [pc, #20]	@ (80080b0 <_vfiprintf_r+0x228>)
 800809a:	a904      	add	r1, sp, #16
 800809c:	4630      	mov	r0, r6
 800809e:	f7fd fe31 	bl	8005d04 <_printf_i>
 80080a2:	e7e4      	b.n	800806e <_vfiprintf_r+0x1e6>
 80080a4:	08008630 	.word	0x08008630
 80080a8:	0800863a 	.word	0x0800863a
 80080ac:	080057d5 	.word	0x080057d5
 80080b0:	08007e65 	.word	0x08007e65
 80080b4:	08008636 	.word	0x08008636

080080b8 <__swbuf_r>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	460e      	mov	r6, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	4605      	mov	r5, r0
 80080c0:	b118      	cbz	r0, 80080ca <__swbuf_r+0x12>
 80080c2:	6a03      	ldr	r3, [r0, #32]
 80080c4:	b90b      	cbnz	r3, 80080ca <__swbuf_r+0x12>
 80080c6:	f7fd ffc9 	bl	800605c <__sinit>
 80080ca:	69a3      	ldr	r3, [r4, #24]
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	071a      	lsls	r2, r3, #28
 80080d2:	d501      	bpl.n	80080d8 <__swbuf_r+0x20>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	b943      	cbnz	r3, 80080ea <__swbuf_r+0x32>
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f82a 	bl	8008134 <__swsetup_r>
 80080e0:	b118      	cbz	r0, 80080ea <__swbuf_r+0x32>
 80080e2:	f04f 37ff 	mov.w	r7, #4294967295
 80080e6:	4638      	mov	r0, r7
 80080e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	6922      	ldr	r2, [r4, #16]
 80080ee:	1a98      	subs	r0, r3, r2
 80080f0:	6963      	ldr	r3, [r4, #20]
 80080f2:	b2f6      	uxtb	r6, r6
 80080f4:	4283      	cmp	r3, r0
 80080f6:	4637      	mov	r7, r6
 80080f8:	dc05      	bgt.n	8008106 <__swbuf_r+0x4e>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	f7ff fd99 	bl	8007c34 <_fflush_r>
 8008102:	2800      	cmp	r0, #0
 8008104:	d1ed      	bne.n	80080e2 <__swbuf_r+0x2a>
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	3b01      	subs	r3, #1
 800810a:	60a3      	str	r3, [r4, #8]
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	701e      	strb	r6, [r3, #0]
 8008114:	6962      	ldr	r2, [r4, #20]
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	429a      	cmp	r2, r3
 800811a:	d004      	beq.n	8008126 <__swbuf_r+0x6e>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	07db      	lsls	r3, r3, #31
 8008120:	d5e1      	bpl.n	80080e6 <__swbuf_r+0x2e>
 8008122:	2e0a      	cmp	r6, #10
 8008124:	d1df      	bne.n	80080e6 <__swbuf_r+0x2e>
 8008126:	4621      	mov	r1, r4
 8008128:	4628      	mov	r0, r5
 800812a:	f7ff fd83 	bl	8007c34 <_fflush_r>
 800812e:	2800      	cmp	r0, #0
 8008130:	d0d9      	beq.n	80080e6 <__swbuf_r+0x2e>
 8008132:	e7d6      	b.n	80080e2 <__swbuf_r+0x2a>

08008134 <__swsetup_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4b29      	ldr	r3, [pc, #164]	@ (80081dc <__swsetup_r+0xa8>)
 8008138:	4605      	mov	r5, r0
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	460c      	mov	r4, r1
 800813e:	b118      	cbz	r0, 8008148 <__swsetup_r+0x14>
 8008140:	6a03      	ldr	r3, [r0, #32]
 8008142:	b90b      	cbnz	r3, 8008148 <__swsetup_r+0x14>
 8008144:	f7fd ff8a 	bl	800605c <__sinit>
 8008148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814c:	0719      	lsls	r1, r3, #28
 800814e:	d422      	bmi.n	8008196 <__swsetup_r+0x62>
 8008150:	06da      	lsls	r2, r3, #27
 8008152:	d407      	bmi.n	8008164 <__swsetup_r+0x30>
 8008154:	2209      	movs	r2, #9
 8008156:	602a      	str	r2, [r5, #0]
 8008158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	f04f 30ff 	mov.w	r0, #4294967295
 8008162:	e033      	b.n	80081cc <__swsetup_r+0x98>
 8008164:	0758      	lsls	r0, r3, #29
 8008166:	d512      	bpl.n	800818e <__swsetup_r+0x5a>
 8008168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800816a:	b141      	cbz	r1, 800817e <__swsetup_r+0x4a>
 800816c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008170:	4299      	cmp	r1, r3
 8008172:	d002      	beq.n	800817a <__swsetup_r+0x46>
 8008174:	4628      	mov	r0, r5
 8008176:	f7fe feff 	bl	8006f78 <_free_r>
 800817a:	2300      	movs	r3, #0
 800817c:	6363      	str	r3, [r4, #52]	@ 0x34
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	2300      	movs	r3, #0
 8008188:	6063      	str	r3, [r4, #4]
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f043 0308 	orr.w	r3, r3, #8
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	b94b      	cbnz	r3, 80081ae <__swsetup_r+0x7a>
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a4:	d003      	beq.n	80081ae <__swsetup_r+0x7a>
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f883 	bl	80082b4 <__smakebuf_r>
 80081ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b2:	f013 0201 	ands.w	r2, r3, #1
 80081b6:	d00a      	beq.n	80081ce <__swsetup_r+0x9a>
 80081b8:	2200      	movs	r2, #0
 80081ba:	60a2      	str	r2, [r4, #8]
 80081bc:	6962      	ldr	r2, [r4, #20]
 80081be:	4252      	negs	r2, r2
 80081c0:	61a2      	str	r2, [r4, #24]
 80081c2:	6922      	ldr	r2, [r4, #16]
 80081c4:	b942      	cbnz	r2, 80081d8 <__swsetup_r+0xa4>
 80081c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081ca:	d1c5      	bne.n	8008158 <__swsetup_r+0x24>
 80081cc:	bd38      	pop	{r3, r4, r5, pc}
 80081ce:	0799      	lsls	r1, r3, #30
 80081d0:	bf58      	it	pl
 80081d2:	6962      	ldrpl	r2, [r4, #20]
 80081d4:	60a2      	str	r2, [r4, #8]
 80081d6:	e7f4      	b.n	80081c2 <__swsetup_r+0x8e>
 80081d8:	2000      	movs	r0, #0
 80081da:	e7f7      	b.n	80081cc <__swsetup_r+0x98>
 80081dc:	20000040 	.word	0x20000040

080081e0 <_raise_r>:
 80081e0:	291f      	cmp	r1, #31
 80081e2:	b538      	push	{r3, r4, r5, lr}
 80081e4:	4605      	mov	r5, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	d904      	bls.n	80081f4 <_raise_r+0x14>
 80081ea:	2316      	movs	r3, #22
 80081ec:	6003      	str	r3, [r0, #0]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081f6:	b112      	cbz	r2, 80081fe <_raise_r+0x1e>
 80081f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081fc:	b94b      	cbnz	r3, 8008212 <_raise_r+0x32>
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f830 	bl	8008264 <_getpid_r>
 8008204:	4622      	mov	r2, r4
 8008206:	4601      	mov	r1, r0
 8008208:	4628      	mov	r0, r5
 800820a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800820e:	f000 b817 	b.w	8008240 <_kill_r>
 8008212:	2b01      	cmp	r3, #1
 8008214:	d00a      	beq.n	800822c <_raise_r+0x4c>
 8008216:	1c59      	adds	r1, r3, #1
 8008218:	d103      	bne.n	8008222 <_raise_r+0x42>
 800821a:	2316      	movs	r3, #22
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	2001      	movs	r0, #1
 8008220:	e7e7      	b.n	80081f2 <_raise_r+0x12>
 8008222:	2100      	movs	r1, #0
 8008224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008228:	4620      	mov	r0, r4
 800822a:	4798      	blx	r3
 800822c:	2000      	movs	r0, #0
 800822e:	e7e0      	b.n	80081f2 <_raise_r+0x12>

08008230 <raise>:
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <raise+0xc>)
 8008232:	4601      	mov	r1, r0
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f7ff bfd3 	b.w	80081e0 <_raise_r>
 800823a:	bf00      	nop
 800823c:	20000040 	.word	0x20000040

08008240 <_kill_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	@ (8008260 <_kill_r+0x20>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	f7f9 fb89 	bl	8001964 <_kill>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d102      	bne.n	800825c <_kill_r+0x1c>
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	b103      	cbz	r3, 800825c <_kill_r+0x1c>
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	bf00      	nop
 8008260:	200004fc 	.word	0x200004fc

08008264 <_getpid_r>:
 8008264:	f7f9 bb76 	b.w	8001954 <_getpid>

08008268 <__swhatbuf_r>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	460c      	mov	r4, r1
 800826c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008270:	2900      	cmp	r1, #0
 8008272:	b096      	sub	sp, #88	@ 0x58
 8008274:	4615      	mov	r5, r2
 8008276:	461e      	mov	r6, r3
 8008278:	da0d      	bge.n	8008296 <__swhatbuf_r+0x2e>
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008280:	f04f 0100 	mov.w	r1, #0
 8008284:	bf14      	ite	ne
 8008286:	2340      	movne	r3, #64	@ 0x40
 8008288:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800828c:	2000      	movs	r0, #0
 800828e:	6031      	str	r1, [r6, #0]
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	b016      	add	sp, #88	@ 0x58
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	466a      	mov	r2, sp
 8008298:	f000 f848 	bl	800832c <_fstat_r>
 800829c:	2800      	cmp	r0, #0
 800829e:	dbec      	blt.n	800827a <__swhatbuf_r+0x12>
 80082a0:	9901      	ldr	r1, [sp, #4]
 80082a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082aa:	4259      	negs	r1, r3
 80082ac:	4159      	adcs	r1, r3
 80082ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082b2:	e7eb      	b.n	800828c <__swhatbuf_r+0x24>

080082b4 <__smakebuf_r>:
 80082b4:	898b      	ldrh	r3, [r1, #12]
 80082b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b8:	079d      	lsls	r5, r3, #30
 80082ba:	4606      	mov	r6, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	d507      	bpl.n	80082d0 <__smakebuf_r+0x1c>
 80082c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	2301      	movs	r3, #1
 80082ca:	6163      	str	r3, [r4, #20]
 80082cc:	b003      	add	sp, #12
 80082ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d0:	ab01      	add	r3, sp, #4
 80082d2:	466a      	mov	r2, sp
 80082d4:	f7ff ffc8 	bl	8008268 <__swhatbuf_r>
 80082d8:	9f00      	ldr	r7, [sp, #0]
 80082da:	4605      	mov	r5, r0
 80082dc:	4639      	mov	r1, r7
 80082de:	4630      	mov	r0, r6
 80082e0:	f7fe febe 	bl	8007060 <_malloc_r>
 80082e4:	b948      	cbnz	r0, 80082fa <__smakebuf_r+0x46>
 80082e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ea:	059a      	lsls	r2, r3, #22
 80082ec:	d4ee      	bmi.n	80082cc <__smakebuf_r+0x18>
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	f043 0302 	orr.w	r3, r3, #2
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	e7e2      	b.n	80082c0 <__smakebuf_r+0xc>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	6020      	str	r0, [r4, #0]
 80082fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	9b01      	ldr	r3, [sp, #4]
 8008306:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800830a:	b15b      	cbz	r3, 8008324 <__smakebuf_r+0x70>
 800830c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008310:	4630      	mov	r0, r6
 8008312:	f000 f81d 	bl	8008350 <_isatty_r>
 8008316:	b128      	cbz	r0, 8008324 <__smakebuf_r+0x70>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f023 0303 	bic.w	r3, r3, #3
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	81a3      	strh	r3, [r4, #12]
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	431d      	orrs	r5, r3
 8008328:	81a5      	strh	r5, [r4, #12]
 800832a:	e7cf      	b.n	80082cc <__smakebuf_r+0x18>

0800832c <_fstat_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	@ (800834c <_fstat_r+0x20>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f7f9 fb73 	bl	8001a24 <_fstat>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	d102      	bne.n	8008348 <_fstat_r+0x1c>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	b103      	cbz	r3, 8008348 <_fstat_r+0x1c>
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	bf00      	nop
 800834c:	200004fc 	.word	0x200004fc

08008350 <_isatty_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d06      	ldr	r5, [pc, #24]	@ (800836c <_isatty_r+0x1c>)
 8008354:	2300      	movs	r3, #0
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	f7f9 fb72 	bl	8001a44 <_isatty>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_isatty_r+0x1a>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_isatty_r+0x1a>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	200004fc 	.word	0x200004fc

08008370 <_init>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	bf00      	nop
 8008374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008376:	bc08      	pop	{r3}
 8008378:	469e      	mov	lr, r3
 800837a:	4770      	bx	lr

0800837c <_fini>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr
