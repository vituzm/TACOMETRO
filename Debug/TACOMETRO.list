
TACOMETRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08008238  08008238  00009238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008608  08008608  0000a1fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008610  08008610  0000a1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008610  08008610  00009610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008618  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001fc  08008814  0000a1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08008814  0000a510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e307  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002090  00000000  00000000  00018533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8e  00000000  00000000  0001b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ba1  00000000  00000000  0001bdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102f8  00000000  00000000  0003e977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2bd7  00000000  00000000  0004ec6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a10  00000000  00000000  0012188c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0012629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008220 	.word	0x08008220

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08008220 	.word	0x08008220

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 fdd6 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f82c 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f9d0 	bl	8001288 <MX_GPIO_Init>
  MX_TIM5_Init();
 8000ee8:	f000 f90e 	bl	8001108 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000eec:	f000 f97e 	bl	80011ec <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000ef0:	f000 f9a0 	bl	8001234 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000ef4:	f000 f890 	bl	8001018 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);   // INPUT CAPTURE
 8000ef8:	2104      	movs	r1, #4
 8000efa:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <main+0x50>)
 8000efc:	f002 f9ae 	bl	800325c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); 				// TIMER PARA ENVIAR AS MENSAGENS EM DETERMINADO TEMPO
 8000f00:	480a      	ldr	r0, [pc, #40]	@ (8000f2c <main+0x54>)
 8000f02:	f001 ffbf 	bl	8002e84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); 	// GERAÇÃO DE SINAL PWM
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <main+0x58>)
 8000f0a:	f002 f885 	bl	8003018 <HAL_TIM_PWM_Start>

  //strncpy(msg, "MEDIDOR DE SINAIS \n\r", msgSIZE);
  //HAL_UART_Transmit(&huart2, msg, strlen(msg), TIMEOUT_SERIAL);
  HAL_UART_Receive_IT(&huart2, &ValSerial, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4908      	ldr	r1, [pc, #32]	@ (8000f34 <main+0x5c>)
 8000f12:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <main+0x60>)
 8000f14:	f003 fbaf 	bl	8004676 <HAL_UART_Receive_IT>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8000f18:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <main+0x58>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	bf00      	nop
 8000f24:	e7fd      	b.n	8000f22 <main+0x4a>
 8000f26:	bf00      	nop
 8000f28:	20000260 	.word	0x20000260
 8000f2c:	200002a8 	.word	0x200002a8
 8000f30:	20000218 	.word	0x20000218
 8000f34:	200003b4 	.word	0x200003b4
 8000f38:	200002f0 	.word	0x200002f0

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2234      	movs	r2, #52	@ 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 f89f 	bl	800608e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <SystemClock_Config+0xd4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a29      	ldr	r2, [pc, #164]	@ (8001010 <SystemClock_Config+0xd4>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <SystemClock_Config+0xd4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <SystemClock_Config+0xd8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f88:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <SystemClock_Config+0xd8>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <SystemClock_Config+0xd8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fb8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fc6c 	bl	80028a8 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fd6:	f000 facd 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 f90c 	bl	8002214 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001002:	f000 fab7 	bl	8001574 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	@ 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_TIM4_Init+0xe8>)
 800104a:	4a2e      	ldr	r2, [pc, #184]	@ (8001104 <MX_TIM4_Init+0xec>)
 800104c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_TIM4_Init+0xe8>)
 8001050:	f240 3247 	movw	r2, #839	@ 0x347
 8001054:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_TIM4_Init+0xe8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <MX_TIM4_Init+0xe8>)
 800105e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_TIM4_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <MX_TIM4_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001070:	4823      	ldr	r0, [pc, #140]	@ (8001100 <MX_TIM4_Init+0xe8>)
 8001072:	f001 feb7 	bl	8002de4 <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800107c:	f000 fa7a 	bl	8001574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108a:	4619      	mov	r1, r3
 800108c:	481c      	ldr	r0, [pc, #112]	@ (8001100 <MX_TIM4_Init+0xe8>)
 800108e:	f002 fc5b 	bl	8003948 <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001098:	f000 fa6c 	bl	8001574 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800109c:	4818      	ldr	r0, [pc, #96]	@ (8001100 <MX_TIM4_Init+0xe8>)
 800109e:	f001 ff61 	bl	8002f64 <HAL_TIM_PWM_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80010a8:	f000 fa64 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4619      	mov	r1, r3
 80010ba:	4811      	ldr	r0, [pc, #68]	@ (8001100 <MX_TIM4_Init+0xe8>)
 80010bc:	f003 f970 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010c6:	f000 fa55 	bl	8001574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ca:	2360      	movs	r3, #96	@ 0x60
 80010cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80010ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM4_Init+0xe8>)
 80010e4:	f002 fb6e 	bl	80037c4 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80010ee:	f000 fa41 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM4_Init+0xe8>)
 80010f4:	f000 faf0 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3738      	adds	r7, #56	@ 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000218 	.word	0x20000218
 8001104:	40000800 	.word	0x40000800

08001108 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001132:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 8001134:	4a2c      	ldr	r2, [pc, #176]	@ (80011e8 <MX_TIM5_Init+0xe0>)
 8001136:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001138:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 800113a:	2253      	movs	r2, #83	@ 0x53
 800113c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 800114e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001152:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800115a:	4822      	ldr	r0, [pc, #136]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 800115c:	f001 fe42 	bl	8002de4 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001166:	f000 fa05 	bl	8001574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4619      	mov	r1, r3
 8001176:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 8001178:	f002 fbe6 	bl	8003948 <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001182:	f000 f9f7 	bl	8001574 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001186:	4817      	ldr	r0, [pc, #92]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 8001188:	f002 f80e 	bl	80031a8 <HAL_TIM_IC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001192:	f000 f9ef 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 80011a6:	f003 f8fb 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80011b0:	f000 f9e0 	bl	8001574 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011b4:	230a      	movs	r3, #10
 80011b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2204      	movs	r2, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_TIM5_Init+0xdc>)
 80011cc:	f002 fa5e 	bl	800368c <HAL_TIM_IC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80011d6:	f000 f9cd 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000260 	.word	0x20000260
 80011e8:	40000c00 	.word	0x40000c00

080011ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_TIM10_Init+0x40>)
 80011f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001230 <MX_TIM10_Init+0x44>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4199;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <MX_TIM10_Init+0x40>)
 80011f8:	f241 0267 	movw	r2, #4199	@ 0x1067
 80011fc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <MX_TIM10_Init+0x40>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_TIM10_Init+0x40>)
 8001206:	f242 720f 	movw	r2, #9999	@ 0x270f
 800120a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <MX_TIM10_Init+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_TIM10_Init+0x40>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <MX_TIM10_Init+0x40>)
 800121a:	f001 fde3 	bl	8002de4 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001224:	f000 f9a6 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002a8 	.word	0x200002a8
 8001230:	40014400 	.word	0x40014400

08001234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_USART2_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_USART2_UART_Init+0x4c>)
 800126c:	f003 f928 	bl	80044c0 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f000 f97d 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200002f0 	.word	0x200002f0
 8001284:	40004400 	.word	0x40004400

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_GPIO_Init+0xd0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2120      	movs	r1, #32
 8001312:	4812      	ldr	r0, [pc, #72]	@ (800135c <MX_GPIO_Init+0xd4>)
 8001314:	f000 ff64 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800131e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480c      	ldr	r0, [pc, #48]	@ (8001360 <MX_GPIO_Init+0xd8>)
 8001330:	f000 fdc2 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001334:	2320      	movs	r3, #32
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_GPIO_Init+0xd4>)
 800134c:	f000 fdb4 	bl	8001eb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020800 	.word	0x40020800

08001364 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief Calcula o periodo do sinal
 * @param Handler do timer que chamou o callback
 * @attention None
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ 				 // IT do Input Capture
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	do{ 																 // como os valores inniciam com zero em borda é preciso usaro do while
		borda[subida] = borda[descida];									 // trocando os valores de lugar
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a29      	ldr	r2, [pc, #164]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001372:	6013      	str	r3, [r2, #0]
		borda[descida] = borda[atual];
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a27      	ldr	r2, [pc, #156]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800137a:	6053      	str	r3, [r2, #4]
		borda[atual] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);  	 // pegando a borda atuual
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
		periodo = borda[atual] - borda[subida];
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001392:	ed93 7a02 	vldr	s14, [r3, #8]
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]

		float Periodo_Em_Segundos = periodo/1000000.0; 				 //nescessario para calcular a frequencia 1/s
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001420 <HAL_TIM_IC_CaptureCallback+0xbc>
 80013b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b4:	edc7 7a03 	vstr	s15, [r7, #12]
		frequencia = 1.00/Periodo_Em_Segundos; 							 //frequuencia em hz's
 80013b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]

		//Duty Cycle= T on / (T on +T off ) * 100
		DutyCicle_OUT = ((borda[descida] - borda[subida])/periodo) * 100;// periodo ativo do sinal
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80013cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001428 <HAL_TIM_IC_CaptureCallback+0xc4>
 80013e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]
	}while(borda[atual] < borda[subida]);								 //  Caso o tempo do contador se esgote
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80013f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d4b1      	bmi.n	800136c <HAL_TIM_IC_CaptureCallback+0x8>


}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000033c 	.word	0x2000033c
 800141c:	20000338 	.word	0x20000338
 8001420:	49742400 	.word	0x49742400
 8001424:	200003ac 	.word	0x200003ac
 8001428:	42c80000 	.word	0x42c80000
 800142c:	200003b0 	.word	0x200003b0

08001430 <HAL_TIM_PeriodElapsedCallback>:
 * @param None
 * @retval None
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001434:	b08a      	sub	sp, #40	@ 0x28
 8001436:	af08      	add	r7, sp, #32
 8001438:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a31      	ldr	r2, [pc, #196]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d159      	bne.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{
		if(ValSerial == 0){
 8001444:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10b      	bne.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x34>
			periodo = 0;
 800144c:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
			frequencia = 0;
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
			DutyCicle_OUT = 0;
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
		}
		RPM = (frequencia * MIN)/2.0;
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f88d 	bl	8000588 <__aeabi_f2d>
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001474:	f7ff f8e0 	bl	8000638 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001488:	f7ff fa00 	bl	800088c <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb80 	bl	8000b98 <__aeabi_d2iz>
 8001498:	4603      	mov	r3, r0
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800149c:	6013      	str	r3, [r2, #0]
		//Enviando a mensagem por JSON para conseguir filtrar as variaveis no cube monitor
		snprintf(msg, msgSIZE, "{ \"periodo\": %.2f ,\"duty\": %.1f, \"frequencia\": %.2f, \"RPM\": %i } \n", periodo,DutyCicle_OUT, frequencia, RPM);
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f870 	bl	8000588 <__aeabi_f2d>
 80014a8:	4604      	mov	r4, r0
 80014aa:	460d      	mov	r5, r1
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f869 	bl	8000588 <__aeabi_f2d>
 80014b6:	4680      	mov	r8, r0
 80014b8:	4689      	mov	r9, r1
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f862 	bl	8000588 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4914      	ldr	r1, [pc, #80]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80014ca:	6809      	ldr	r1, [r1, #0]
 80014cc:	9106      	str	r1, [sp, #24]
 80014ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014d6:	e9cd 4500 	strd	r4, r5, [sp]
 80014da:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014dc:	2164      	movs	r1, #100	@ 0x64
 80014de:	4811      	ldr	r0, [pc, #68]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80014e0:	f004 fd5e 	bl	8005fa0 <sniprintf>
		HAL_UART_Transmit(&huart2, msg, strlen(msg), TIMEOUT_SERIAL);
 80014e4:	480f      	ldr	r0, [pc, #60]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80014e6:	f7fe fee3 	bl	80002b0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	2364      	movs	r3, #100	@ 0x64
 80014f0:	490c      	ldr	r1, [pc, #48]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80014f2:	480d      	ldr	r0, [pc, #52]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80014f4:	f003 f834 	bl	8004560 <HAL_UART_Transmit>
	}

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001502:	bf00      	nop
 8001504:	40014400 	.word	0x40014400
 8001508:	200003b4 	.word	0x200003b4
 800150c:	20000338 	.word	0x20000338
 8001510:	200003ac 	.word	0x200003ac
 8001514:	200003b0 	.word	0x200003b0
 8001518:	404e0000 	.word	0x404e0000
 800151c:	200003b8 	.word	0x200003b8
 8001520:	08008238 	.word	0x08008238
 8001524:	20000348 	.word	0x20000348
 8001528:	200002f0 	.word	0x200002f0

0800152c <HAL_UART_RxCpltCallback>:
 * @param Valor dado pelo usuário na serial: ValSerial
 * @retval None
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	ValSerial = ValSerial-'0'; 											   // Tirando o 'offset' de char recebido pela serial
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_UART_RxCpltCallback+0x38>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3b30      	subs	r3, #48	@ 0x30
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_UART_RxCpltCallback+0x38>)
 800153e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DutyCicle_IN[ValSerial]); // setando DT do PWM
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_UART_RxCpltCallback+0x38>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_UART_RxCpltCallback+0x3c>)
 8001548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_UART_RxCpltCallback+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_UART_Receive_IT(&huart2, &ValSerial, 1);
 8001552:	2201      	movs	r2, #1
 8001554:	4903      	ldr	r1, [pc, #12]	@ (8001564 <HAL_UART_RxCpltCallback+0x38>)
 8001556:	4806      	ldr	r0, [pc, #24]	@ (8001570 <HAL_UART_RxCpltCallback+0x44>)
 8001558:	f003 f88d 	bl	8004676 <HAL_UART_Receive_IT>

}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200003b4 	.word	0x200003b4
 8001568:	20000000 	.word	0x20000000
 800156c:	20000218 	.word	0x20000218
 8001570:	200002f0 	.word	0x200002f0

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015be:	2007      	movs	r0, #7
 80015c0:	f000 fba6 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a35      	ldr	r2, [pc, #212]	@ (80016c4 <HAL_TIM_Base_MspInit+0xf4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10e      	bne.n	8001610 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a33      	ldr	r2, [pc, #204]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800160e:	e054      	b.n	80016ba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2d      	ldr	r2, [pc, #180]	@ (80016cc <HAL_TIM_Base_MspInit+0xfc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d134      	bne.n	8001684 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001652:	2302      	movs	r3, #2
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001662:	2302      	movs	r3, #2
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4818      	ldr	r0, [pc, #96]	@ (80016d0 <HAL_TIM_Base_MspInit+0x100>)
 800166e:	f000 fc23 	bl	8001eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2032      	movs	r0, #50	@ 0x32
 8001678:	f000 fb55 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800167c:	2032      	movs	r0, #50	@ 0x32
 800167e:	f000 fb6e 	bl	8001d5e <HAL_NVIC_EnableIRQ>
}
 8001682:	e01a      	b.n	80016ba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM10)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <HAL_TIM_Base_MspInit+0x104>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d115      	bne.n	80016ba <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_TIM_Base_MspInit+0xf8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2019      	movs	r0, #25
 80016b0:	f000 fb39 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016b4:	2019      	movs	r0, #25
 80016b6:	f000 fb52 	bl	8001d5e <HAL_NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40000c00 	.word	0x40000c00
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40014400 	.word	0x40014400

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <HAL_TIM_MspPostInit+0x68>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11d      	bne.n	8001736 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001716:	2340      	movs	r3, #64	@ 0x40
 8001718:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_TIM_MspPostInit+0x70>)
 8001732:	f000 fbc1 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40000800 	.word	0x40000800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <HAL_UART_MspInit+0x94>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d133      	bne.n	80017d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <HAL_UART_MspInit+0x98>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a1b      	ldr	r2, [pc, #108]	@ (80017e4 <HAL_UART_MspInit+0x98>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_UART_MspInit+0x98>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_UART_MspInit+0x98>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <HAL_UART_MspInit+0x98>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_UART_MspInit+0x98>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017a6:	230c      	movs	r3, #12
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b6:	2307      	movs	r3, #7
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <HAL_UART_MspInit+0x9c>)
 80017c2:	f000 fb79 	bl	8001eb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2026      	movs	r0, #38	@ 0x26
 80017cc:	f000 faab 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d0:	2026      	movs	r0, #38	@ 0x26
 80017d2:	f000 fac4 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f975 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001852:	f001 fe2b 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200002a8 	.word	0x200002a8

08001860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <USART2_IRQHandler+0x10>)
 8001866:	f002 ff2b 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002f0 	.word	0x200002f0

08001874 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <TIM5_IRQHandler+0x10>)
 800187a:	f001 fe17 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000260 	.word	0x20000260

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a2:	f004 fc47 	bl	8006134 <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ca:	bf00      	nop
 80018cc:	e7fd      	b.n	80018ca <_exit+0x12>

080018ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e00a      	b.n	80018f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e0:	f3af 8000 	nop.w
 80018e4:	4601      	mov	r1, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf0      	blt.n	80018e0 <_read+0x12>
  }

  return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e009      	b.n	800192e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	60ba      	str	r2, [r7, #8]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbf1      	blt.n	800191a <_write+0x12>
  }
  return len;
 8001936:	687b      	ldr	r3, [r7, #4]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_close>:

int _close(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001968:	605a      	str	r2, [r3, #4]
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_isatty>:

int _isatty(int file)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f004 fbac 	bl	8006134 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20020000 	.word	0x20020000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	200003bc 	.word	0x200003bc
 8001a10:	20000510 	.word	0x20000510

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a3c:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a3e:	490e      	ldr	r1, [pc, #56]	@ (8001a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a40:	4a0e      	ldr	r2, [pc, #56]	@ (8001a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a54:	4c0b      	ldr	r4, [pc, #44]	@ (8001a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a62:	f7ff ffd7 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f004 fb6b 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7ff fa35 	bl	8000ed8 <main>
  bx  lr    
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001a7c:	08008618 	.word	0x08008618
  ldr r2, =_sbss
 8001a80:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001a84:	20000510 	.word	0x20000510

08001a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <HAL_Init+0x40>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_Init+0x40>)
 8001aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_Init+0x40>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 f92b 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f808 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff fd5e 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f943 	bl	8001d7a <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 f90b 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000028 	.word	0x20000028
 8001b28:	20000030 	.word	0x20000030
 8001b2c:	2000002c 	.word	0x2000002c

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000030 	.word	0x20000030
 8001b54:	200003c0 	.word	0x200003c0

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200003c0 	.word	0x200003c0

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff3e 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff8e 	bl	8001c64 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff31 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa2 	bl	8001ccc <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff feda 	bl	8001b58 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2280      	movs	r2, #128	@ 0x80
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e052      	b.n	8001e6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0216 	bic.w	r2, r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_DMA_Abort+0x62>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e14:	e013      	b.n	8001e3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e16:	f7ff fe9f 	bl	8001b58 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d90c      	bls.n	8001e3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e015      	b.n	8001e6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e4      	bne.n	8001e16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	223f      	movs	r2, #63	@ 0x3f
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e00c      	b.n	8001eaa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e165      	b.n	80021a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 8154 	bne.w	800219a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d130      	bne.n	8001f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ae 	beq.w	800219a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b5d      	ldr	r3, [pc, #372]	@ (80021b8 <HAL_GPIO_Init+0x300>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a5c      	ldr	r2, [pc, #368]	@ (80021b8 <HAL_GPIO_Init+0x300>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
 800204e:	4b5a      	ldr	r3, [pc, #360]	@ (80021b8 <HAL_GPIO_Init+0x300>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205a:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <HAL_GPIO_Init+0x304>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	@ (80021c0 <HAL_GPIO_Init+0x308>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	@ (80021c4 <HAL_GPIO_Init+0x30c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	@ (80021c8 <HAL_GPIO_Init+0x310>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	@ (80021cc <HAL_GPIO_Init+0x314>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	@ (80021d0 <HAL_GPIO_Init+0x318>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x20a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	@ (80021d4 <HAL_GPIO_Init+0x31c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x206>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a49      	ldr	r2, [pc, #292]	@ (80021d8 <HAL_GPIO_Init+0x320>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x202>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00c      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020ba:	2307      	movs	r3, #7
 80020bc:	e00a      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020be:	2305      	movs	r3, #5
 80020c0:	e008      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020c2:	2304      	movs	r3, #4
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020d2:	2300      	movs	r3, #0
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4093      	lsls	r3, r2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e4:	4935      	ldr	r1, [pc, #212]	@ (80021bc <HAL_GPIO_Init+0x304>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <HAL_GPIO_Init+0x324>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a31      	ldr	r2, [pc, #196]	@ (80021dc <HAL_GPIO_Init+0x324>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b2f      	ldr	r3, [pc, #188]	@ (80021dc <HAL_GPIO_Init+0x324>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <HAL_GPIO_Init+0x324>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002146:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <HAL_GPIO_Init+0x324>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_GPIO_Init+0x324>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_GPIO_Init+0x324>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_GPIO_Init+0x324>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f67f ae96 	bls.w	8001ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3724      	adds	r7, #36	@ 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40013c00 	.word	0x40013c00

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0cc      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d90c      	bls.n	8002250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b65      	ldr	r3, [pc, #404]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b63      	ldr	r3, [pc, #396]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a58      	ldr	r2, [pc, #352]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002280:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800228a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b50      	ldr	r3, [pc, #320]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d044      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b3f      	ldr	r3, [pc, #252]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e067      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b37      	ldr	r3, [pc, #220]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4934      	ldr	r1, [pc, #208]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7ff fc28 	bl	8001b58 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7ff fc24 	bl	8001b58 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e04f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d20c      	bcs.n	800235c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239a:	f000 f855 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	490a      	ldr	r1, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb88 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00
 80023d0:	40023800 	.word	0x40023800
 80023d4:	0800827c 	.word	0x0800827c
 80023d8:	20000028 	.word	0x20000028
 80023dc:	2000002c 	.word	0x2000002c

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000028 	.word	0x20000028

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	@ (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	0800828c 	.word	0x0800828c

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffdc 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	0b5b      	lsrs	r3, r3, #13
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	@ (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	0800828c 	.word	0x0800828c

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800244c:	b0ae      	sub	sp, #184	@ 0xb8
 800244e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246e:	4bcb      	ldr	r3, [pc, #812]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b0c      	cmp	r3, #12
 8002478:	f200 8206 	bhi.w	8002888 <HAL_RCC_GetSysClockFreq+0x440>
 800247c:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <HAL_RCC_GetSysClockFreq+0x3c>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	080024b9 	.word	0x080024b9
 8002488:	08002889 	.word	0x08002889
 800248c:	08002889 	.word	0x08002889
 8002490:	08002889 	.word	0x08002889
 8002494:	080024c1 	.word	0x080024c1
 8002498:	08002889 	.word	0x08002889
 800249c:	08002889 	.word	0x08002889
 80024a0:	08002889 	.word	0x08002889
 80024a4:	080024c9 	.word	0x080024c9
 80024a8:	08002889 	.word	0x08002889
 80024ac:	08002889 	.word	0x08002889
 80024b0:	08002889 	.word	0x08002889
 80024b4:	080026b9 	.word	0x080026b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4bb9      	ldr	r3, [pc, #740]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80024ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80024be:	e1e7      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4bb8      	ldr	r3, [pc, #736]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024c6:	e1e3      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4bb4      	ldr	r3, [pc, #720]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d4:	4bb1      	ldr	r3, [pc, #708]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d071      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e0:	4bae      	ldr	r3, [pc, #696]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	2200      	movs	r2, #0
 80024e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80024f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002506:	4622      	mov	r2, r4
 8002508:	462b      	mov	r3, r5
 800250a:	f04f 0000 	mov.w	r0, #0
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002518:	0150      	lsls	r0, r2, #5
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4621      	mov	r1, r4
 8002520:	1a51      	subs	r1, r2, r1
 8002522:	6439      	str	r1, [r7, #64]	@ 0x40
 8002524:	4629      	mov	r1, r5
 8002526:	eb63 0301 	sbc.w	r3, r3, r1
 800252a:	647b      	str	r3, [r7, #68]	@ 0x44
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002538:	4649      	mov	r1, r9
 800253a:	018b      	lsls	r3, r1, #6
 800253c:	4641      	mov	r1, r8
 800253e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002542:	4641      	mov	r1, r8
 8002544:	018a      	lsls	r2, r1, #6
 8002546:	4641      	mov	r1, r8
 8002548:	1a51      	subs	r1, r2, r1
 800254a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800254c:	4649      	mov	r1, r9
 800254e:	eb63 0301 	sbc.w	r3, r3, r1
 8002552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002560:	4649      	mov	r1, r9
 8002562:	00cb      	lsls	r3, r1, #3
 8002564:	4641      	mov	r1, r8
 8002566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800256a:	4641      	mov	r1, r8
 800256c:	00ca      	lsls	r2, r1, #3
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	4603      	mov	r3, r0
 8002574:	4622      	mov	r2, r4
 8002576:	189b      	adds	r3, r3, r2
 8002578:	633b      	str	r3, [r7, #48]	@ 0x30
 800257a:	462b      	mov	r3, r5
 800257c:	460a      	mov	r2, r1
 800257e:	eb42 0303 	adc.w	r3, r2, r3
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002590:	4629      	mov	r1, r5
 8002592:	024b      	lsls	r3, r1, #9
 8002594:	4621      	mov	r1, r4
 8002596:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800259a:	4621      	mov	r1, r4
 800259c:	024a      	lsls	r2, r1, #9
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80025b4:	f7fe fb18 	bl	8000be8 <__aeabi_uldivmod>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4613      	mov	r3, r2
 80025be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025c2:	e067      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b75      	ldr	r3, [pc, #468]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80025d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025de:	2300      	movs	r3, #0
 80025e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4621      	mov	r1, r4
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002604:	4629      	mov	r1, r5
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002618:	4649      	mov	r1, r9
 800261a:	018b      	lsls	r3, r1, #6
 800261c:	4641      	mov	r1, r8
 800261e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002622:	4641      	mov	r1, r8
 8002624:	018a      	lsls	r2, r1, #6
 8002626:	4641      	mov	r1, r8
 8002628:	ebb2 0a01 	subs.w	sl, r2, r1
 800262c:	4649      	mov	r1, r9
 800262e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800263e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002646:	4692      	mov	sl, r2
 8002648:	469b      	mov	fp, r3
 800264a:	4623      	mov	r3, r4
 800264c:	eb1a 0303 	adds.w	r3, sl, r3
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	462b      	mov	r3, r5
 8002654:	eb4b 0303 	adc.w	r3, fp, r3
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002666:	4629      	mov	r1, r5
 8002668:	028b      	lsls	r3, r1, #10
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002670:	4621      	mov	r1, r4
 8002672:	028a      	lsls	r2, r1, #10
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800267c:	2200      	movs	r2, #0
 800267e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002680:	677a      	str	r2, [r7, #116]	@ 0x74
 8002682:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002686:	f7fe faaf 	bl	8000be8 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4613      	mov	r3, r2
 8002690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002694:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80026a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026b6:	e0eb      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b38      	ldr	r3, [pc, #224]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c4:	4b35      	ldr	r3, [pc, #212]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d06b      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d0:	4b32      	ldr	r3, [pc, #200]	@ (800279c <HAL_RCC_GetSysClockFreq+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	2200      	movs	r2, #0
 80026d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80026e4:	2300      	movs	r3, #0
 80026e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80026e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80026ec:	4622      	mov	r2, r4
 80026ee:	462b      	mov	r3, r5
 80026f0:	f04f 0000 	mov.w	r0, #0
 80026f4:	f04f 0100 	mov.w	r1, #0
 80026f8:	0159      	lsls	r1, r3, #5
 80026fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fe:	0150      	lsls	r0, r2, #5
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4621      	mov	r1, r4
 8002706:	1a51      	subs	r1, r2, r1
 8002708:	61b9      	str	r1, [r7, #24]
 800270a:	4629      	mov	r1, r5
 800270c:	eb63 0301 	sbc.w	r3, r3, r1
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800271e:	4659      	mov	r1, fp
 8002720:	018b      	lsls	r3, r1, #6
 8002722:	4651      	mov	r1, sl
 8002724:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002728:	4651      	mov	r1, sl
 800272a:	018a      	lsls	r2, r1, #6
 800272c:	4651      	mov	r1, sl
 800272e:	ebb2 0801 	subs.w	r8, r2, r1
 8002732:	4659      	mov	r1, fp
 8002734:	eb63 0901 	sbc.w	r9, r3, r1
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002744:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002748:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274c:	4690      	mov	r8, r2
 800274e:	4699      	mov	r9, r3
 8002750:	4623      	mov	r3, r4
 8002752:	eb18 0303 	adds.w	r3, r8, r3
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	462b      	mov	r3, r5
 800275a:	eb49 0303 	adc.w	r3, r9, r3
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800276c:	4629      	mov	r1, r5
 800276e:	024b      	lsls	r3, r1, #9
 8002770:	4621      	mov	r1, r4
 8002772:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002776:	4621      	mov	r1, r4
 8002778:	024a      	lsls	r2, r1, #9
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002782:	2200      	movs	r2, #0
 8002784:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002786:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002788:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800278c:	f7fe fa2c 	bl	8000be8 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800279a:	e065      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x420>
 800279c:	40023800 	.word	0x40023800
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a8:	4b3d      	ldr	r3, [pc, #244]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	2200      	movs	r2, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	4611      	mov	r1, r2
 80027b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ba:	2300      	movs	r3, #0
 80027bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80027be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80027c2:	4642      	mov	r2, r8
 80027c4:	464b      	mov	r3, r9
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	0159      	lsls	r1, r3, #5
 80027d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d4:	0150      	lsls	r0, r2, #5
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4641      	mov	r1, r8
 80027dc:	1a51      	subs	r1, r2, r1
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	4649      	mov	r1, r9
 80027e2:	eb63 0301 	sbc.w	r3, r3, r1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027f4:	4659      	mov	r1, fp
 80027f6:	018b      	lsls	r3, r1, #6
 80027f8:	4651      	mov	r1, sl
 80027fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027fe:	4651      	mov	r1, sl
 8002800:	018a      	lsls	r2, r1, #6
 8002802:	4651      	mov	r1, sl
 8002804:	1a54      	subs	r4, r2, r1
 8002806:	4659      	mov	r1, fp
 8002808:	eb63 0501 	sbc.w	r5, r3, r1
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	00eb      	lsls	r3, r5, #3
 8002816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281a:	00e2      	lsls	r2, r4, #3
 800281c:	4614      	mov	r4, r2
 800281e:	461d      	mov	r5, r3
 8002820:	4643      	mov	r3, r8
 8002822:	18e3      	adds	r3, r4, r3
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	464b      	mov	r3, r9
 8002828:	eb45 0303 	adc.w	r3, r5, r3
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283a:	4629      	mov	r1, r5
 800283c:	028b      	lsls	r3, r1, #10
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002844:	4621      	mov	r1, r4
 8002846:	028a      	lsls	r2, r1, #10
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002850:	2200      	movs	r2, #0
 8002852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002854:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002856:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800285a:	f7fe f9c5 	bl	8000be8 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4613      	mov	r3, r2
 8002864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002868:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0f1b      	lsrs	r3, r3, #28
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800287a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002886:	e003      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800288e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002894:	4618      	mov	r0, r3
 8002896:	37b8      	adds	r7, #184	@ 0xb8
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	00f42400 	.word	0x00f42400

080028a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e28d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8083 	beq.w	80029ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028c8:	4b94      	ldr	r3, [pc, #592]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028d4:	4b91      	ldr	r3, [pc, #580]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028e0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b8b      	ldr	r3, [pc, #556]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d112      	bne.n	8002920 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fa:	4b88      	ldr	r3, [pc, #544]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002906:	d10b      	bne.n	8002920 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	4b84      	ldr	r3, [pc, #528]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d05b      	beq.n	80029cc <HAL_RCC_OscConfig+0x124>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d157      	bne.n	80029cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e25a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002928:	d106      	bne.n	8002938 <HAL_RCC_OscConfig+0x90>
 800292a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xcc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0xb4>
 8002942:	4b76      	ldr	r3, [pc, #472]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a75      	ldr	r2, [pc, #468]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b73      	ldr	r3, [pc, #460]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a72      	ldr	r2, [pc, #456]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xcc>
 800295c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7ff f8ec 	bl	8001b58 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff f8e8 	bl	8001b58 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	@ 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e21f      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xdc>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff f8d8 	bl	8001b58 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff f8d4 	bl	8001b58 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	@ 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e20b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b57      	ldr	r3, [pc, #348]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x104>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d06f      	beq.n	8002aba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029da:	4b50      	ldr	r3, [pc, #320]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d017      	beq.n	8002a16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029e6:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d105      	bne.n	80029fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fe:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	d11c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x186>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1d3      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4937      	ldr	r1, [pc, #220]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e03a      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4c:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_RCC_OscConfig+0x278>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7ff f881 	bl	8001b58 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7ff f87d 	bl	8001b58 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1b4      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4925      	ldr	r1, [pc, #148]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_RCC_OscConfig+0x278>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff f860 	bl	8001b58 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7ff f85c 	bl	8001b58 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e193      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d036      	beq.n	8002b34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff f840 	bl	8001b58 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff f83c 	bl	8001b58 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e173      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x234>
 8002afa:	e01b      	b.n	8002b34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7ff f829 	bl	8001b58 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e00e      	b.n	8002b28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7ff f825 	bl	8001b58 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d907      	bls.n	8002b28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e15c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470000 	.word	0x42470000
 8002b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b8a      	ldr	r3, [pc, #552]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ea      	bne.n	8002b0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8097 	beq.w	8002c70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b83      	ldr	r3, [pc, #524]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b7f      	ldr	r3, [pc, #508]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b62:	4b7c      	ldr	r3, [pc, #496]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b79      	ldr	r3, [pc, #484]	@ (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	@ (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	@ (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe ffe5 	bl	8001b58 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe ffe1 	bl	8001b58 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e118      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x31e>
 8002bb8:	4b66      	ldr	r3, [pc, #408]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	4a65      	ldr	r2, [pc, #404]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x358>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x340>
 8002bce:	4b61      	ldr	r3, [pc, #388]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	4a60      	ldr	r2, [pc, #384]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bda:	4b5e      	ldr	r3, [pc, #376]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	4a5d      	ldr	r2, [pc, #372]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x358>
 8002be8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	4a59      	ldr	r2, [pc, #356]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf4:	4b57      	ldr	r3, [pc, #348]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe ffa6 	bl	8001b58 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe ffa2 	bl	8001b58 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0d7      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	4b4b      	ldr	r3, [pc, #300]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x368>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe ff90 	bl	8001b58 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe ff8c 	bl	8001b58 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0c1      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	4b40      	ldr	r3, [pc, #256]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b3b      	ldr	r3, [pc, #236]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	4a3a      	ldr	r2, [pc, #232]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ad 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7a:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d060      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d145      	bne.n	8002d1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b33      	ldr	r3, [pc, #204]	@ (8002d5c <HAL_RCC_OscConfig+0x4b4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe ff60 	bl	8001b58 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe ff5c 	bl	8001b58 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e093      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b29      	ldr	r3, [pc, #164]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	071b      	lsls	r3, r3, #28
 8002ce6:	491b      	ldr	r1, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x4b4>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe ff31 	bl	8001b58 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe ff2d 	bl	8001b58 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e064      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x452>
 8002d18:	e05c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_RCC_OscConfig+0x4b4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe ff1a 	bl	8001b58 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe ff16 	bl	8001b58 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e04d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x480>
 8002d46:	e045      	b.n	8002dd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e040      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <HAL_RCC_OscConfig+0x538>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d030      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d129      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d122      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d119      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10f      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fbe0 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fe76 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e04e      	b.n	8002f3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec6:	d01d      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1b      	ldr	r2, [pc, #108]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d010      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	e007      	b.n	8002f38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40001800 	.word	0x40001800

08002f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e041      	b.n	8002ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f839 	bl	8003002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fdb6 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start+0x24>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e022      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d109      	bne.n	8003056 <HAL_TIM_PWM_Start+0x3e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e015      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d109      	bne.n	8003070 <HAL_TIM_PWM_Start+0x58>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e008      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e07c      	b.n	8003184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0x82>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003098:	e013      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Start+0x92>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a8:	e00b      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d104      	bne.n	80030ba <HAL_TIM_PWM_Start+0xa2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b8:	e003      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f942 	bl	8004354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2d      	ldr	r2, [pc, #180]	@ (800318c <HAL_TIM_PWM_Start+0x174>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_PWM_Start+0xcc>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <HAL_TIM_PWM_Start+0x178>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_PWM_Start+0xd0>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_TIM_PWM_Start+0xd2>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a22      	ldr	r2, [pc, #136]	@ (800318c <HAL_TIM_PWM_Start+0x174>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d01d      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_TIM_PWM_Start+0x17c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_TIM_PWM_Start+0x180>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <HAL_TIM_PWM_Start+0x184>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a16      	ldr	r2, [pc, #88]	@ (8003190 <HAL_TIM_PWM_Start+0x178>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <HAL_TIM_PWM_Start+0x188>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_TIM_PWM_Start+0x18c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40010000 	.word	0x40010000
 8003190:	40010400 	.word	0x40010400
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f839 	bl	8003246 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fc94 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <HAL_TIM_IC_Start_IT+0x1e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e013      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x46>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d104      	bne.n	800328a <HAL_TIM_IC_Start_IT+0x2e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e00b      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x46>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d104      	bne.n	800329a <HAL_TIM_IC_Start_IT+0x3e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e003      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x46>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <HAL_TIM_IC_Start_IT+0x58>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e013      	b.n	80032dc <HAL_TIM_IC_Start_IT+0x80>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d104      	bne.n	80032c4 <HAL_TIM_IC_Start_IT+0x68>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e00b      	b.n	80032dc <HAL_TIM_IC_Start_IT+0x80>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d104      	bne.n	80032d4 <HAL_TIM_IC_Start_IT+0x78>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e003      	b.n	80032dc <HAL_TIM_IC_Start_IT+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d102      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e4:	7b7b      	ldrb	r3, [r7, #13]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0cc      	b.n	8003488 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xa2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032fc:	e013      	b.n	8003326 <HAL_TIM_IC_Start_IT+0xca>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0xb2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800330c:	e00b      	b.n	8003326 <HAL_TIM_IC_Start_IT+0xca>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start_IT+0xc2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800331c:	e003      	b.n	8003326 <HAL_TIM_IC_Start_IT+0xca>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_IC_Start_IT+0xda>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003334:	e013      	b.n	800335e <HAL_TIM_IC_Start_IT+0x102>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start_IT+0xea>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003344:	e00b      	b.n	800335e <HAL_TIM_IC_Start_IT+0x102>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start_IT+0xfa>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003354:	e003      	b.n	800335e <HAL_TIM_IC_Start_IT+0x102>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d841      	bhi.n	80033e8 <HAL_TIM_IC_Start_IT+0x18c>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_TIM_IC_Start_IT+0x110>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080033e9 	.word	0x080033e9
 8003374:	080033e9 	.word	0x080033e9
 8003378:	080033e9 	.word	0x080033e9
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033e9 	.word	0x080033e9
 8003384:	080033e9 	.word	0x080033e9
 8003388:	080033e9 	.word	0x080033e9
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033e9 	.word	0x080033e9
 8003394:	080033e9 	.word	0x080033e9
 8003398:	080033e9 	.word	0x080033e9
 800339c:	080033d7 	.word	0x080033d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0202 	orr.w	r2, r2, #2
 80033ae:	60da      	str	r2, [r3, #12]
      break;
 80033b0:	e01d      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0204 	orr.w	r2, r2, #4
 80033c0:	60da      	str	r2, [r3, #12]
      break;
 80033c2:	e014      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	60da      	str	r2, [r3, #12]
      break;
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0210 	orr.w	r2, r2, #16
 80033e4:	60da      	str	r2, [r3, #12]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d148      	bne.n	8003486 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 ffa9 	bl	8004354 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a22      	ldr	r2, [pc, #136]	@ (8003490 <HAL_TIM_IC_Start_IT+0x234>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d01d      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1e      	ldr	r2, [pc, #120]	@ (8003494 <HAL_TIM_IC_Start_IT+0x238>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1c      	ldr	r2, [pc, #112]	@ (8003498 <HAL_TIM_IC_Start_IT+0x23c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <HAL_TIM_IC_Start_IT+0x240>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a19      	ldr	r2, [pc, #100]	@ (80034a0 <HAL_TIM_IC_Start_IT+0x244>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a18      	ldr	r2, [pc, #96]	@ (80034a4 <HAL_TIM_IC_Start_IT+0x248>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a16      	ldr	r2, [pc, #88]	@ (80034a8 <HAL_TIM_IC_Start_IT+0x24c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40001800 	.word	0x40001800

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd ff34 	bl	8001364 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fae9 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 faf0 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd ff0e 	bl	8001364 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fac3 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 faca 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0208 	mvn.w	r2, #8
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fee8 	bl	8001364 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa9d 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 faa4 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd fec2 	bl	8001364 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa77 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa7e 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd ff0c 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 ff38 	bl	80044ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa4f 	bl	8003afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0220 	mvn.w	r2, #32
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 ff0a 	bl	8004498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e088      	b.n	80037bc <HAL_TIM_IC_ConfigChannel+0x130>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036c8:	f000 fc80 	bl	8003fcc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 020c 	bic.w	r2, r2, #12
 80036da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]
 80036ee:	e060      	b.n	80037b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d11c      	bne.n	8003730 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003706:	f000 fd04 	bl	8004112 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003718:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6999      	ldr	r1, [r3, #24]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	619a      	str	r2, [r3, #24]
 800372e:	e040      	b.n	80037b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d11b      	bne.n	800376e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003746:	f000 fd51 	bl	80041ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 020c 	bic.w	r2, r2, #12
 8003758:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
 800376c:	e021      	b.n	80037b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d11c      	bne.n	80037ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003784:	f000 fd6e 	bl	8004264 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003796:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69d9      	ldr	r1, [r3, #28]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	021a      	lsls	r2, r3, #8
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]
 80037ac:	e001      	b.n	80037b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0ae      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	f200 809f 	bhi.w	8003930 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037f2:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	0800382d 	.word	0x0800382d
 80037fc:	08003931 	.word	0x08003931
 8003800:	08003931 	.word	0x08003931
 8003804:	08003931 	.word	0x08003931
 8003808:	0800386d 	.word	0x0800386d
 800380c:	08003931 	.word	0x08003931
 8003810:	08003931 	.word	0x08003931
 8003814:	08003931 	.word	0x08003931
 8003818:	080038af 	.word	0x080038af
 800381c:	08003931 	.word	0x08003931
 8003820:	08003931 	.word	0x08003931
 8003824:	08003931 	.word	0x08003931
 8003828:	080038ef 	.word	0x080038ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fa1a 	bl	8003c6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6999      	ldr	r1, [r3, #24]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	619a      	str	r2, [r3, #24]
      break;
 800386a:	e064      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fa6a 	bl	8003d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
      break;
 80038ac:	e043      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fabf 	bl	8003e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0208 	orr.w	r2, r2, #8
 80038c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0204 	bic.w	r2, r2, #4
 80038d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69d9      	ldr	r1, [r3, #28]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	61da      	str	r2, [r3, #28]
      break;
 80038ec:	e023      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb13 	bl	8003f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
      break;
 800392e:	e002      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
      break;
 8003934:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800393e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x1c>
 8003960:	2302      	movs	r3, #2
 8003962:	e0b4      	b.n	8003ace <HAL_TIM_ConfigClockSource+0x186>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800398a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399c:	d03e      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xd4>
 800399e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a2:	f200 8087 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	f000 8086 	beq.w	8003aba <HAL_TIM_ConfigClockSource+0x172>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b2:	d87f      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b70      	cmp	r3, #112	@ 0x70
 80039b6:	d01a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0xa6>
 80039b8:	2b70      	cmp	r3, #112	@ 0x70
 80039ba:	d87b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b60      	cmp	r3, #96	@ 0x60
 80039be:	d050      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x11a>
 80039c0:	2b60      	cmp	r3, #96	@ 0x60
 80039c2:	d877      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b50      	cmp	r3, #80	@ 0x50
 80039c6:	d03c      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xfa>
 80039c8:	2b50      	cmp	r3, #80	@ 0x50
 80039ca:	d873      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	d058      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x13a>
 80039d0:	2b40      	cmp	r3, #64	@ 0x40
 80039d2:	d86f      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b30      	cmp	r3, #48	@ 0x30
 80039d6:	d064      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039d8:	2b30      	cmp	r3, #48	@ 0x30
 80039da:	d86b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d060      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d867      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d05c      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d05a      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039ec:	e062      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	f000 fc89 	bl	8004314 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	609a      	str	r2, [r3, #8]
      break;
 8003a1a:	e04f      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	f000 fc72 	bl	8004314 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a3e:	609a      	str	r2, [r3, #8]
      break;
 8003a40:	e03c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f000 fb30 	bl	80040b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2150      	movs	r1, #80	@ 0x50
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fc3f 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8003a60:	e02c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 fb8c 	bl	800418c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2160      	movs	r1, #96	@ 0x60
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fc2f 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8003a80:	e01c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fb10 	bl	80040b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2140      	movs	r1, #64	@ 0x40
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fc1f 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e00c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f000 fc16 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8003ab2:	e003      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a46      	ldr	r2, [pc, #280]	@ (8003c40 <TIM_Base_SetConfig+0x12c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b32:	d00f      	beq.n	8003b54 <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a43      	ldr	r2, [pc, #268]	@ (8003c44 <TIM_Base_SetConfig+0x130>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a42      	ldr	r2, [pc, #264]	@ (8003c48 <TIM_Base_SetConfig+0x134>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_Base_SetConfig+0x40>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a41      	ldr	r2, [pc, #260]	@ (8003c4c <TIM_Base_SetConfig+0x138>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a40      	ldr	r2, [pc, #256]	@ (8003c50 <TIM_Base_SetConfig+0x13c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d108      	bne.n	8003b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a35      	ldr	r2, [pc, #212]	@ (8003c40 <TIM_Base_SetConfig+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02b      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d027      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a32      	ldr	r2, [pc, #200]	@ (8003c44 <TIM_Base_SetConfig+0x130>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d023      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a31      	ldr	r2, [pc, #196]	@ (8003c48 <TIM_Base_SetConfig+0x134>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a30      	ldr	r2, [pc, #192]	@ (8003c4c <TIM_Base_SetConfig+0x138>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01b      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2f      	ldr	r2, [pc, #188]	@ (8003c50 <TIM_Base_SetConfig+0x13c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d017      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2e      	ldr	r2, [pc, #184]	@ (8003c54 <TIM_Base_SetConfig+0x140>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <TIM_Base_SetConfig+0x144>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00f      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c5c <TIM_Base_SetConfig+0x148>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c60 <TIM_Base_SetConfig+0x14c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c64 <TIM_Base_SetConfig+0x150>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	@ (8003c68 <TIM_Base_SetConfig+0x154>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a10      	ldr	r2, [pc, #64]	@ (8003c40 <TIM_Base_SetConfig+0x12c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_Base_SetConfig+0xf8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <TIM_Base_SetConfig+0x13c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d103      	bne.n	8003c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]
  }
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	40001800 	.word	0x40001800
 8003c64:	40001c00 	.word	0x40001c00
 8003c68:	40002000 	.word	0x40002000

08003c6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 0201 	bic.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 0302 	bic.w	r3, r3, #2
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <TIM_OC1_SetConfig+0xd8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_OC1_SetConfig+0x64>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1f      	ldr	r2, [pc, #124]	@ (8003d48 <TIM_OC1_SetConfig+0xdc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10c      	bne.n	8003cea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0308 	bic.w	r3, r3, #8
 8003cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <TIM_OC1_SetConfig+0xd8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC1_SetConfig+0x8e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	@ (8003d48 <TIM_OC1_SetConfig+0xdc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40010400 	.word	0x40010400

08003d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f023 0210 	bic.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0320 	bic.w	r3, r3, #32
 8003d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a22      	ldr	r2, [pc, #136]	@ (8003e30 <TIM_OC2_SetConfig+0xe4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_OC2_SetConfig+0x68>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a21      	ldr	r2, [pc, #132]	@ (8003e34 <TIM_OC2_SetConfig+0xe8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10d      	bne.n	8003dd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	@ (8003e30 <TIM_OC2_SetConfig+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC2_SetConfig+0x94>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <TIM_OC2_SetConfig+0xe8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d113      	bne.n	8003e08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	621a      	str	r2, [r3, #32]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40010400 	.word	0x40010400

08003e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <TIM_OC3_SetConfig+0xe0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_OC3_SetConfig+0x66>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a20      	ldr	r2, [pc, #128]	@ (8003f1c <TIM_OC3_SetConfig+0xe4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10d      	bne.n	8003eba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <TIM_OC3_SetConfig+0xe0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC3_SetConfig+0x92>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a15      	ldr	r2, [pc, #84]	@ (8003f1c <TIM_OC3_SetConfig+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d113      	bne.n	8003ef2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40010400 	.word	0x40010400

08003f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	031b      	lsls	r3, r3, #12
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <TIM_OC4_SetConfig+0xa4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC4_SetConfig+0x68>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a11      	ldr	r2, [pc, #68]	@ (8003fc8 <TIM_OC4_SetConfig+0xa8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d109      	bne.n	8003f9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40010400 	.word	0x40010400

08003fcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f023 0201 	bic.w	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a28      	ldr	r2, [pc, #160]	@ (8004098 <TIM_TI1_SetConfig+0xcc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004000:	d017      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a25      	ldr	r2, [pc, #148]	@ (800409c <TIM_TI1_SetConfig+0xd0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <TIM_TI1_SetConfig+0xd4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a23      	ldr	r2, [pc, #140]	@ (80040a4 <TIM_TI1_SetConfig+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a22      	ldr	r2, [pc, #136]	@ (80040a8 <TIM_TI1_SetConfig+0xdc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a21      	ldr	r2, [pc, #132]	@ (80040ac <TIM_TI1_SetConfig+0xe0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a20      	ldr	r2, [pc, #128]	@ (80040b0 <TIM_TI1_SetConfig+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <TIM_TI1_SetConfig+0x6a>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <TIM_TI1_SetConfig+0x6c>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e003      	b.n	8004056 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800405c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	b2db      	uxtb	r3, r3
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f023 030a 	bic.w	r3, r3, #10
 8004070:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 030a 	and.w	r3, r3, #10
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40010400 	.word	0x40010400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40001800 	.word	0x40001800

080040b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 030a 	bic.w	r3, r3, #10
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	b29b      	uxth	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	031b      	lsls	r3, r3, #12
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f023 0303 	bic.w	r3, r3, #3
 8004218:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004228:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	b2db      	uxtb	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800423c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004290:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	031b      	lsls	r3, r3, #12
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80042b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	031b      	lsls	r3, r3, #12
 80042bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f043 0307 	orr.w	r3, r3, #7
 8004300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800432e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	431a      	orrs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2201      	movs	r2, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	43db      	mvns	r3, r3
 8004376:	401a      	ands	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	431a      	orrs	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e05a      	b.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a21      	ldr	r2, [pc, #132]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d022      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d01d      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1b      	ldr	r2, [pc, #108]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1a      	ldr	r2, [pc, #104]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a18      	ldr	r2, [pc, #96]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a17      	ldr	r2, [pc, #92]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a15      	ldr	r2, [pc, #84]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10c      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4313      	orrs	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40010400 	.word	0x40010400
 8004490:	40014000 	.word	0x40014000
 8004494:	40001800 	.word	0x40001800

08004498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e042      	b.n	8004558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd f930 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	@ 0x24
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fdbd 	bl	8005084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	d175      	bne.n	800466c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Transmit+0x2c>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e06e      	b.n	800466e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	@ 0x21
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459e:	f7fd fadb 	bl	8001b58 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b8:	d108      	bne.n	80045cc <HAL_UART_Transmit+0x6c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e003      	b.n	80045d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045d4:	e02e      	b.n	8004634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	@ 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fb1f 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e03a      	b.n	800466e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3302      	adds	r3, #2
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	e007      	b.n	8004626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1cb      	bne.n	80045d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2140      	movs	r1, #64	@ 0x40
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 faeb 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	4613      	mov	r3, r2
 8004682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d112      	bne.n	80046b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Receive_IT+0x26>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e00b      	b.n	80046b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	461a      	mov	r2, r3
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fb12 	bl	8004cd6 <UART_Start_Receive_IT>
 80046b2:	4603      	mov	r3, r0
 80046b4:	e000      	b.n	80046b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0ba      	sub	sp, #232	@ 0xe8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_UART_IRQHandler+0x66>
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fbf2 	bl	8004f08 <UART_Receive_IT>
      return;
 8004724:	e25b      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80de 	beq.w	80048ec <HAL_UART_IRQHandler+0x22c>
 8004730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004740:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80d1 	beq.w	80048ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_UART_IRQHandler+0xae>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_UART_IRQHandler+0xd2>
 800477a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
 800479e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d011      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
 80047c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0208 	orr.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 81f2 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_UART_IRQHandler+0x14e>
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fb7d 	bl	8004f08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_UART_IRQHandler+0x17a>
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d04f      	beq.n	80048da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa85 	bl	8004d4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d141      	bne.n	80048d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800487a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800487e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1d9      	bne.n	800484e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa0 <HAL_UART_IRQHandler+0x3e0>)
 80048a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fadf 	bl	8001e72 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00e      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f994 	bl	8004bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00a      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f990 	bl	8004bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e006      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f98c 	bl	8004bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048e6:	e175      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	bf00      	nop
    return;
 80048ea:	e173      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	f040 814f 	bne.w	8004b94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8148 	beq.w	8004b94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8141 	beq.w	8004b94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	f040 80b6 	bne.w	8004aa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8145 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004956:	429a      	cmp	r2, r3
 8004958:	f080 813e 	bcs.w	8004bd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004962:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496e:	f000 8088 	beq.w	8004a82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800498c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800499e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1d9      	bne.n	8004972 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e1      	bne.n	80049be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd f988 	bl	8001d92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8b7 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a9e:	e09b      	b.n	8004bd8 <HAL_UART_IRQHandler+0x518>
 8004aa0:	08004e11 	.word	0x08004e11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 808e 	beq.w	8004bdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8089 	beq.w	8004bdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004aee:	647a      	str	r2, [r7, #68]	@ 0x44
 8004af0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e3      	bne.n	8004aca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	623b      	str	r3, [r7, #32]
   return(result);
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b26:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e3      	bne.n	8004b02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0310 	bic.w	r3, r3, #16
 8004b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b6c:	61fa      	str	r2, [r7, #28]
 8004b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	69b9      	ldr	r1, [r7, #24]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e3      	bne.n	8004b48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f83d 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b92:	e023      	b.n	8004bdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x4f4>
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f943 	bl	8004e38 <UART_Transmit_IT>
    return;
 8004bb2:	e014      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <HAL_UART_IRQHandler+0x51e>
 8004bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f983 	bl	8004ed8 <UART_EndTransmit_IT>
    return;
 8004bd2:	e004      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
    return;
 8004bd4:	bf00      	nop
 8004bd6:	e002      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
      return;
 8004bd8:	bf00      	nop
 8004bda:	e000      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
      return;
 8004bdc:	bf00      	nop
  }
}
 8004bde:	37e8      	adds	r7, #232	@ 0xe8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e03b      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d037      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc ff8b 	bl	8001b58 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e03a      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d023      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b80      	cmp	r3, #128	@ 0x80
 8004c6a:	d020      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d01d      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d116      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f857 	bl	8004d4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0b4      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	@ 0x22
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0220 	orr.w	r2, r2, #32
 8004d3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b095      	sub	sp, #84	@ 0x54
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d72:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d119      	bne.n	8004df6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004de2:	61ba      	str	r2, [r7, #24]
 8004de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e5      	bne.n	8004dc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e04:	bf00      	nop
 8004e06:	3754      	adds	r7, #84	@ 0x54
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fee4 	bl	8004bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b21      	cmp	r3, #33	@ 0x21
 8004e4a:	d13e      	bne.n	8004eca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e54:	d114      	bne.n	8004e80 <UART_Transmit_IT+0x48>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]
 8004e7e:	e008      	b.n	8004e92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6211      	str	r1, [r2, #32]
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fe73 	bl	8004be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	@ 0x30
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b22      	cmp	r3, #34	@ 0x22
 8004f1a:	f040 80ae 	bne.w	800507a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f26:	d117      	bne.n	8004f58 <UART_Receive_IT+0x50>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d113      	bne.n	8004f58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f56:	e026      	b.n	8004fa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6a:	d007      	beq.n	8004f7c <UART_Receive_IT+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <UART_Receive_IT+0x82>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e008      	b.n	8004f9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d15d      	bne.n	8005076 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0220 	bic.w	r2, r2, #32
 8004fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d135      	bne.n	800506c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	613b      	str	r3, [r7, #16]
   return(result);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f023 0310 	bic.w	r3, r3, #16
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005026:	623a      	str	r2, [r7, #32]
 8005028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	69f9      	ldr	r1, [r7, #28]
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	61bb      	str	r3, [r7, #24]
   return(result);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d10a      	bne.n	800505e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fdd1 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
 800506a:	e002      	b.n	8005072 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc fa5d 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e002      	b.n	800507c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3730      	adds	r7, #48	@ 0x30
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005088:	b0c0      	sub	sp, #256	@ 0x100
 800508a:	af00      	add	r7, sp, #0
 800508c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	68d9      	ldr	r1, [r3, #12]
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	ea40 0301 	orr.w	r3, r0, r1
 80050ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050dc:	f021 010c 	bic.w	r1, r1, #12
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050ea:	430b      	orrs	r3, r1
 80050ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fe:	6999      	ldr	r1, [r3, #24]
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	ea40 0301 	orr.w	r3, r0, r1
 800510a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b8f      	ldr	r3, [pc, #572]	@ (8005350 <UART_SetConfig+0x2cc>)
 8005114:	429a      	cmp	r2, r3
 8005116:	d005      	beq.n	8005124 <UART_SetConfig+0xa0>
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b8d      	ldr	r3, [pc, #564]	@ (8005354 <UART_SetConfig+0x2d0>)
 8005120:	429a      	cmp	r2, r3
 8005122:	d104      	bne.n	800512e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7fd f97c 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8005128:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800512c:	e003      	b.n	8005136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800512e:	f7fd f963 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8005132:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005140:	f040 810c 	bne.w	800535c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800514e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005156:	4622      	mov	r2, r4
 8005158:	462b      	mov	r3, r5
 800515a:	1891      	adds	r1, r2, r2
 800515c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800515e:	415b      	adcs	r3, r3
 8005160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005166:	4621      	mov	r1, r4
 8005168:	eb12 0801 	adds.w	r8, r2, r1
 800516c:	4629      	mov	r1, r5
 800516e:	eb43 0901 	adc.w	r9, r3, r1
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800517e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005186:	4690      	mov	r8, r2
 8005188:	4699      	mov	r9, r3
 800518a:	4623      	mov	r3, r4
 800518c:	eb18 0303 	adds.w	r3, r8, r3
 8005190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005194:	462b      	mov	r3, r5
 8005196:	eb49 0303 	adc.w	r3, r9, r3
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051b2:	460b      	mov	r3, r1
 80051b4:	18db      	adds	r3, r3, r3
 80051b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b8:	4613      	mov	r3, r2
 80051ba:	eb42 0303 	adc.w	r3, r2, r3
 80051be:	657b      	str	r3, [r7, #84]	@ 0x54
 80051c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051c8:	f7fb fd0e 	bl	8000be8 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b61      	ldr	r3, [pc, #388]	@ (8005358 <UART_SetConfig+0x2d4>)
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	011c      	lsls	r4, r3, #4
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051f4:	415b      	adcs	r3, r3
 80051f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051fc:	4641      	mov	r1, r8
 80051fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005202:	4649      	mov	r1, r9
 8005204:	eb43 0b01 	adc.w	fp, r3, r1
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800521c:	4692      	mov	sl, r2
 800521e:	469b      	mov	fp, r3
 8005220:	4643      	mov	r3, r8
 8005222:	eb1a 0303 	adds.w	r3, sl, r3
 8005226:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800522a:	464b      	mov	r3, r9
 800522c:	eb4b 0303 	adc.w	r3, fp, r3
 8005230:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005240:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005248:	460b      	mov	r3, r1
 800524a:	18db      	adds	r3, r3, r3
 800524c:	643b      	str	r3, [r7, #64]	@ 0x40
 800524e:	4613      	mov	r3, r2
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	647b      	str	r3, [r7, #68]	@ 0x44
 8005256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800525a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800525e:	f7fb fcc3 	bl	8000be8 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4611      	mov	r1, r2
 8005268:	4b3b      	ldr	r3, [pc, #236]	@ (8005358 <UART_SetConfig+0x2d4>)
 800526a:	fba3 2301 	umull	r2, r3, r3, r1
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2264      	movs	r2, #100	@ 0x64
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	1acb      	subs	r3, r1, r3
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800527e:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <UART_SetConfig+0x2d4>)
 8005280:	fba3 2302 	umull	r2, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800528c:	441c      	add	r4, r3
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005298:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800529c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052a8:	415b      	adcs	r3, r3
 80052aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052b0:	4641      	mov	r1, r8
 80052b2:	1851      	adds	r1, r2, r1
 80052b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80052b6:	4649      	mov	r1, r9
 80052b8:	414b      	adcs	r3, r1
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052c8:	4659      	mov	r1, fp
 80052ca:	00cb      	lsls	r3, r1, #3
 80052cc:	4651      	mov	r1, sl
 80052ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d2:	4651      	mov	r1, sl
 80052d4:	00ca      	lsls	r2, r1, #3
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	4642      	mov	r2, r8
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052e4:	464b      	mov	r3, r9
 80052e6:	460a      	mov	r2, r1
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005304:	460b      	mov	r3, r1
 8005306:	18db      	adds	r3, r3, r3
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530a:	4613      	mov	r3, r2
 800530c:	eb42 0303 	adc.w	r3, r2, r3
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800531a:	f7fb fc65 	bl	8000be8 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <UART_SetConfig+0x2d4>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	@ 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	3332      	adds	r3, #50	@ 0x32
 8005336:	4a08      	ldr	r2, [pc, #32]	@ (8005358 <UART_SetConfig+0x2d4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 0207 	and.w	r2, r3, #7
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4422      	add	r2, r4
 800534a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800534c:	e106      	b.n	800555c <UART_SetConfig+0x4d8>
 800534e:	bf00      	nop
 8005350:	40011000 	.word	0x40011000
 8005354:	40011400 	.word	0x40011400
 8005358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800535c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005360:	2200      	movs	r2, #0
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005366:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800536a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800536e:	4642      	mov	r2, r8
 8005370:	464b      	mov	r3, r9
 8005372:	1891      	adds	r1, r2, r2
 8005374:	6239      	str	r1, [r7, #32]
 8005376:	415b      	adcs	r3, r3
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
 800537a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800537e:	4641      	mov	r1, r8
 8005380:	1854      	adds	r4, r2, r1
 8005382:	4649      	mov	r1, r9
 8005384:	eb43 0501 	adc.w	r5, r3, r1
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	00eb      	lsls	r3, r5, #3
 8005392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005396:	00e2      	lsls	r2, r4, #3
 8005398:	4614      	mov	r4, r2
 800539a:	461d      	mov	r5, r3
 800539c:	4643      	mov	r3, r8
 800539e:	18e3      	adds	r3, r4, r3
 80053a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053a4:	464b      	mov	r3, r9
 80053a6:	eb45 0303 	adc.w	r3, r5, r3
 80053aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053ca:	4629      	mov	r1, r5
 80053cc:	008b      	lsls	r3, r1, #2
 80053ce:	4621      	mov	r1, r4
 80053d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d4:	4621      	mov	r1, r4
 80053d6:	008a      	lsls	r2, r1, #2
 80053d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053dc:	f7fb fc04 	bl	8000be8 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b60      	ldr	r3, [pc, #384]	@ (8005568 <UART_SetConfig+0x4e4>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	011c      	lsls	r4, r3, #4
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	61b9      	str	r1, [r7, #24]
 8005408:	415b      	adcs	r3, r3
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6139      	str	r1, [r7, #16]
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005444:	464b      	mov	r3, r9
 8005446:	460a      	mov	r2, r1
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800545a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005468:	4649      	mov	r1, r9
 800546a:	008b      	lsls	r3, r1, #2
 800546c:	4641      	mov	r1, r8
 800546e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005472:	4641      	mov	r1, r8
 8005474:	008a      	lsls	r2, r1, #2
 8005476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800547a:	f7fb fbb5 	bl	8000be8 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4611      	mov	r1, r2
 8005484:	4b38      	ldr	r3, [pc, #224]	@ (8005568 <UART_SetConfig+0x4e4>)
 8005486:	fba3 2301 	umull	r2, r3, r3, r1
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2264      	movs	r2, #100	@ 0x64
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	1acb      	subs	r3, r1, r3
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	3332      	adds	r3, #50	@ 0x32
 8005498:	4a33      	ldr	r2, [pc, #204]	@ (8005568 <UART_SetConfig+0x4e4>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a4:	441c      	add	r4, r3
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054aa:	2200      	movs	r2, #0
 80054ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80054ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80054b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	415b      	adcs	r3, r3
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c4:	4641      	mov	r1, r8
 80054c6:	1851      	adds	r1, r2, r1
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	4649      	mov	r1, r9
 80054cc:	414b      	adcs	r3, r1
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054dc:	4659      	mov	r1, fp
 80054de:	00cb      	lsls	r3, r1, #3
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e6:	4651      	mov	r1, sl
 80054e8:	00ca      	lsls	r2, r1, #3
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	4642      	mov	r2, r8
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054f6:	464b      	mov	r3, r9
 80054f8:	460a      	mov	r2, r1
 80054fa:	eb42 0303 	adc.w	r3, r2, r3
 80054fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	663b      	str	r3, [r7, #96]	@ 0x60
 800550a:	667a      	str	r2, [r7, #100]	@ 0x64
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005518:	4649      	mov	r1, r9
 800551a:	008b      	lsls	r3, r1, #2
 800551c:	4641      	mov	r1, r8
 800551e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005522:	4641      	mov	r1, r8
 8005524:	008a      	lsls	r2, r1, #2
 8005526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800552a:	f7fb fb5d 	bl	8000be8 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <UART_SetConfig+0x4e4>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	@ 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	3332      	adds	r3, #50	@ 0x32
 8005546:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <UART_SetConfig+0x4e4>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 020f 	and.w	r2, r3, #15
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4422      	add	r2, r4
 800555a:	609a      	str	r2, [r3, #8]
}
 800555c:	bf00      	nop
 800555e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005562:	46bd      	mov	sp, r7
 8005564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005568:	51eb851f 	.word	0x51eb851f

0800556c <__cvt>:
 800556c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005570:	ec57 6b10 	vmov	r6, r7, d0
 8005574:	2f00      	cmp	r7, #0
 8005576:	460c      	mov	r4, r1
 8005578:	4619      	mov	r1, r3
 800557a:	463b      	mov	r3, r7
 800557c:	bfbb      	ittet	lt
 800557e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005582:	461f      	movlt	r7, r3
 8005584:	2300      	movge	r3, #0
 8005586:	232d      	movlt	r3, #45	@ 0x2d
 8005588:	700b      	strb	r3, [r1, #0]
 800558a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800558c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005590:	4691      	mov	r9, r2
 8005592:	f023 0820 	bic.w	r8, r3, #32
 8005596:	bfbc      	itt	lt
 8005598:	4632      	movlt	r2, r6
 800559a:	4616      	movlt	r6, r2
 800559c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80055a0:	d005      	beq.n	80055ae <__cvt+0x42>
 80055a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80055a6:	d100      	bne.n	80055aa <__cvt+0x3e>
 80055a8:	3401      	adds	r4, #1
 80055aa:	2102      	movs	r1, #2
 80055ac:	e000      	b.n	80055b0 <__cvt+0x44>
 80055ae:	2103      	movs	r1, #3
 80055b0:	ab03      	add	r3, sp, #12
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	ab02      	add	r3, sp, #8
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	ec47 6b10 	vmov	d0, r6, r7
 80055bc:	4653      	mov	r3, sl
 80055be:	4622      	mov	r2, r4
 80055c0:	f000 fe6e 	bl	80062a0 <_dtoa_r>
 80055c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80055c8:	4605      	mov	r5, r0
 80055ca:	d119      	bne.n	8005600 <__cvt+0x94>
 80055cc:	f019 0f01 	tst.w	r9, #1
 80055d0:	d00e      	beq.n	80055f0 <__cvt+0x84>
 80055d2:	eb00 0904 	add.w	r9, r0, r4
 80055d6:	2200      	movs	r2, #0
 80055d8:	2300      	movs	r3, #0
 80055da:	4630      	mov	r0, r6
 80055dc:	4639      	mov	r1, r7
 80055de:	f7fb fa93 	bl	8000b08 <__aeabi_dcmpeq>
 80055e2:	b108      	cbz	r0, 80055e8 <__cvt+0x7c>
 80055e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80055e8:	2230      	movs	r2, #48	@ 0x30
 80055ea:	9b03      	ldr	r3, [sp, #12]
 80055ec:	454b      	cmp	r3, r9
 80055ee:	d31e      	bcc.n	800562e <__cvt+0xc2>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80055f4:	1b5b      	subs	r3, r3, r5
 80055f6:	4628      	mov	r0, r5
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	b004      	add	sp, #16
 80055fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005600:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005604:	eb00 0904 	add.w	r9, r0, r4
 8005608:	d1e5      	bne.n	80055d6 <__cvt+0x6a>
 800560a:	7803      	ldrb	r3, [r0, #0]
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d10a      	bne.n	8005626 <__cvt+0xba>
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb fa76 	bl	8000b08 <__aeabi_dcmpeq>
 800561c:	b918      	cbnz	r0, 8005626 <__cvt+0xba>
 800561e:	f1c4 0401 	rsb	r4, r4, #1
 8005622:	f8ca 4000 	str.w	r4, [sl]
 8005626:	f8da 3000 	ldr.w	r3, [sl]
 800562a:	4499      	add	r9, r3
 800562c:	e7d3      	b.n	80055d6 <__cvt+0x6a>
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	9103      	str	r1, [sp, #12]
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e7d9      	b.n	80055ea <__cvt+0x7e>

08005636 <__exponent>:
 8005636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005638:	2900      	cmp	r1, #0
 800563a:	bfba      	itte	lt
 800563c:	4249      	neglt	r1, r1
 800563e:	232d      	movlt	r3, #45	@ 0x2d
 8005640:	232b      	movge	r3, #43	@ 0x2b
 8005642:	2909      	cmp	r1, #9
 8005644:	7002      	strb	r2, [r0, #0]
 8005646:	7043      	strb	r3, [r0, #1]
 8005648:	dd29      	ble.n	800569e <__exponent+0x68>
 800564a:	f10d 0307 	add.w	r3, sp, #7
 800564e:	461d      	mov	r5, r3
 8005650:	270a      	movs	r7, #10
 8005652:	461a      	mov	r2, r3
 8005654:	fbb1 f6f7 	udiv	r6, r1, r7
 8005658:	fb07 1416 	mls	r4, r7, r6, r1
 800565c:	3430      	adds	r4, #48	@ 0x30
 800565e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005662:	460c      	mov	r4, r1
 8005664:	2c63      	cmp	r4, #99	@ 0x63
 8005666:	f103 33ff 	add.w	r3, r3, #4294967295
 800566a:	4631      	mov	r1, r6
 800566c:	dcf1      	bgt.n	8005652 <__exponent+0x1c>
 800566e:	3130      	adds	r1, #48	@ 0x30
 8005670:	1e94      	subs	r4, r2, #2
 8005672:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005676:	1c41      	adds	r1, r0, #1
 8005678:	4623      	mov	r3, r4
 800567a:	42ab      	cmp	r3, r5
 800567c:	d30a      	bcc.n	8005694 <__exponent+0x5e>
 800567e:	f10d 0309 	add.w	r3, sp, #9
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	42ac      	cmp	r4, r5
 8005686:	bf88      	it	hi
 8005688:	2300      	movhi	r3, #0
 800568a:	3302      	adds	r3, #2
 800568c:	4403      	add	r3, r0
 800568e:	1a18      	subs	r0, r3, r0
 8005690:	b003      	add	sp, #12
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005694:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005698:	f801 6f01 	strb.w	r6, [r1, #1]!
 800569c:	e7ed      	b.n	800567a <__exponent+0x44>
 800569e:	2330      	movs	r3, #48	@ 0x30
 80056a0:	3130      	adds	r1, #48	@ 0x30
 80056a2:	7083      	strb	r3, [r0, #2]
 80056a4:	70c1      	strb	r1, [r0, #3]
 80056a6:	1d03      	adds	r3, r0, #4
 80056a8:	e7f1      	b.n	800568e <__exponent+0x58>
	...

080056ac <_printf_float>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	b08d      	sub	sp, #52	@ 0x34
 80056b2:	460c      	mov	r4, r1
 80056b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80056b8:	4616      	mov	r6, r2
 80056ba:	461f      	mov	r7, r3
 80056bc:	4605      	mov	r5, r0
 80056be:	f000 fcef 	bl	80060a0 <_localeconv_r>
 80056c2:	6803      	ldr	r3, [r0, #0]
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fa fdf2 	bl	80002b0 <strlen>
 80056cc:	2300      	movs	r3, #0
 80056ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	9005      	str	r0, [sp, #20]
 80056d6:	3307      	adds	r3, #7
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	f103 0208 	add.w	r2, r3, #8
 80056e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80056e4:	f8d4 b000 	ldr.w	fp, [r4]
 80056e8:	f8c8 2000 	str.w	r2, [r8]
 80056ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80056f4:	9307      	str	r3, [sp, #28]
 80056f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80056fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80056fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005702:	4b9c      	ldr	r3, [pc, #624]	@ (8005974 <_printf_float+0x2c8>)
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	f7fb fa30 	bl	8000b6c <__aeabi_dcmpun>
 800570c:	bb70      	cbnz	r0, 800576c <_printf_float+0xc0>
 800570e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005712:	4b98      	ldr	r3, [pc, #608]	@ (8005974 <_printf_float+0x2c8>)
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	f7fb fa0a 	bl	8000b30 <__aeabi_dcmple>
 800571c:	bb30      	cbnz	r0, 800576c <_printf_float+0xc0>
 800571e:	2200      	movs	r2, #0
 8005720:	2300      	movs	r3, #0
 8005722:	4640      	mov	r0, r8
 8005724:	4649      	mov	r1, r9
 8005726:	f7fb f9f9 	bl	8000b1c <__aeabi_dcmplt>
 800572a:	b110      	cbz	r0, 8005732 <_printf_float+0x86>
 800572c:	232d      	movs	r3, #45	@ 0x2d
 800572e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005732:	4a91      	ldr	r2, [pc, #580]	@ (8005978 <_printf_float+0x2cc>)
 8005734:	4b91      	ldr	r3, [pc, #580]	@ (800597c <_printf_float+0x2d0>)
 8005736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800573a:	bf94      	ite	ls
 800573c:	4690      	movls	r8, r2
 800573e:	4698      	movhi	r8, r3
 8005740:	2303      	movs	r3, #3
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	f02b 0304 	bic.w	r3, fp, #4
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	f04f 0900 	mov.w	r9, #0
 800574e:	9700      	str	r7, [sp, #0]
 8005750:	4633      	mov	r3, r6
 8005752:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 f9d2 	bl	8005b00 <_printf_common>
 800575c:	3001      	adds	r0, #1
 800575e:	f040 808d 	bne.w	800587c <_printf_float+0x1d0>
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	b00d      	add	sp, #52	@ 0x34
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fb f9fa 	bl	8000b6c <__aeabi_dcmpun>
 8005778:	b140      	cbz	r0, 800578c <_printf_float+0xe0>
 800577a:	464b      	mov	r3, r9
 800577c:	2b00      	cmp	r3, #0
 800577e:	bfbc      	itt	lt
 8005780:	232d      	movlt	r3, #45	@ 0x2d
 8005782:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005786:	4a7e      	ldr	r2, [pc, #504]	@ (8005980 <_printf_float+0x2d4>)
 8005788:	4b7e      	ldr	r3, [pc, #504]	@ (8005984 <_printf_float+0x2d8>)
 800578a:	e7d4      	b.n	8005736 <_printf_float+0x8a>
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005792:	9206      	str	r2, [sp, #24]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	d13b      	bne.n	8005810 <_printf_float+0x164>
 8005798:	2306      	movs	r3, #6
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80057a0:	2300      	movs	r3, #0
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	9303      	str	r3, [sp, #12]
 80057a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80057a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80057ac:	ab09      	add	r3, sp, #36	@ 0x24
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	ec49 8b10 	vmov	d0, r8, r9
 80057b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7ff fed6 	bl	800556c <__cvt>
 80057c0:	9b06      	ldr	r3, [sp, #24]
 80057c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057c4:	2b47      	cmp	r3, #71	@ 0x47
 80057c6:	4680      	mov	r8, r0
 80057c8:	d129      	bne.n	800581e <_printf_float+0x172>
 80057ca:	1cc8      	adds	r0, r1, #3
 80057cc:	db02      	blt.n	80057d4 <_printf_float+0x128>
 80057ce:	6863      	ldr	r3, [r4, #4]
 80057d0:	4299      	cmp	r1, r3
 80057d2:	dd41      	ble.n	8005858 <_printf_float+0x1ac>
 80057d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80057d8:	fa5f fa8a 	uxtb.w	sl, sl
 80057dc:	3901      	subs	r1, #1
 80057de:	4652      	mov	r2, sl
 80057e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80057e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80057e6:	f7ff ff26 	bl	8005636 <__exponent>
 80057ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057ec:	1813      	adds	r3, r2, r0
 80057ee:	2a01      	cmp	r2, #1
 80057f0:	4681      	mov	r9, r0
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	dc02      	bgt.n	80057fc <_printf_float+0x150>
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	07d2      	lsls	r2, r2, #31
 80057fa:	d501      	bpl.n	8005800 <_printf_float+0x154>
 80057fc:	3301      	adds	r3, #1
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0a2      	beq.n	800574e <_printf_float+0xa2>
 8005808:	232d      	movs	r3, #45	@ 0x2d
 800580a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800580e:	e79e      	b.n	800574e <_printf_float+0xa2>
 8005810:	9a06      	ldr	r2, [sp, #24]
 8005812:	2a47      	cmp	r2, #71	@ 0x47
 8005814:	d1c2      	bne.n	800579c <_printf_float+0xf0>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1c0      	bne.n	800579c <_printf_float+0xf0>
 800581a:	2301      	movs	r3, #1
 800581c:	e7bd      	b.n	800579a <_printf_float+0xee>
 800581e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005822:	d9db      	bls.n	80057dc <_printf_float+0x130>
 8005824:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005828:	d118      	bne.n	800585c <_printf_float+0x1b0>
 800582a:	2900      	cmp	r1, #0
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	dd0b      	ble.n	8005848 <_printf_float+0x19c>
 8005830:	6121      	str	r1, [r4, #16]
 8005832:	b913      	cbnz	r3, 800583a <_printf_float+0x18e>
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	07d0      	lsls	r0, r2, #31
 8005838:	d502      	bpl.n	8005840 <_printf_float+0x194>
 800583a:	3301      	adds	r3, #1
 800583c:	440b      	add	r3, r1
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005842:	f04f 0900 	mov.w	r9, #0
 8005846:	e7db      	b.n	8005800 <_printf_float+0x154>
 8005848:	b913      	cbnz	r3, 8005850 <_printf_float+0x1a4>
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	07d2      	lsls	r2, r2, #31
 800584e:	d501      	bpl.n	8005854 <_printf_float+0x1a8>
 8005850:	3302      	adds	r3, #2
 8005852:	e7f4      	b.n	800583e <_printf_float+0x192>
 8005854:	2301      	movs	r3, #1
 8005856:	e7f2      	b.n	800583e <_printf_float+0x192>
 8005858:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800585c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800585e:	4299      	cmp	r1, r3
 8005860:	db05      	blt.n	800586e <_printf_float+0x1c2>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	6121      	str	r1, [r4, #16]
 8005866:	07d8      	lsls	r0, r3, #31
 8005868:	d5ea      	bpl.n	8005840 <_printf_float+0x194>
 800586a:	1c4b      	adds	r3, r1, #1
 800586c:	e7e7      	b.n	800583e <_printf_float+0x192>
 800586e:	2900      	cmp	r1, #0
 8005870:	bfd4      	ite	le
 8005872:	f1c1 0202 	rsble	r2, r1, #2
 8005876:	2201      	movgt	r2, #1
 8005878:	4413      	add	r3, r2
 800587a:	e7e0      	b.n	800583e <_printf_float+0x192>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	055a      	lsls	r2, r3, #21
 8005880:	d407      	bmi.n	8005892 <_printf_float+0x1e6>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	4642      	mov	r2, r8
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	d12b      	bne.n	80058e8 <_printf_float+0x23c>
 8005890:	e767      	b.n	8005762 <_printf_float+0xb6>
 8005892:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005896:	f240 80dd 	bls.w	8005a54 <_printf_float+0x3a8>
 800589a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800589e:	2200      	movs	r2, #0
 80058a0:	2300      	movs	r3, #0
 80058a2:	f7fb f931 	bl	8000b08 <__aeabi_dcmpeq>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d033      	beq.n	8005912 <_printf_float+0x266>
 80058aa:	4a37      	ldr	r2, [pc, #220]	@ (8005988 <_printf_float+0x2dc>)
 80058ac:	2301      	movs	r3, #1
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	f43f af54 	beq.w	8005762 <_printf_float+0xb6>
 80058ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80058be:	4543      	cmp	r3, r8
 80058c0:	db02      	blt.n	80058c8 <_printf_float+0x21c>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	07d8      	lsls	r0, r3, #31
 80058c6:	d50f      	bpl.n	80058e8 <_printf_float+0x23c>
 80058c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058cc:	4631      	mov	r1, r6
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b8      	blx	r7
 80058d2:	3001      	adds	r0, #1
 80058d4:	f43f af45 	beq.w	8005762 <_printf_float+0xb6>
 80058d8:	f04f 0900 	mov.w	r9, #0
 80058dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80058e0:	f104 0a1a 	add.w	sl, r4, #26
 80058e4:	45c8      	cmp	r8, r9
 80058e6:	dc09      	bgt.n	80058fc <_printf_float+0x250>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	079b      	lsls	r3, r3, #30
 80058ec:	f100 8103 	bmi.w	8005af6 <_printf_float+0x44a>
 80058f0:	68e0      	ldr	r0, [r4, #12]
 80058f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058f4:	4298      	cmp	r0, r3
 80058f6:	bfb8      	it	lt
 80058f8:	4618      	movlt	r0, r3
 80058fa:	e734      	b.n	8005766 <_printf_float+0xba>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4652      	mov	r2, sl
 8005900:	4631      	mov	r1, r6
 8005902:	4628      	mov	r0, r5
 8005904:	47b8      	blx	r7
 8005906:	3001      	adds	r0, #1
 8005908:	f43f af2b 	beq.w	8005762 <_printf_float+0xb6>
 800590c:	f109 0901 	add.w	r9, r9, #1
 8005910:	e7e8      	b.n	80058e4 <_printf_float+0x238>
 8005912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	dc39      	bgt.n	800598c <_printf_float+0x2e0>
 8005918:	4a1b      	ldr	r2, [pc, #108]	@ (8005988 <_printf_float+0x2dc>)
 800591a:	2301      	movs	r3, #1
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f af1d 	beq.w	8005762 <_printf_float+0xb6>
 8005928:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800592c:	ea59 0303 	orrs.w	r3, r9, r3
 8005930:	d102      	bne.n	8005938 <_printf_float+0x28c>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	07d9      	lsls	r1, r3, #31
 8005936:	d5d7      	bpl.n	80058e8 <_printf_float+0x23c>
 8005938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f af0d 	beq.w	8005762 <_printf_float+0xb6>
 8005948:	f04f 0a00 	mov.w	sl, #0
 800594c:	f104 0b1a 	add.w	fp, r4, #26
 8005950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005952:	425b      	negs	r3, r3
 8005954:	4553      	cmp	r3, sl
 8005956:	dc01      	bgt.n	800595c <_printf_float+0x2b0>
 8005958:	464b      	mov	r3, r9
 800595a:	e793      	b.n	8005884 <_printf_float+0x1d8>
 800595c:	2301      	movs	r3, #1
 800595e:	465a      	mov	r2, fp
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f aefb 	beq.w	8005762 <_printf_float+0xb6>
 800596c:	f10a 0a01 	add.w	sl, sl, #1
 8005970:	e7ee      	b.n	8005950 <_printf_float+0x2a4>
 8005972:	bf00      	nop
 8005974:	7fefffff 	.word	0x7fefffff
 8005978:	08008294 	.word	0x08008294
 800597c:	08008298 	.word	0x08008298
 8005980:	0800829c 	.word	0x0800829c
 8005984:	080082a0 	.word	0x080082a0
 8005988:	080082a4 	.word	0x080082a4
 800598c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800598e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005992:	4553      	cmp	r3, sl
 8005994:	bfa8      	it	ge
 8005996:	4653      	movge	r3, sl
 8005998:	2b00      	cmp	r3, #0
 800599a:	4699      	mov	r9, r3
 800599c:	dc36      	bgt.n	8005a0c <_printf_float+0x360>
 800599e:	f04f 0b00 	mov.w	fp, #0
 80059a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059a6:	f104 021a 	add.w	r2, r4, #26
 80059aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059ac:	9306      	str	r3, [sp, #24]
 80059ae:	eba3 0309 	sub.w	r3, r3, r9
 80059b2:	455b      	cmp	r3, fp
 80059b4:	dc31      	bgt.n	8005a1a <_printf_float+0x36e>
 80059b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b8:	459a      	cmp	sl, r3
 80059ba:	dc3a      	bgt.n	8005a32 <_printf_float+0x386>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07da      	lsls	r2, r3, #31
 80059c0:	d437      	bmi.n	8005a32 <_printf_float+0x386>
 80059c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c4:	ebaa 0903 	sub.w	r9, sl, r3
 80059c8:	9b06      	ldr	r3, [sp, #24]
 80059ca:	ebaa 0303 	sub.w	r3, sl, r3
 80059ce:	4599      	cmp	r9, r3
 80059d0:	bfa8      	it	ge
 80059d2:	4699      	movge	r9, r3
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	dc33      	bgt.n	8005a42 <_printf_float+0x396>
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059e2:	f104 0b1a 	add.w	fp, r4, #26
 80059e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e8:	ebaa 0303 	sub.w	r3, sl, r3
 80059ec:	eba3 0309 	sub.w	r3, r3, r9
 80059f0:	4543      	cmp	r3, r8
 80059f2:	f77f af79 	ble.w	80058e8 <_printf_float+0x23c>
 80059f6:	2301      	movs	r3, #1
 80059f8:	465a      	mov	r2, fp
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f aeae 	beq.w	8005762 <_printf_float+0xb6>
 8005a06:	f108 0801 	add.w	r8, r8, #1
 8005a0a:	e7ec      	b.n	80059e6 <_printf_float+0x33a>
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	d1c2      	bne.n	800599e <_printf_float+0x2f2>
 8005a18:	e6a3      	b.n	8005762 <_printf_float+0xb6>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	9206      	str	r2, [sp, #24]
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	f43f ae9c 	beq.w	8005762 <_printf_float+0xb6>
 8005a2a:	9a06      	ldr	r2, [sp, #24]
 8005a2c:	f10b 0b01 	add.w	fp, fp, #1
 8005a30:	e7bb      	b.n	80059aa <_printf_float+0x2fe>
 8005a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a36:	4631      	mov	r1, r6
 8005a38:	4628      	mov	r0, r5
 8005a3a:	47b8      	blx	r7
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d1c0      	bne.n	80059c2 <_printf_float+0x316>
 8005a40:	e68f      	b.n	8005762 <_printf_float+0xb6>
 8005a42:	9a06      	ldr	r2, [sp, #24]
 8005a44:	464b      	mov	r3, r9
 8005a46:	4442      	add	r2, r8
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d1c3      	bne.n	80059da <_printf_float+0x32e>
 8005a52:	e686      	b.n	8005762 <_printf_float+0xb6>
 8005a54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a58:	f1ba 0f01 	cmp.w	sl, #1
 8005a5c:	dc01      	bgt.n	8005a62 <_printf_float+0x3b6>
 8005a5e:	07db      	lsls	r3, r3, #31
 8005a60:	d536      	bpl.n	8005ad0 <_printf_float+0x424>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4642      	mov	r2, r8
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f43f ae78 	beq.w	8005762 <_printf_float+0xb6>
 8005a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f ae70 	beq.w	8005762 <_printf_float+0xb6>
 8005a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a86:	2200      	movs	r2, #0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a8e:	f7fb f83b 	bl	8000b08 <__aeabi_dcmpeq>
 8005a92:	b9c0      	cbnz	r0, 8005ac6 <_printf_float+0x41a>
 8005a94:	4653      	mov	r3, sl
 8005a96:	f108 0201 	add.w	r2, r8, #1
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d10c      	bne.n	8005abe <_printf_float+0x412>
 8005aa4:	e65d      	b.n	8005762 <_printf_float+0xb6>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	465a      	mov	r2, fp
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f ae56 	beq.w	8005762 <_printf_float+0xb6>
 8005ab6:	f108 0801 	add.w	r8, r8, #1
 8005aba:	45d0      	cmp	r8, sl
 8005abc:	dbf3      	blt.n	8005aa6 <_printf_float+0x3fa>
 8005abe:	464b      	mov	r3, r9
 8005ac0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ac4:	e6df      	b.n	8005886 <_printf_float+0x1da>
 8005ac6:	f04f 0800 	mov.w	r8, #0
 8005aca:	f104 0b1a 	add.w	fp, r4, #26
 8005ace:	e7f4      	b.n	8005aba <_printf_float+0x40e>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4642      	mov	r2, r8
 8005ad4:	e7e1      	b.n	8005a9a <_printf_float+0x3ee>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	464a      	mov	r2, r9
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f ae3e 	beq.w	8005762 <_printf_float+0xb6>
 8005ae6:	f108 0801 	add.w	r8, r8, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	4543      	cmp	r3, r8
 8005af2:	dcf0      	bgt.n	8005ad6 <_printf_float+0x42a>
 8005af4:	e6fc      	b.n	80058f0 <_printf_float+0x244>
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	f104 0919 	add.w	r9, r4, #25
 8005afe:	e7f4      	b.n	8005aea <_printf_float+0x43e>

08005b00 <_printf_common>:
 8005b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	4616      	mov	r6, r2
 8005b06:	4698      	mov	r8, r3
 8005b08:	688a      	ldr	r2, [r1, #8]
 8005b0a:	690b      	ldr	r3, [r1, #16]
 8005b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bfb8      	it	lt
 8005b14:	4613      	movlt	r3, r2
 8005b16:	6033      	str	r3, [r6, #0]
 8005b18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	b10a      	cbz	r2, 8005b26 <_printf_common+0x26>
 8005b22:	3301      	adds	r3, #1
 8005b24:	6033      	str	r3, [r6, #0]
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	0699      	lsls	r1, r3, #26
 8005b2a:	bf42      	ittt	mi
 8005b2c:	6833      	ldrmi	r3, [r6, #0]
 8005b2e:	3302      	addmi	r3, #2
 8005b30:	6033      	strmi	r3, [r6, #0]
 8005b32:	6825      	ldr	r5, [r4, #0]
 8005b34:	f015 0506 	ands.w	r5, r5, #6
 8005b38:	d106      	bne.n	8005b48 <_printf_common+0x48>
 8005b3a:	f104 0a19 	add.w	sl, r4, #25
 8005b3e:	68e3      	ldr	r3, [r4, #12]
 8005b40:	6832      	ldr	r2, [r6, #0]
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	dc26      	bgt.n	8005b96 <_printf_common+0x96>
 8005b48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	3b00      	subs	r3, #0
 8005b50:	bf18      	it	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	0692      	lsls	r2, r2, #26
 8005b56:	d42b      	bmi.n	8005bb0 <_printf_common+0xb0>
 8005b58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	4638      	mov	r0, r7
 8005b60:	47c8      	blx	r9
 8005b62:	3001      	adds	r0, #1
 8005b64:	d01e      	beq.n	8005ba4 <_printf_common+0xa4>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	f003 0306 	and.w	r3, r3, #6
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	bf02      	ittt	eq
 8005b72:	68e5      	ldreq	r5, [r4, #12]
 8005b74:	6833      	ldreq	r3, [r6, #0]
 8005b76:	1aed      	subeq	r5, r5, r3
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	bf0c      	ite	eq
 8005b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b80:	2500      	movne	r5, #0
 8005b82:	4293      	cmp	r3, r2
 8005b84:	bfc4      	itt	gt
 8005b86:	1a9b      	subgt	r3, r3, r2
 8005b88:	18ed      	addgt	r5, r5, r3
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	341a      	adds	r4, #26
 8005b8e:	42b5      	cmp	r5, r6
 8005b90:	d11a      	bne.n	8005bc8 <_printf_common+0xc8>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e008      	b.n	8005ba8 <_printf_common+0xa8>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4652      	mov	r2, sl
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	47c8      	blx	r9
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d103      	bne.n	8005bac <_printf_common+0xac>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bac:	3501      	adds	r5, #1
 8005bae:	e7c6      	b.n	8005b3e <_printf_common+0x3e>
 8005bb0:	18e1      	adds	r1, r4, r3
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	2030      	movs	r0, #48	@ 0x30
 8005bb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bba:	4422      	add	r2, r4
 8005bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	e7c7      	b.n	8005b58 <_printf_common+0x58>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4622      	mov	r2, r4
 8005bcc:	4641      	mov	r1, r8
 8005bce:	4638      	mov	r0, r7
 8005bd0:	47c8      	blx	r9
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d0e6      	beq.n	8005ba4 <_printf_common+0xa4>
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7d9      	b.n	8005b8e <_printf_common+0x8e>
	...

08005bdc <_printf_i>:
 8005bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	7e0f      	ldrb	r7, [r1, #24]
 8005be2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005be4:	2f78      	cmp	r7, #120	@ 0x78
 8005be6:	4691      	mov	r9, r2
 8005be8:	4680      	mov	r8, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	469a      	mov	sl, r3
 8005bee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bf2:	d807      	bhi.n	8005c04 <_printf_i+0x28>
 8005bf4:	2f62      	cmp	r7, #98	@ 0x62
 8005bf6:	d80a      	bhi.n	8005c0e <_printf_i+0x32>
 8005bf8:	2f00      	cmp	r7, #0
 8005bfa:	f000 80d2 	beq.w	8005da2 <_printf_i+0x1c6>
 8005bfe:	2f58      	cmp	r7, #88	@ 0x58
 8005c00:	f000 80b9 	beq.w	8005d76 <_printf_i+0x19a>
 8005c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c0c:	e03a      	b.n	8005c84 <_printf_i+0xa8>
 8005c0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c12:	2b15      	cmp	r3, #21
 8005c14:	d8f6      	bhi.n	8005c04 <_printf_i+0x28>
 8005c16:	a101      	add	r1, pc, #4	@ (adr r1, 8005c1c <_printf_i+0x40>)
 8005c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c1c:	08005c75 	.word	0x08005c75
 8005c20:	08005c89 	.word	0x08005c89
 8005c24:	08005c05 	.word	0x08005c05
 8005c28:	08005c05 	.word	0x08005c05
 8005c2c:	08005c05 	.word	0x08005c05
 8005c30:	08005c05 	.word	0x08005c05
 8005c34:	08005c89 	.word	0x08005c89
 8005c38:	08005c05 	.word	0x08005c05
 8005c3c:	08005c05 	.word	0x08005c05
 8005c40:	08005c05 	.word	0x08005c05
 8005c44:	08005c05 	.word	0x08005c05
 8005c48:	08005d89 	.word	0x08005d89
 8005c4c:	08005cb3 	.word	0x08005cb3
 8005c50:	08005d43 	.word	0x08005d43
 8005c54:	08005c05 	.word	0x08005c05
 8005c58:	08005c05 	.word	0x08005c05
 8005c5c:	08005dab 	.word	0x08005dab
 8005c60:	08005c05 	.word	0x08005c05
 8005c64:	08005cb3 	.word	0x08005cb3
 8005c68:	08005c05 	.word	0x08005c05
 8005c6c:	08005c05 	.word	0x08005c05
 8005c70:	08005d4b 	.word	0x08005d4b
 8005c74:	6833      	ldr	r3, [r6, #0]
 8005c76:	1d1a      	adds	r2, r3, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6032      	str	r2, [r6, #0]
 8005c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c84:	2301      	movs	r3, #1
 8005c86:	e09d      	b.n	8005dc4 <_printf_i+0x1e8>
 8005c88:	6833      	ldr	r3, [r6, #0]
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	1d19      	adds	r1, r3, #4
 8005c8e:	6031      	str	r1, [r6, #0]
 8005c90:	0606      	lsls	r6, r0, #24
 8005c92:	d501      	bpl.n	8005c98 <_printf_i+0xbc>
 8005c94:	681d      	ldr	r5, [r3, #0]
 8005c96:	e003      	b.n	8005ca0 <_printf_i+0xc4>
 8005c98:	0645      	lsls	r5, r0, #25
 8005c9a:	d5fb      	bpl.n	8005c94 <_printf_i+0xb8>
 8005c9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	da03      	bge.n	8005cac <_printf_i+0xd0>
 8005ca4:	232d      	movs	r3, #45	@ 0x2d
 8005ca6:	426d      	negs	r5, r5
 8005ca8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cac:	4859      	ldr	r0, [pc, #356]	@ (8005e14 <_printf_i+0x238>)
 8005cae:	230a      	movs	r3, #10
 8005cb0:	e011      	b.n	8005cd6 <_printf_i+0xfa>
 8005cb2:	6821      	ldr	r1, [r4, #0]
 8005cb4:	6833      	ldr	r3, [r6, #0]
 8005cb6:	0608      	lsls	r0, r1, #24
 8005cb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cbc:	d402      	bmi.n	8005cc4 <_printf_i+0xe8>
 8005cbe:	0649      	lsls	r1, r1, #25
 8005cc0:	bf48      	it	mi
 8005cc2:	b2ad      	uxthmi	r5, r5
 8005cc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cc6:	4853      	ldr	r0, [pc, #332]	@ (8005e14 <_printf_i+0x238>)
 8005cc8:	6033      	str	r3, [r6, #0]
 8005cca:	bf14      	ite	ne
 8005ccc:	230a      	movne	r3, #10
 8005cce:	2308      	moveq	r3, #8
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cd6:	6866      	ldr	r6, [r4, #4]
 8005cd8:	60a6      	str	r6, [r4, #8]
 8005cda:	2e00      	cmp	r6, #0
 8005cdc:	bfa2      	ittt	ge
 8005cde:	6821      	ldrge	r1, [r4, #0]
 8005ce0:	f021 0104 	bicge.w	r1, r1, #4
 8005ce4:	6021      	strge	r1, [r4, #0]
 8005ce6:	b90d      	cbnz	r5, 8005cec <_printf_i+0x110>
 8005ce8:	2e00      	cmp	r6, #0
 8005cea:	d04b      	beq.n	8005d84 <_printf_i+0x1a8>
 8005cec:	4616      	mov	r6, r2
 8005cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8005cf6:	5dc7      	ldrb	r7, [r0, r7]
 8005cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cfc:	462f      	mov	r7, r5
 8005cfe:	42bb      	cmp	r3, r7
 8005d00:	460d      	mov	r5, r1
 8005d02:	d9f4      	bls.n	8005cee <_printf_i+0x112>
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d10b      	bne.n	8005d20 <_printf_i+0x144>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	07df      	lsls	r7, r3, #31
 8005d0c:	d508      	bpl.n	8005d20 <_printf_i+0x144>
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	6861      	ldr	r1, [r4, #4]
 8005d12:	4299      	cmp	r1, r3
 8005d14:	bfde      	ittt	le
 8005d16:	2330      	movle	r3, #48	@ 0x30
 8005d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d20:	1b92      	subs	r2, r2, r6
 8005d22:	6122      	str	r2, [r4, #16]
 8005d24:	f8cd a000 	str.w	sl, [sp]
 8005d28:	464b      	mov	r3, r9
 8005d2a:	aa03      	add	r2, sp, #12
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4640      	mov	r0, r8
 8005d30:	f7ff fee6 	bl	8005b00 <_printf_common>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d14a      	bne.n	8005dce <_printf_i+0x1f2>
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	b004      	add	sp, #16
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	f043 0320 	orr.w	r3, r3, #32
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	4833      	ldr	r0, [pc, #204]	@ (8005e18 <_printf_i+0x23c>)
 8005d4c:	2778      	movs	r7, #120	@ 0x78
 8005d4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	6831      	ldr	r1, [r6, #0]
 8005d56:	061f      	lsls	r7, r3, #24
 8005d58:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d5c:	d402      	bmi.n	8005d64 <_printf_i+0x188>
 8005d5e:	065f      	lsls	r7, r3, #25
 8005d60:	bf48      	it	mi
 8005d62:	b2ad      	uxthmi	r5, r5
 8005d64:	6031      	str	r1, [r6, #0]
 8005d66:	07d9      	lsls	r1, r3, #31
 8005d68:	bf44      	itt	mi
 8005d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d6e:	6023      	strmi	r3, [r4, #0]
 8005d70:	b11d      	cbz	r5, 8005d7a <_printf_i+0x19e>
 8005d72:	2310      	movs	r3, #16
 8005d74:	e7ac      	b.n	8005cd0 <_printf_i+0xf4>
 8005d76:	4827      	ldr	r0, [pc, #156]	@ (8005e14 <_printf_i+0x238>)
 8005d78:	e7e9      	b.n	8005d4e <_printf_i+0x172>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f023 0320 	bic.w	r3, r3, #32
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	e7f6      	b.n	8005d72 <_printf_i+0x196>
 8005d84:	4616      	mov	r6, r2
 8005d86:	e7bd      	b.n	8005d04 <_printf_i+0x128>
 8005d88:	6833      	ldr	r3, [r6, #0]
 8005d8a:	6825      	ldr	r5, [r4, #0]
 8005d8c:	6961      	ldr	r1, [r4, #20]
 8005d8e:	1d18      	adds	r0, r3, #4
 8005d90:	6030      	str	r0, [r6, #0]
 8005d92:	062e      	lsls	r6, r5, #24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0x1c0>
 8005d98:	6019      	str	r1, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0x1c6>
 8005d9c:	0668      	lsls	r0, r5, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0x1bc>
 8005da0:	8019      	strh	r1, [r3, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	4616      	mov	r6, r2
 8005da8:	e7bc      	b.n	8005d24 <_printf_i+0x148>
 8005daa:	6833      	ldr	r3, [r6, #0]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	6032      	str	r2, [r6, #0]
 8005db0:	681e      	ldr	r6, [r3, #0]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	2100      	movs	r1, #0
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7fa fa2a 	bl	8000210 <memchr>
 8005dbc:	b108      	cbz	r0, 8005dc2 <_printf_i+0x1e6>
 8005dbe:	1b80      	subs	r0, r0, r6
 8005dc0:	6060      	str	r0, [r4, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dcc:	e7aa      	b.n	8005d24 <_printf_i+0x148>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0ad      	beq.n	8005d38 <_printf_i+0x15c>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	079b      	lsls	r3, r3, #30
 8005de0:	d413      	bmi.n	8005e0a <_printf_i+0x22e>
 8005de2:	68e0      	ldr	r0, [r4, #12]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	4298      	cmp	r0, r3
 8005de8:	bfb8      	it	lt
 8005dea:	4618      	movlt	r0, r3
 8005dec:	e7a6      	b.n	8005d3c <_printf_i+0x160>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4632      	mov	r2, r6
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	47d0      	blx	sl
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d09d      	beq.n	8005d38 <_printf_i+0x15c>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	9903      	ldr	r1, [sp, #12]
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dcf2      	bgt.n	8005dee <_printf_i+0x212>
 8005e08:	e7eb      	b.n	8005de2 <_printf_i+0x206>
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	f104 0619 	add.w	r6, r4, #25
 8005e10:	e7f5      	b.n	8005dfe <_printf_i+0x222>
 8005e12:	bf00      	nop
 8005e14:	080082a6 	.word	0x080082a6
 8005e18:	080082b7 	.word	0x080082b7

08005e1c <std>:
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	4604      	mov	r4, r0
 8005e22:	e9c0 3300 	strd	r3, r3, [r0]
 8005e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e2a:	6083      	str	r3, [r0, #8]
 8005e2c:	8181      	strh	r1, [r0, #12]
 8005e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e30:	81c2      	strh	r2, [r0, #14]
 8005e32:	6183      	str	r3, [r0, #24]
 8005e34:	4619      	mov	r1, r3
 8005e36:	2208      	movs	r2, #8
 8005e38:	305c      	adds	r0, #92	@ 0x5c
 8005e3a:	f000 f928 	bl	800608e <memset>
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <std+0x58>)
 8005e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <std+0x5c>)
 8005e44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e46:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <std+0x60>)
 8005e48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <std+0x64>)
 8005e4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <std+0x68>)
 8005e50:	6224      	str	r4, [r4, #32]
 8005e52:	429c      	cmp	r4, r3
 8005e54:	d006      	beq.n	8005e64 <std+0x48>
 8005e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e5a:	4294      	cmp	r4, r2
 8005e5c:	d002      	beq.n	8005e64 <std+0x48>
 8005e5e:	33d0      	adds	r3, #208	@ 0xd0
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d105      	bne.n	8005e70 <std+0x54>
 8005e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6c:	f000 b98c 	b.w	8006188 <__retarget_lock_init_recursive>
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	08006009 	.word	0x08006009
 8005e78:	0800602b 	.word	0x0800602b
 8005e7c:	08006063 	.word	0x08006063
 8005e80:	08006087 	.word	0x08006087
 8005e84:	200003c4 	.word	0x200003c4

08005e88 <stdio_exit_handler>:
 8005e88:	4a02      	ldr	r2, [pc, #8]	@ (8005e94 <stdio_exit_handler+0xc>)
 8005e8a:	4903      	ldr	r1, [pc, #12]	@ (8005e98 <stdio_exit_handler+0x10>)
 8005e8c:	4803      	ldr	r0, [pc, #12]	@ (8005e9c <stdio_exit_handler+0x14>)
 8005e8e:	f000 b869 	b.w	8005f64 <_fwalk_sglue>
 8005e92:	bf00      	nop
 8005e94:	20000034 	.word	0x20000034
 8005e98:	08007ae5 	.word	0x08007ae5
 8005e9c:	20000044 	.word	0x20000044

08005ea0 <cleanup_stdio>:
 8005ea0:	6841      	ldr	r1, [r0, #4]
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <cleanup_stdio+0x34>)
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	d001      	beq.n	8005eb0 <cleanup_stdio+0x10>
 8005eac:	f001 fe1a 	bl	8007ae4 <_fflush_r>
 8005eb0:	68a1      	ldr	r1, [r4, #8]
 8005eb2:	4b09      	ldr	r3, [pc, #36]	@ (8005ed8 <cleanup_stdio+0x38>)
 8005eb4:	4299      	cmp	r1, r3
 8005eb6:	d002      	beq.n	8005ebe <cleanup_stdio+0x1e>
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f001 fe13 	bl	8007ae4 <_fflush_r>
 8005ebe:	68e1      	ldr	r1, [r4, #12]
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <cleanup_stdio+0x3c>)
 8005ec2:	4299      	cmp	r1, r3
 8005ec4:	d004      	beq.n	8005ed0 <cleanup_stdio+0x30>
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ecc:	f001 be0a 	b.w	8007ae4 <_fflush_r>
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200003c4 	.word	0x200003c4
 8005ed8:	2000042c 	.word	0x2000042c
 8005edc:	20000494 	.word	0x20000494

08005ee0 <global_stdio_init.part.0>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <global_stdio_init.part.0+0x30>)
 8005ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8005f14 <global_stdio_init.part.0+0x34>)
 8005ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8005f18 <global_stdio_init.part.0+0x38>)
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	4620      	mov	r0, r4
 8005eec:	2200      	movs	r2, #0
 8005eee:	2104      	movs	r1, #4
 8005ef0:	f7ff ff94 	bl	8005e1c <std>
 8005ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2109      	movs	r1, #9
 8005efc:	f7ff ff8e 	bl	8005e1c <std>
 8005f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f04:	2202      	movs	r2, #2
 8005f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f0a:	2112      	movs	r1, #18
 8005f0c:	f7ff bf86 	b.w	8005e1c <std>
 8005f10:	200004fc 	.word	0x200004fc
 8005f14:	200003c4 	.word	0x200003c4
 8005f18:	08005e89 	.word	0x08005e89

08005f1c <__sfp_lock_acquire>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	@ (8005f24 <__sfp_lock_acquire+0x8>)
 8005f1e:	f000 b934 	b.w	800618a <__retarget_lock_acquire_recursive>
 8005f22:	bf00      	nop
 8005f24:	20000505 	.word	0x20000505

08005f28 <__sfp_lock_release>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__sfp_lock_release+0x8>)
 8005f2a:	f000 b92f 	b.w	800618c <__retarget_lock_release_recursive>
 8005f2e:	bf00      	nop
 8005f30:	20000505 	.word	0x20000505

08005f34 <__sinit>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	4604      	mov	r4, r0
 8005f38:	f7ff fff0 	bl	8005f1c <__sfp_lock_acquire>
 8005f3c:	6a23      	ldr	r3, [r4, #32]
 8005f3e:	b11b      	cbz	r3, 8005f48 <__sinit+0x14>
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f44:	f7ff bff0 	b.w	8005f28 <__sfp_lock_release>
 8005f48:	4b04      	ldr	r3, [pc, #16]	@ (8005f5c <__sinit+0x28>)
 8005f4a:	6223      	str	r3, [r4, #32]
 8005f4c:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <__sinit+0x2c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f5      	bne.n	8005f40 <__sinit+0xc>
 8005f54:	f7ff ffc4 	bl	8005ee0 <global_stdio_init.part.0>
 8005f58:	e7f2      	b.n	8005f40 <__sinit+0xc>
 8005f5a:	bf00      	nop
 8005f5c:	08005ea1 	.word	0x08005ea1
 8005f60:	200004fc 	.word	0x200004fc

08005f64 <_fwalk_sglue>:
 8005f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f68:	4607      	mov	r7, r0
 8005f6a:	4688      	mov	r8, r1
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	2600      	movs	r6, #0
 8005f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f74:	f1b9 0901 	subs.w	r9, r9, #1
 8005f78:	d505      	bpl.n	8005f86 <_fwalk_sglue+0x22>
 8005f7a:	6824      	ldr	r4, [r4, #0]
 8005f7c:	2c00      	cmp	r4, #0
 8005f7e:	d1f7      	bne.n	8005f70 <_fwalk_sglue+0xc>
 8005f80:	4630      	mov	r0, r6
 8005f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d907      	bls.n	8005f9c <_fwalk_sglue+0x38>
 8005f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f90:	3301      	adds	r3, #1
 8005f92:	d003      	beq.n	8005f9c <_fwalk_sglue+0x38>
 8005f94:	4629      	mov	r1, r5
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c0      	blx	r8
 8005f9a:	4306      	orrs	r6, r0
 8005f9c:	3568      	adds	r5, #104	@ 0x68
 8005f9e:	e7e9      	b.n	8005f74 <_fwalk_sglue+0x10>

08005fa0 <sniprintf>:
 8005fa0:	b40c      	push	{r2, r3}
 8005fa2:	b530      	push	{r4, r5, lr}
 8005fa4:	4b17      	ldr	r3, [pc, #92]	@ (8006004 <sniprintf+0x64>)
 8005fa6:	1e0c      	subs	r4, r1, #0
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	b09d      	sub	sp, #116	@ 0x74
 8005fac:	da08      	bge.n	8005fc0 <sniprintf+0x20>
 8005fae:	238b      	movs	r3, #139	@ 0x8b
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	b01d      	add	sp, #116	@ 0x74
 8005fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fbc:	b002      	add	sp, #8
 8005fbe:	4770      	bx	lr
 8005fc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005fc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fc8:	bf14      	ite	ne
 8005fca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fce:	4623      	moveq	r3, r4
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fd8:	9002      	str	r0, [sp, #8]
 8005fda:	9006      	str	r0, [sp, #24]
 8005fdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fe0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005fe2:	ab21      	add	r3, sp, #132	@ 0x84
 8005fe4:	a902      	add	r1, sp, #8
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	f001 fbfb 	bl	80077e4 <_svfiprintf_r>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	bfbc      	itt	lt
 8005ff2:	238b      	movlt	r3, #139	@ 0x8b
 8005ff4:	602b      	strlt	r3, [r5, #0]
 8005ff6:	2c00      	cmp	r4, #0
 8005ff8:	d0dd      	beq.n	8005fb6 <sniprintf+0x16>
 8005ffa:	9b02      	ldr	r3, [sp, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e7d9      	b.n	8005fb6 <sniprintf+0x16>
 8006002:	bf00      	nop
 8006004:	20000040 	.word	0x20000040

08006008 <__sread>:
 8006008:	b510      	push	{r4, lr}
 800600a:	460c      	mov	r4, r1
 800600c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006010:	f000 f86c 	bl	80060ec <_read_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	bfab      	itete	ge
 8006018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800601a:	89a3      	ldrhlt	r3, [r4, #12]
 800601c:	181b      	addge	r3, r3, r0
 800601e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006022:	bfac      	ite	ge
 8006024:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006026:	81a3      	strhlt	r3, [r4, #12]
 8006028:	bd10      	pop	{r4, pc}

0800602a <__swrite>:
 800602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	461f      	mov	r7, r3
 8006030:	898b      	ldrh	r3, [r1, #12]
 8006032:	05db      	lsls	r3, r3, #23
 8006034:	4605      	mov	r5, r0
 8006036:	460c      	mov	r4, r1
 8006038:	4616      	mov	r6, r2
 800603a:	d505      	bpl.n	8006048 <__swrite+0x1e>
 800603c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006040:	2302      	movs	r3, #2
 8006042:	2200      	movs	r2, #0
 8006044:	f000 f840 	bl	80060c8 <_lseek_r>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800604e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	4628      	mov	r0, r5
 800605a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	f000 b857 	b.w	8006110 <_write_r>

08006062 <__sseek>:
 8006062:	b510      	push	{r4, lr}
 8006064:	460c      	mov	r4, r1
 8006066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606a:	f000 f82d 	bl	80060c8 <_lseek_r>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	bf15      	itete	ne
 8006074:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800607a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800607e:	81a3      	strheq	r3, [r4, #12]
 8006080:	bf18      	it	ne
 8006082:	81a3      	strhne	r3, [r4, #12]
 8006084:	bd10      	pop	{r4, pc}

08006086 <__sclose>:
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 b80d 	b.w	80060a8 <_close_r>

0800608e <memset>:
 800608e:	4402      	add	r2, r0
 8006090:	4603      	mov	r3, r0
 8006092:	4293      	cmp	r3, r2
 8006094:	d100      	bne.n	8006098 <memset+0xa>
 8006096:	4770      	bx	lr
 8006098:	f803 1b01 	strb.w	r1, [r3], #1
 800609c:	e7f9      	b.n	8006092 <memset+0x4>
	...

080060a0 <_localeconv_r>:
 80060a0:	4800      	ldr	r0, [pc, #0]	@ (80060a4 <_localeconv_r+0x4>)
 80060a2:	4770      	bx	lr
 80060a4:	20000180 	.word	0x20000180

080060a8 <_close_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d06      	ldr	r5, [pc, #24]	@ (80060c4 <_close_r+0x1c>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	f7fb fc44 	bl	8001940 <_close>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_close_r+0x1a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_close_r+0x1a>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000500 	.word	0x20000500

080060c8 <_lseek_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d07      	ldr	r5, [pc, #28]	@ (80060e8 <_lseek_r+0x20>)
 80060cc:	4604      	mov	r4, r0
 80060ce:	4608      	mov	r0, r1
 80060d0:	4611      	mov	r1, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	602a      	str	r2, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fb fc59 	bl	800198e <_lseek>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_lseek_r+0x1e>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_lseek_r+0x1e>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20000500 	.word	0x20000500

080060ec <_read_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d07      	ldr	r5, [pc, #28]	@ (800610c <_read_r+0x20>)
 80060f0:	4604      	mov	r4, r0
 80060f2:	4608      	mov	r0, r1
 80060f4:	4611      	mov	r1, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fb fbe7 	bl	80018ce <_read>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_read_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_read_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000500 	.word	0x20000500

08006110 <_write_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	@ (8006130 <_write_r+0x20>)
 8006114:	4604      	mov	r4, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb fbf2 	bl	8001908 <_write>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_write_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_write_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000500 	.word	0x20000500

08006134 <__errno>:
 8006134:	4b01      	ldr	r3, [pc, #4]	@ (800613c <__errno+0x8>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000040 	.word	0x20000040

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	4d0d      	ldr	r5, [pc, #52]	@ (8006178 <__libc_init_array+0x38>)
 8006144:	4c0d      	ldr	r4, [pc, #52]	@ (800617c <__libc_init_array+0x3c>)
 8006146:	1b64      	subs	r4, r4, r5
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	2600      	movs	r6, #0
 800614c:	42a6      	cmp	r6, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	4d0b      	ldr	r5, [pc, #44]	@ (8006180 <__libc_init_array+0x40>)
 8006152:	4c0c      	ldr	r4, [pc, #48]	@ (8006184 <__libc_init_array+0x44>)
 8006154:	f002 f864 	bl	8008220 <_init>
 8006158:	1b64      	subs	r4, r4, r5
 800615a:	10a4      	asrs	r4, r4, #2
 800615c:	2600      	movs	r6, #0
 800615e:	42a6      	cmp	r6, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f855 3b04 	ldr.w	r3, [r5], #4
 8006168:	4798      	blx	r3
 800616a:	3601      	adds	r6, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006172:	4798      	blx	r3
 8006174:	3601      	adds	r6, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	08008610 	.word	0x08008610
 800617c:	08008610 	.word	0x08008610
 8006180:	08008610 	.word	0x08008610
 8006184:	08008614 	.word	0x08008614

08006188 <__retarget_lock_init_recursive>:
 8006188:	4770      	bx	lr

0800618a <__retarget_lock_acquire_recursive>:
 800618a:	4770      	bx	lr

0800618c <__retarget_lock_release_recursive>:
 800618c:	4770      	bx	lr

0800618e <quorem>:
 800618e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006192:	6903      	ldr	r3, [r0, #16]
 8006194:	690c      	ldr	r4, [r1, #16]
 8006196:	42a3      	cmp	r3, r4
 8006198:	4607      	mov	r7, r0
 800619a:	db7e      	blt.n	800629a <quorem+0x10c>
 800619c:	3c01      	subs	r4, #1
 800619e:	f101 0814 	add.w	r8, r1, #20
 80061a2:	00a3      	lsls	r3, r4, #2
 80061a4:	f100 0514 	add.w	r5, r0, #20
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b8:	3301      	adds	r3, #1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80061c4:	d32e      	bcc.n	8006224 <quorem+0x96>
 80061c6:	f04f 0a00 	mov.w	sl, #0
 80061ca:	46c4      	mov	ip, r8
 80061cc:	46ae      	mov	lr, r5
 80061ce:	46d3      	mov	fp, sl
 80061d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061d4:	b298      	uxth	r0, r3
 80061d6:	fb06 a000 	mla	r0, r6, r0, sl
 80061da:	0c02      	lsrs	r2, r0, #16
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	fb06 2303 	mla	r3, r6, r3, r2
 80061e2:	f8de 2000 	ldr.w	r2, [lr]
 80061e6:	b280      	uxth	r0, r0
 80061e8:	b292      	uxth	r2, r2
 80061ea:	1a12      	subs	r2, r2, r0
 80061ec:	445a      	add	r2, fp
 80061ee:	f8de 0000 	ldr.w	r0, [lr]
 80061f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80061fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006200:	b292      	uxth	r2, r2
 8006202:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006206:	45e1      	cmp	r9, ip
 8006208:	f84e 2b04 	str.w	r2, [lr], #4
 800620c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006210:	d2de      	bcs.n	80061d0 <quorem+0x42>
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	58eb      	ldr	r3, [r5, r3]
 8006216:	b92b      	cbnz	r3, 8006224 <quorem+0x96>
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	3b04      	subs	r3, #4
 800621c:	429d      	cmp	r5, r3
 800621e:	461a      	mov	r2, r3
 8006220:	d32f      	bcc.n	8006282 <quorem+0xf4>
 8006222:	613c      	str	r4, [r7, #16]
 8006224:	4638      	mov	r0, r7
 8006226:	f001 f979 	bl	800751c <__mcmp>
 800622a:	2800      	cmp	r0, #0
 800622c:	db25      	blt.n	800627a <quorem+0xec>
 800622e:	4629      	mov	r1, r5
 8006230:	2000      	movs	r0, #0
 8006232:	f858 2b04 	ldr.w	r2, [r8], #4
 8006236:	f8d1 c000 	ldr.w	ip, [r1]
 800623a:	fa1f fe82 	uxth.w	lr, r2
 800623e:	fa1f f38c 	uxth.w	r3, ip
 8006242:	eba3 030e 	sub.w	r3, r3, lr
 8006246:	4403      	add	r3, r0
 8006248:	0c12      	lsrs	r2, r2, #16
 800624a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800624e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006258:	45c1      	cmp	r9, r8
 800625a:	f841 3b04 	str.w	r3, [r1], #4
 800625e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006262:	d2e6      	bcs.n	8006232 <quorem+0xa4>
 8006264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006268:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800626c:	b922      	cbnz	r2, 8006278 <quorem+0xea>
 800626e:	3b04      	subs	r3, #4
 8006270:	429d      	cmp	r5, r3
 8006272:	461a      	mov	r2, r3
 8006274:	d30b      	bcc.n	800628e <quorem+0x100>
 8006276:	613c      	str	r4, [r7, #16]
 8006278:	3601      	adds	r6, #1
 800627a:	4630      	mov	r0, r6
 800627c:	b003      	add	sp, #12
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	3b04      	subs	r3, #4
 8006286:	2a00      	cmp	r2, #0
 8006288:	d1cb      	bne.n	8006222 <quorem+0x94>
 800628a:	3c01      	subs	r4, #1
 800628c:	e7c6      	b.n	800621c <quorem+0x8e>
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	3b04      	subs	r3, #4
 8006292:	2a00      	cmp	r2, #0
 8006294:	d1ef      	bne.n	8006276 <quorem+0xe8>
 8006296:	3c01      	subs	r4, #1
 8006298:	e7ea      	b.n	8006270 <quorem+0xe2>
 800629a:	2000      	movs	r0, #0
 800629c:	e7ee      	b.n	800627c <quorem+0xee>
	...

080062a0 <_dtoa_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	69c7      	ldr	r7, [r0, #28]
 80062a6:	b099      	sub	sp, #100	@ 0x64
 80062a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062ac:	ec55 4b10 	vmov	r4, r5, d0
 80062b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80062b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80062b4:	4683      	mov	fp, r0
 80062b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80062b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062ba:	b97f      	cbnz	r7, 80062dc <_dtoa_r+0x3c>
 80062bc:	2010      	movs	r0, #16
 80062be:	f000 fdfd 	bl	8006ebc <malloc>
 80062c2:	4602      	mov	r2, r0
 80062c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80062c8:	b920      	cbnz	r0, 80062d4 <_dtoa_r+0x34>
 80062ca:	4ba7      	ldr	r3, [pc, #668]	@ (8006568 <_dtoa_r+0x2c8>)
 80062cc:	21ef      	movs	r1, #239	@ 0xef
 80062ce:	48a7      	ldr	r0, [pc, #668]	@ (800656c <_dtoa_r+0x2cc>)
 80062d0:	f001 fc68 	bl	8007ba4 <__assert_func>
 80062d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80062d8:	6007      	str	r7, [r0, #0]
 80062da:	60c7      	str	r7, [r0, #12]
 80062dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	b159      	cbz	r1, 80062fc <_dtoa_r+0x5c>
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	604a      	str	r2, [r1, #4]
 80062e8:	2301      	movs	r3, #1
 80062ea:	4093      	lsls	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
 80062ee:	4658      	mov	r0, fp
 80062f0:	f000 feda 	bl	80070a8 <_Bfree>
 80062f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	1e2b      	subs	r3, r5, #0
 80062fe:	bfb9      	ittee	lt
 8006300:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006304:	9303      	strlt	r3, [sp, #12]
 8006306:	2300      	movge	r3, #0
 8006308:	6033      	strge	r3, [r6, #0]
 800630a:	9f03      	ldr	r7, [sp, #12]
 800630c:	4b98      	ldr	r3, [pc, #608]	@ (8006570 <_dtoa_r+0x2d0>)
 800630e:	bfbc      	itt	lt
 8006310:	2201      	movlt	r2, #1
 8006312:	6032      	strlt	r2, [r6, #0]
 8006314:	43bb      	bics	r3, r7
 8006316:	d112      	bne.n	800633e <_dtoa_r+0x9e>
 8006318:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800631a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006324:	4323      	orrs	r3, r4
 8006326:	f000 854d 	beq.w	8006dc4 <_dtoa_r+0xb24>
 800632a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800632c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006584 <_dtoa_r+0x2e4>
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 854f 	beq.w	8006dd4 <_dtoa_r+0xb34>
 8006336:	f10a 0303 	add.w	r3, sl, #3
 800633a:	f000 bd49 	b.w	8006dd0 <_dtoa_r+0xb30>
 800633e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	ec51 0b17 	vmov	r0, r1, d7
 8006348:	2300      	movs	r3, #0
 800634a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800634e:	f7fa fbdb 	bl	8000b08 <__aeabi_dcmpeq>
 8006352:	4680      	mov	r8, r0
 8006354:	b158      	cbz	r0, 800636e <_dtoa_r+0xce>
 8006356:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006358:	2301      	movs	r3, #1
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800635e:	b113      	cbz	r3, 8006366 <_dtoa_r+0xc6>
 8006360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006362:	4b84      	ldr	r3, [pc, #528]	@ (8006574 <_dtoa_r+0x2d4>)
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006588 <_dtoa_r+0x2e8>
 800636a:	f000 bd33 	b.w	8006dd4 <_dtoa_r+0xb34>
 800636e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006372:	aa16      	add	r2, sp, #88	@ 0x58
 8006374:	a917      	add	r1, sp, #92	@ 0x5c
 8006376:	4658      	mov	r0, fp
 8006378:	f001 f980 	bl	800767c <__d2b>
 800637c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006380:	4681      	mov	r9, r0
 8006382:	2e00      	cmp	r6, #0
 8006384:	d077      	beq.n	8006476 <_dtoa_r+0x1d6>
 8006386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006388:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800638c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006394:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006398:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800639c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80063a0:	4619      	mov	r1, r3
 80063a2:	2200      	movs	r2, #0
 80063a4:	4b74      	ldr	r3, [pc, #464]	@ (8006578 <_dtoa_r+0x2d8>)
 80063a6:	f7f9 ff8f 	bl	80002c8 <__aeabi_dsub>
 80063aa:	a369      	add	r3, pc, #420	@ (adr r3, 8006550 <_dtoa_r+0x2b0>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7fa f942 	bl	8000638 <__aeabi_dmul>
 80063b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006558 <_dtoa_r+0x2b8>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7f9 ff87 	bl	80002cc <__adddf3>
 80063be:	4604      	mov	r4, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	460d      	mov	r5, r1
 80063c4:	f7fa f8ce 	bl	8000564 <__aeabi_i2d>
 80063c8:	a365      	add	r3, pc, #404	@ (adr r3, 8006560 <_dtoa_r+0x2c0>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7fa f933 	bl	8000638 <__aeabi_dmul>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4620      	mov	r0, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	f7f9 ff77 	bl	80002cc <__adddf3>
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	f7fa fbd9 	bl	8000b98 <__aeabi_d2iz>
 80063e6:	2200      	movs	r2, #0
 80063e8:	4607      	mov	r7, r0
 80063ea:	2300      	movs	r3, #0
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa fb94 	bl	8000b1c <__aeabi_dcmplt>
 80063f4:	b140      	cbz	r0, 8006408 <_dtoa_r+0x168>
 80063f6:	4638      	mov	r0, r7
 80063f8:	f7fa f8b4 	bl	8000564 <__aeabi_i2d>
 80063fc:	4622      	mov	r2, r4
 80063fe:	462b      	mov	r3, r5
 8006400:	f7fa fb82 	bl	8000b08 <__aeabi_dcmpeq>
 8006404:	b900      	cbnz	r0, 8006408 <_dtoa_r+0x168>
 8006406:	3f01      	subs	r7, #1
 8006408:	2f16      	cmp	r7, #22
 800640a:	d851      	bhi.n	80064b0 <_dtoa_r+0x210>
 800640c:	4b5b      	ldr	r3, [pc, #364]	@ (800657c <_dtoa_r+0x2dc>)
 800640e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800641a:	f7fa fb7f 	bl	8000b1c <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	d048      	beq.n	80064b4 <_dtoa_r+0x214>
 8006422:	3f01      	subs	r7, #1
 8006424:	2300      	movs	r3, #0
 8006426:	9312      	str	r3, [sp, #72]	@ 0x48
 8006428:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800642a:	1b9b      	subs	r3, r3, r6
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	bf44      	itt	mi
 8006430:	f1c3 0801 	rsbmi	r8, r3, #1
 8006434:	2300      	movmi	r3, #0
 8006436:	9208      	str	r2, [sp, #32]
 8006438:	bf54      	ite	pl
 800643a:	f04f 0800 	movpl.w	r8, #0
 800643e:	9308      	strmi	r3, [sp, #32]
 8006440:	2f00      	cmp	r7, #0
 8006442:	db39      	blt.n	80064b8 <_dtoa_r+0x218>
 8006444:	9b08      	ldr	r3, [sp, #32]
 8006446:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006448:	443b      	add	r3, r7
 800644a:	9308      	str	r3, [sp, #32]
 800644c:	2300      	movs	r3, #0
 800644e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006452:	2b09      	cmp	r3, #9
 8006454:	d864      	bhi.n	8006520 <_dtoa_r+0x280>
 8006456:	2b05      	cmp	r3, #5
 8006458:	bfc4      	itt	gt
 800645a:	3b04      	subgt	r3, #4
 800645c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800645e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006460:	f1a3 0302 	sub.w	r3, r3, #2
 8006464:	bfcc      	ite	gt
 8006466:	2400      	movgt	r4, #0
 8006468:	2401      	movle	r4, #1
 800646a:	2b03      	cmp	r3, #3
 800646c:	d863      	bhi.n	8006536 <_dtoa_r+0x296>
 800646e:	e8df f003 	tbb	[pc, r3]
 8006472:	372a      	.short	0x372a
 8006474:	5535      	.short	0x5535
 8006476:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800647a:	441e      	add	r6, r3
 800647c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006480:	2b20      	cmp	r3, #32
 8006482:	bfc1      	itttt	gt
 8006484:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006488:	409f      	lslgt	r7, r3
 800648a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800648e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006492:	bfd6      	itet	le
 8006494:	f1c3 0320 	rsble	r3, r3, #32
 8006498:	ea47 0003 	orrgt.w	r0, r7, r3
 800649c:	fa04 f003 	lslle.w	r0, r4, r3
 80064a0:	f7fa f850 	bl	8000544 <__aeabi_ui2d>
 80064a4:	2201      	movs	r2, #1
 80064a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80064aa:	3e01      	subs	r6, #1
 80064ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80064ae:	e777      	b.n	80063a0 <_dtoa_r+0x100>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e7b8      	b.n	8006426 <_dtoa_r+0x186>
 80064b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80064b6:	e7b7      	b.n	8006428 <_dtoa_r+0x188>
 80064b8:	427b      	negs	r3, r7
 80064ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80064bc:	2300      	movs	r3, #0
 80064be:	eba8 0807 	sub.w	r8, r8, r7
 80064c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064c4:	e7c4      	b.n	8006450 <_dtoa_r+0x1b0>
 80064c6:	2300      	movs	r3, #0
 80064c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dc35      	bgt.n	800653c <_dtoa_r+0x29c>
 80064d0:	2301      	movs	r3, #1
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	9307      	str	r3, [sp, #28]
 80064d6:	461a      	mov	r2, r3
 80064d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80064da:	e00b      	b.n	80064f4 <_dtoa_r+0x254>
 80064dc:	2301      	movs	r3, #1
 80064de:	e7f3      	b.n	80064c8 <_dtoa_r+0x228>
 80064e0:	2300      	movs	r3, #0
 80064e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	3301      	adds	r3, #1
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	9307      	str	r3, [sp, #28]
 80064f0:	bfb8      	it	lt
 80064f2:	2301      	movlt	r3, #1
 80064f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80064f8:	2100      	movs	r1, #0
 80064fa:	2204      	movs	r2, #4
 80064fc:	f102 0514 	add.w	r5, r2, #20
 8006500:	429d      	cmp	r5, r3
 8006502:	d91f      	bls.n	8006544 <_dtoa_r+0x2a4>
 8006504:	6041      	str	r1, [r0, #4]
 8006506:	4658      	mov	r0, fp
 8006508:	f000 fd8e 	bl	8007028 <_Balloc>
 800650c:	4682      	mov	sl, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	d13c      	bne.n	800658c <_dtoa_r+0x2ec>
 8006512:	4b1b      	ldr	r3, [pc, #108]	@ (8006580 <_dtoa_r+0x2e0>)
 8006514:	4602      	mov	r2, r0
 8006516:	f240 11af 	movw	r1, #431	@ 0x1af
 800651a:	e6d8      	b.n	80062ce <_dtoa_r+0x2e>
 800651c:	2301      	movs	r3, #1
 800651e:	e7e0      	b.n	80064e2 <_dtoa_r+0x242>
 8006520:	2401      	movs	r4, #1
 8006522:	2300      	movs	r3, #0
 8006524:	9309      	str	r3, [sp, #36]	@ 0x24
 8006526:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	9307      	str	r3, [sp, #28]
 8006530:	2200      	movs	r2, #0
 8006532:	2312      	movs	r3, #18
 8006534:	e7d0      	b.n	80064d8 <_dtoa_r+0x238>
 8006536:	2301      	movs	r3, #1
 8006538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800653a:	e7f5      	b.n	8006528 <_dtoa_r+0x288>
 800653c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	9307      	str	r3, [sp, #28]
 8006542:	e7d7      	b.n	80064f4 <_dtoa_r+0x254>
 8006544:	3101      	adds	r1, #1
 8006546:	0052      	lsls	r2, r2, #1
 8006548:	e7d8      	b.n	80064fc <_dtoa_r+0x25c>
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w
 8006550:	636f4361 	.word	0x636f4361
 8006554:	3fd287a7 	.word	0x3fd287a7
 8006558:	8b60c8b3 	.word	0x8b60c8b3
 800655c:	3fc68a28 	.word	0x3fc68a28
 8006560:	509f79fb 	.word	0x509f79fb
 8006564:	3fd34413 	.word	0x3fd34413
 8006568:	080082d5 	.word	0x080082d5
 800656c:	080082ec 	.word	0x080082ec
 8006570:	7ff00000 	.word	0x7ff00000
 8006574:	080082a5 	.word	0x080082a5
 8006578:	3ff80000 	.word	0x3ff80000
 800657c:	080083e8 	.word	0x080083e8
 8006580:	08008344 	.word	0x08008344
 8006584:	080082d1 	.word	0x080082d1
 8006588:	080082a4 	.word	0x080082a4
 800658c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006590:	6018      	str	r0, [r3, #0]
 8006592:	9b07      	ldr	r3, [sp, #28]
 8006594:	2b0e      	cmp	r3, #14
 8006596:	f200 80a4 	bhi.w	80066e2 <_dtoa_r+0x442>
 800659a:	2c00      	cmp	r4, #0
 800659c:	f000 80a1 	beq.w	80066e2 <_dtoa_r+0x442>
 80065a0:	2f00      	cmp	r7, #0
 80065a2:	dd33      	ble.n	800660c <_dtoa_r+0x36c>
 80065a4:	4bad      	ldr	r3, [pc, #692]	@ (800685c <_dtoa_r+0x5bc>)
 80065a6:	f007 020f 	and.w	r2, r7, #15
 80065aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ae:	ed93 7b00 	vldr	d7, [r3]
 80065b2:	05f8      	lsls	r0, r7, #23
 80065b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80065b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80065bc:	d516      	bpl.n	80065ec <_dtoa_r+0x34c>
 80065be:	4ba8      	ldr	r3, [pc, #672]	@ (8006860 <_dtoa_r+0x5c0>)
 80065c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065c8:	f7fa f960 	bl	800088c <__aeabi_ddiv>
 80065cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d0:	f004 040f 	and.w	r4, r4, #15
 80065d4:	2603      	movs	r6, #3
 80065d6:	4da2      	ldr	r5, [pc, #648]	@ (8006860 <_dtoa_r+0x5c0>)
 80065d8:	b954      	cbnz	r4, 80065f0 <_dtoa_r+0x350>
 80065da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e2:	f7fa f953 	bl	800088c <__aeabi_ddiv>
 80065e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ea:	e028      	b.n	800663e <_dtoa_r+0x39e>
 80065ec:	2602      	movs	r6, #2
 80065ee:	e7f2      	b.n	80065d6 <_dtoa_r+0x336>
 80065f0:	07e1      	lsls	r1, r4, #31
 80065f2:	d508      	bpl.n	8006606 <_dtoa_r+0x366>
 80065f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065fc:	f7fa f81c 	bl	8000638 <__aeabi_dmul>
 8006600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006604:	3601      	adds	r6, #1
 8006606:	1064      	asrs	r4, r4, #1
 8006608:	3508      	adds	r5, #8
 800660a:	e7e5      	b.n	80065d8 <_dtoa_r+0x338>
 800660c:	f000 80d2 	beq.w	80067b4 <_dtoa_r+0x514>
 8006610:	427c      	negs	r4, r7
 8006612:	4b92      	ldr	r3, [pc, #584]	@ (800685c <_dtoa_r+0x5bc>)
 8006614:	4d92      	ldr	r5, [pc, #584]	@ (8006860 <_dtoa_r+0x5c0>)
 8006616:	f004 020f 	and.w	r2, r4, #15
 800661a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006626:	f7fa f807 	bl	8000638 <__aeabi_dmul>
 800662a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662e:	1124      	asrs	r4, r4, #4
 8006630:	2300      	movs	r3, #0
 8006632:	2602      	movs	r6, #2
 8006634:	2c00      	cmp	r4, #0
 8006636:	f040 80b2 	bne.w	800679e <_dtoa_r+0x4fe>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1d3      	bne.n	80065e6 <_dtoa_r+0x346>
 800663e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006640:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80b7 	beq.w	80067b8 <_dtoa_r+0x518>
 800664a:	4b86      	ldr	r3, [pc, #536]	@ (8006864 <_dtoa_r+0x5c4>)
 800664c:	2200      	movs	r2, #0
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa fa63 	bl	8000b1c <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	f000 80ae 	beq.w	80067b8 <_dtoa_r+0x518>
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80aa 	beq.w	80067b8 <_dtoa_r+0x518>
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	dd37      	ble.n	80066da <_dtoa_r+0x43a>
 800666a:	1e7b      	subs	r3, r7, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	4620      	mov	r0, r4
 8006670:	4b7d      	ldr	r3, [pc, #500]	@ (8006868 <_dtoa_r+0x5c8>)
 8006672:	2200      	movs	r2, #0
 8006674:	4629      	mov	r1, r5
 8006676:	f7f9 ffdf 	bl	8000638 <__aeabi_dmul>
 800667a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667e:	9c00      	ldr	r4, [sp, #0]
 8006680:	3601      	adds	r6, #1
 8006682:	4630      	mov	r0, r6
 8006684:	f7f9 ff6e 	bl	8000564 <__aeabi_i2d>
 8006688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800668c:	f7f9 ffd4 	bl	8000638 <__aeabi_dmul>
 8006690:	4b76      	ldr	r3, [pc, #472]	@ (800686c <_dtoa_r+0x5cc>)
 8006692:	2200      	movs	r2, #0
 8006694:	f7f9 fe1a 	bl	80002cc <__adddf3>
 8006698:	4605      	mov	r5, r0
 800669a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800669e:	2c00      	cmp	r4, #0
 80066a0:	f040 808d 	bne.w	80067be <_dtoa_r+0x51e>
 80066a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a8:	4b71      	ldr	r3, [pc, #452]	@ (8006870 <_dtoa_r+0x5d0>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	f7f9 fe0c 	bl	80002c8 <__aeabi_dsub>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4633      	mov	r3, r6
 80066bc:	f7fa fa4c 	bl	8000b58 <__aeabi_dcmpgt>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	f040 828b 	bne.w	8006bdc <_dtoa_r+0x93c>
 80066c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ca:	462a      	mov	r2, r5
 80066cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80066d0:	f7fa fa24 	bl	8000b1c <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f040 8128 	bne.w	800692a <_dtoa_r+0x68a>
 80066da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80066de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80066e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f2c0 815a 	blt.w	800699e <_dtoa_r+0x6fe>
 80066ea:	2f0e      	cmp	r7, #14
 80066ec:	f300 8157 	bgt.w	800699e <_dtoa_r+0x6fe>
 80066f0:	4b5a      	ldr	r3, [pc, #360]	@ (800685c <_dtoa_r+0x5bc>)
 80066f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066f6:	ed93 7b00 	vldr	d7, [r3]
 80066fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	ed8d 7b00 	vstr	d7, [sp]
 8006702:	da03      	bge.n	800670c <_dtoa_r+0x46c>
 8006704:	9b07      	ldr	r3, [sp, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f340 8101 	ble.w	800690e <_dtoa_r+0x66e>
 800670c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006710:	4656      	mov	r6, sl
 8006712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7fa f8b7 	bl	800088c <__aeabi_ddiv>
 800671e:	f7fa fa3b 	bl	8000b98 <__aeabi_d2iz>
 8006722:	4680      	mov	r8, r0
 8006724:	f7f9 ff1e 	bl	8000564 <__aeabi_i2d>
 8006728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800672c:	f7f9 ff84 	bl	8000638 <__aeabi_dmul>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800673c:	f7f9 fdc4 	bl	80002c8 <__aeabi_dsub>
 8006740:	f806 4b01 	strb.w	r4, [r6], #1
 8006744:	9d07      	ldr	r5, [sp, #28]
 8006746:	eba6 040a 	sub.w	r4, r6, sl
 800674a:	42a5      	cmp	r5, r4
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	f040 8117 	bne.w	8006982 <_dtoa_r+0x6e2>
 8006754:	f7f9 fdba 	bl	80002cc <__adddf3>
 8006758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800675c:	4604      	mov	r4, r0
 800675e:	460d      	mov	r5, r1
 8006760:	f7fa f9fa 	bl	8000b58 <__aeabi_dcmpgt>
 8006764:	2800      	cmp	r0, #0
 8006766:	f040 80f9 	bne.w	800695c <_dtoa_r+0x6bc>
 800676a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800676e:	4620      	mov	r0, r4
 8006770:	4629      	mov	r1, r5
 8006772:	f7fa f9c9 	bl	8000b08 <__aeabi_dcmpeq>
 8006776:	b118      	cbz	r0, 8006780 <_dtoa_r+0x4e0>
 8006778:	f018 0f01 	tst.w	r8, #1
 800677c:	f040 80ee 	bne.w	800695c <_dtoa_r+0x6bc>
 8006780:	4649      	mov	r1, r9
 8006782:	4658      	mov	r0, fp
 8006784:	f000 fc90 	bl	80070a8 <_Bfree>
 8006788:	2300      	movs	r3, #0
 800678a:	7033      	strb	r3, [r6, #0]
 800678c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800678e:	3701      	adds	r7, #1
 8006790:	601f      	str	r7, [r3, #0]
 8006792:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 831d 	beq.w	8006dd4 <_dtoa_r+0xb34>
 800679a:	601e      	str	r6, [r3, #0]
 800679c:	e31a      	b.n	8006dd4 <_dtoa_r+0xb34>
 800679e:	07e2      	lsls	r2, r4, #31
 80067a0:	d505      	bpl.n	80067ae <_dtoa_r+0x50e>
 80067a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067a6:	f7f9 ff47 	bl	8000638 <__aeabi_dmul>
 80067aa:	3601      	adds	r6, #1
 80067ac:	2301      	movs	r3, #1
 80067ae:	1064      	asrs	r4, r4, #1
 80067b0:	3508      	adds	r5, #8
 80067b2:	e73f      	b.n	8006634 <_dtoa_r+0x394>
 80067b4:	2602      	movs	r6, #2
 80067b6:	e742      	b.n	800663e <_dtoa_r+0x39e>
 80067b8:	9c07      	ldr	r4, [sp, #28]
 80067ba:	9704      	str	r7, [sp, #16]
 80067bc:	e761      	b.n	8006682 <_dtoa_r+0x3e2>
 80067be:	4b27      	ldr	r3, [pc, #156]	@ (800685c <_dtoa_r+0x5bc>)
 80067c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067ca:	4454      	add	r4, sl
 80067cc:	2900      	cmp	r1, #0
 80067ce:	d053      	beq.n	8006878 <_dtoa_r+0x5d8>
 80067d0:	4928      	ldr	r1, [pc, #160]	@ (8006874 <_dtoa_r+0x5d4>)
 80067d2:	2000      	movs	r0, #0
 80067d4:	f7fa f85a 	bl	800088c <__aeabi_ddiv>
 80067d8:	4633      	mov	r3, r6
 80067da:	462a      	mov	r2, r5
 80067dc:	f7f9 fd74 	bl	80002c8 <__aeabi_dsub>
 80067e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067e4:	4656      	mov	r6, sl
 80067e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ea:	f7fa f9d5 	bl	8000b98 <__aeabi_d2iz>
 80067ee:	4605      	mov	r5, r0
 80067f0:	f7f9 feb8 	bl	8000564 <__aeabi_i2d>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067fc:	f7f9 fd64 	bl	80002c8 <__aeabi_dsub>
 8006800:	3530      	adds	r5, #48	@ 0x30
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800680a:	f806 5b01 	strb.w	r5, [r6], #1
 800680e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006812:	f7fa f983 	bl	8000b1c <__aeabi_dcmplt>
 8006816:	2800      	cmp	r0, #0
 8006818:	d171      	bne.n	80068fe <_dtoa_r+0x65e>
 800681a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800681e:	4911      	ldr	r1, [pc, #68]	@ (8006864 <_dtoa_r+0x5c4>)
 8006820:	2000      	movs	r0, #0
 8006822:	f7f9 fd51 	bl	80002c8 <__aeabi_dsub>
 8006826:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800682a:	f7fa f977 	bl	8000b1c <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8095 	bne.w	800695e <_dtoa_r+0x6be>
 8006834:	42a6      	cmp	r6, r4
 8006836:	f43f af50 	beq.w	80066da <_dtoa_r+0x43a>
 800683a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800683e:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <_dtoa_r+0x5c8>)
 8006840:	2200      	movs	r2, #0
 8006842:	f7f9 fef9 	bl	8000638 <__aeabi_dmul>
 8006846:	4b08      	ldr	r3, [pc, #32]	@ (8006868 <_dtoa_r+0x5c8>)
 8006848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800684c:	2200      	movs	r2, #0
 800684e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006852:	f7f9 fef1 	bl	8000638 <__aeabi_dmul>
 8006856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685a:	e7c4      	b.n	80067e6 <_dtoa_r+0x546>
 800685c:	080083e8 	.word	0x080083e8
 8006860:	080083c0 	.word	0x080083c0
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	40240000 	.word	0x40240000
 800686c:	401c0000 	.word	0x401c0000
 8006870:	40140000 	.word	0x40140000
 8006874:	3fe00000 	.word	0x3fe00000
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	f7f9 fedc 	bl	8000638 <__aeabi_dmul>
 8006880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006884:	9415      	str	r4, [sp, #84]	@ 0x54
 8006886:	4656      	mov	r6, sl
 8006888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800688c:	f7fa f984 	bl	8000b98 <__aeabi_d2iz>
 8006890:	4605      	mov	r5, r0
 8006892:	f7f9 fe67 	bl	8000564 <__aeabi_i2d>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800689e:	f7f9 fd13 	bl	80002c8 <__aeabi_dsub>
 80068a2:	3530      	adds	r5, #48	@ 0x30
 80068a4:	f806 5b01 	strb.w	r5, [r6], #1
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	42a6      	cmp	r6, r4
 80068ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	d124      	bne.n	8006902 <_dtoa_r+0x662>
 80068b8:	4bac      	ldr	r3, [pc, #688]	@ (8006b6c <_dtoa_r+0x8cc>)
 80068ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068be:	f7f9 fd05 	bl	80002cc <__adddf3>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ca:	f7fa f945 	bl	8000b58 <__aeabi_dcmpgt>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d145      	bne.n	800695e <_dtoa_r+0x6be>
 80068d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068d6:	49a5      	ldr	r1, [pc, #660]	@ (8006b6c <_dtoa_r+0x8cc>)
 80068d8:	2000      	movs	r0, #0
 80068da:	f7f9 fcf5 	bl	80002c8 <__aeabi_dsub>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e6:	f7fa f919 	bl	8000b1c <__aeabi_dcmplt>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f43f aef5 	beq.w	80066da <_dtoa_r+0x43a>
 80068f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80068f2:	1e73      	subs	r3, r6, #1
 80068f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80068f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80068fa:	2b30      	cmp	r3, #48	@ 0x30
 80068fc:	d0f8      	beq.n	80068f0 <_dtoa_r+0x650>
 80068fe:	9f04      	ldr	r7, [sp, #16]
 8006900:	e73e      	b.n	8006780 <_dtoa_r+0x4e0>
 8006902:	4b9b      	ldr	r3, [pc, #620]	@ (8006b70 <_dtoa_r+0x8d0>)
 8006904:	f7f9 fe98 	bl	8000638 <__aeabi_dmul>
 8006908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800690c:	e7bc      	b.n	8006888 <_dtoa_r+0x5e8>
 800690e:	d10c      	bne.n	800692a <_dtoa_r+0x68a>
 8006910:	4b98      	ldr	r3, [pc, #608]	@ (8006b74 <_dtoa_r+0x8d4>)
 8006912:	2200      	movs	r2, #0
 8006914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006918:	f7f9 fe8e 	bl	8000638 <__aeabi_dmul>
 800691c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006920:	f7fa f910 	bl	8000b44 <__aeabi_dcmpge>
 8006924:	2800      	cmp	r0, #0
 8006926:	f000 8157 	beq.w	8006bd8 <_dtoa_r+0x938>
 800692a:	2400      	movs	r4, #0
 800692c:	4625      	mov	r5, r4
 800692e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006930:	43db      	mvns	r3, r3
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	4656      	mov	r6, sl
 8006936:	2700      	movs	r7, #0
 8006938:	4621      	mov	r1, r4
 800693a:	4658      	mov	r0, fp
 800693c:	f000 fbb4 	bl	80070a8 <_Bfree>
 8006940:	2d00      	cmp	r5, #0
 8006942:	d0dc      	beq.n	80068fe <_dtoa_r+0x65e>
 8006944:	b12f      	cbz	r7, 8006952 <_dtoa_r+0x6b2>
 8006946:	42af      	cmp	r7, r5
 8006948:	d003      	beq.n	8006952 <_dtoa_r+0x6b2>
 800694a:	4639      	mov	r1, r7
 800694c:	4658      	mov	r0, fp
 800694e:	f000 fbab 	bl	80070a8 <_Bfree>
 8006952:	4629      	mov	r1, r5
 8006954:	4658      	mov	r0, fp
 8006956:	f000 fba7 	bl	80070a8 <_Bfree>
 800695a:	e7d0      	b.n	80068fe <_dtoa_r+0x65e>
 800695c:	9704      	str	r7, [sp, #16]
 800695e:	4633      	mov	r3, r6
 8006960:	461e      	mov	r6, r3
 8006962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006966:	2a39      	cmp	r2, #57	@ 0x39
 8006968:	d107      	bne.n	800697a <_dtoa_r+0x6da>
 800696a:	459a      	cmp	sl, r3
 800696c:	d1f8      	bne.n	8006960 <_dtoa_r+0x6c0>
 800696e:	9a04      	ldr	r2, [sp, #16]
 8006970:	3201      	adds	r2, #1
 8006972:	9204      	str	r2, [sp, #16]
 8006974:	2230      	movs	r2, #48	@ 0x30
 8006976:	f88a 2000 	strb.w	r2, [sl]
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	3201      	adds	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e7bd      	b.n	80068fe <_dtoa_r+0x65e>
 8006982:	4b7b      	ldr	r3, [pc, #492]	@ (8006b70 <_dtoa_r+0x8d0>)
 8006984:	2200      	movs	r2, #0
 8006986:	f7f9 fe57 	bl	8000638 <__aeabi_dmul>
 800698a:	2200      	movs	r2, #0
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	460d      	mov	r5, r1
 8006992:	f7fa f8b9 	bl	8000b08 <__aeabi_dcmpeq>
 8006996:	2800      	cmp	r0, #0
 8006998:	f43f aebb 	beq.w	8006712 <_dtoa_r+0x472>
 800699c:	e6f0      	b.n	8006780 <_dtoa_r+0x4e0>
 800699e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	f000 80db 	beq.w	8006b5c <_dtoa_r+0x8bc>
 80069a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069a8:	2a01      	cmp	r2, #1
 80069aa:	f300 80bf 	bgt.w	8006b2c <_dtoa_r+0x88c>
 80069ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	f000 80b7 	beq.w	8006b24 <_dtoa_r+0x884>
 80069b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80069ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069bc:	4646      	mov	r6, r8
 80069be:	9a08      	ldr	r2, [sp, #32]
 80069c0:	2101      	movs	r1, #1
 80069c2:	441a      	add	r2, r3
 80069c4:	4658      	mov	r0, fp
 80069c6:	4498      	add	r8, r3
 80069c8:	9208      	str	r2, [sp, #32]
 80069ca:	f000 fc21 	bl	8007210 <__i2b>
 80069ce:	4605      	mov	r5, r0
 80069d0:	b15e      	cbz	r6, 80069ea <_dtoa_r+0x74a>
 80069d2:	9b08      	ldr	r3, [sp, #32]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dd08      	ble.n	80069ea <_dtoa_r+0x74a>
 80069d8:	42b3      	cmp	r3, r6
 80069da:	9a08      	ldr	r2, [sp, #32]
 80069dc:	bfa8      	it	ge
 80069de:	4633      	movge	r3, r6
 80069e0:	eba8 0803 	sub.w	r8, r8, r3
 80069e4:	1af6      	subs	r6, r6, r3
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	9308      	str	r3, [sp, #32]
 80069ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ec:	b1f3      	cbz	r3, 8006a2c <_dtoa_r+0x78c>
 80069ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80b7 	beq.w	8006b64 <_dtoa_r+0x8c4>
 80069f6:	b18c      	cbz	r4, 8006a1c <_dtoa_r+0x77c>
 80069f8:	4629      	mov	r1, r5
 80069fa:	4622      	mov	r2, r4
 80069fc:	4658      	mov	r0, fp
 80069fe:	f000 fcc7 	bl	8007390 <__pow5mult>
 8006a02:	464a      	mov	r2, r9
 8006a04:	4601      	mov	r1, r0
 8006a06:	4605      	mov	r5, r0
 8006a08:	4658      	mov	r0, fp
 8006a0a:	f000 fc17 	bl	800723c <__multiply>
 8006a0e:	4649      	mov	r1, r9
 8006a10:	9004      	str	r0, [sp, #16]
 8006a12:	4658      	mov	r0, fp
 8006a14:	f000 fb48 	bl	80070a8 <_Bfree>
 8006a18:	9b04      	ldr	r3, [sp, #16]
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a1e:	1b1a      	subs	r2, r3, r4
 8006a20:	d004      	beq.n	8006a2c <_dtoa_r+0x78c>
 8006a22:	4649      	mov	r1, r9
 8006a24:	4658      	mov	r0, fp
 8006a26:	f000 fcb3 	bl	8007390 <__pow5mult>
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4658      	mov	r0, fp
 8006a30:	f000 fbee 	bl	8007210 <__i2b>
 8006a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a36:	4604      	mov	r4, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 81cf 	beq.w	8006ddc <_dtoa_r+0xb3c>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4601      	mov	r1, r0
 8006a42:	4658      	mov	r0, fp
 8006a44:	f000 fca4 	bl	8007390 <__pow5mult>
 8006a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	f300 8095 	bgt.w	8006b7c <_dtoa_r+0x8dc>
 8006a52:	9b02      	ldr	r3, [sp, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 8087 	bne.w	8006b68 <_dtoa_r+0x8c8>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 8089 	bne.w	8006b78 <_dtoa_r+0x8d8>
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a6c:	0d1b      	lsrs	r3, r3, #20
 8006a6e:	051b      	lsls	r3, r3, #20
 8006a70:	b12b      	cbz	r3, 8006a7e <_dtoa_r+0x7de>
 8006a72:	9b08      	ldr	r3, [sp, #32]
 8006a74:	3301      	adds	r3, #1
 8006a76:	9308      	str	r3, [sp, #32]
 8006a78:	f108 0801 	add.w	r8, r8, #1
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 81b0 	beq.w	8006de8 <_dtoa_r+0xb48>
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a8e:	6918      	ldr	r0, [r3, #16]
 8006a90:	f000 fb72 	bl	8007178 <__hi0bits>
 8006a94:	f1c0 0020 	rsb	r0, r0, #32
 8006a98:	9b08      	ldr	r3, [sp, #32]
 8006a9a:	4418      	add	r0, r3
 8006a9c:	f010 001f 	ands.w	r0, r0, #31
 8006aa0:	d077      	beq.n	8006b92 <_dtoa_r+0x8f2>
 8006aa2:	f1c0 0320 	rsb	r3, r0, #32
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	dd6b      	ble.n	8006b82 <_dtoa_r+0x8e2>
 8006aaa:	9b08      	ldr	r3, [sp, #32]
 8006aac:	f1c0 001c 	rsb	r0, r0, #28
 8006ab0:	4403      	add	r3, r0
 8006ab2:	4480      	add	r8, r0
 8006ab4:	4406      	add	r6, r0
 8006ab6:	9308      	str	r3, [sp, #32]
 8006ab8:	f1b8 0f00 	cmp.w	r8, #0
 8006abc:	dd05      	ble.n	8006aca <_dtoa_r+0x82a>
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f000 fcbe 	bl	8007444 <__lshift>
 8006ac8:	4681      	mov	r9, r0
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dd05      	ble.n	8006adc <_dtoa_r+0x83c>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4658      	mov	r0, fp
 8006ad6:	f000 fcb5 	bl	8007444 <__lshift>
 8006ada:	4604      	mov	r4, r0
 8006adc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d059      	beq.n	8006b96 <_dtoa_r+0x8f6>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4648      	mov	r0, r9
 8006ae6:	f000 fd19 	bl	800751c <__mcmp>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	da53      	bge.n	8006b96 <_dtoa_r+0x8f6>
 8006aee:	1e7b      	subs	r3, r7, #1
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	4649      	mov	r1, r9
 8006af4:	2300      	movs	r3, #0
 8006af6:	220a      	movs	r2, #10
 8006af8:	4658      	mov	r0, fp
 8006afa:	f000 faf7 	bl	80070ec <__multadd>
 8006afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b00:	4681      	mov	r9, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8172 	beq.w	8006dec <_dtoa_r+0xb4c>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	220a      	movs	r2, #10
 8006b0e:	4658      	mov	r0, fp
 8006b10:	f000 faec 	bl	80070ec <__multadd>
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	4605      	mov	r5, r0
 8006b1a:	dc67      	bgt.n	8006bec <_dtoa_r+0x94c>
 8006b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	dc41      	bgt.n	8006ba6 <_dtoa_r+0x906>
 8006b22:	e063      	b.n	8006bec <_dtoa_r+0x94c>
 8006b24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006b2a:	e746      	b.n	80069ba <_dtoa_r+0x71a>
 8006b2c:	9b07      	ldr	r3, [sp, #28]
 8006b2e:	1e5c      	subs	r4, r3, #1
 8006b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	bfbf      	itttt	lt
 8006b36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006b38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006b3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006b3c:	1ae3      	sublt	r3, r4, r3
 8006b3e:	bfb4      	ite	lt
 8006b40:	18d2      	addlt	r2, r2, r3
 8006b42:	1b1c      	subge	r4, r3, r4
 8006b44:	9b07      	ldr	r3, [sp, #28]
 8006b46:	bfbc      	itt	lt
 8006b48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006b4a:	2400      	movlt	r4, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfb5      	itete	lt
 8006b50:	eba8 0603 	sublt.w	r6, r8, r3
 8006b54:	9b07      	ldrge	r3, [sp, #28]
 8006b56:	2300      	movlt	r3, #0
 8006b58:	4646      	movge	r6, r8
 8006b5a:	e730      	b.n	80069be <_dtoa_r+0x71e>
 8006b5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006b60:	4646      	mov	r6, r8
 8006b62:	e735      	b.n	80069d0 <_dtoa_r+0x730>
 8006b64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b66:	e75c      	b.n	8006a22 <_dtoa_r+0x782>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e788      	b.n	8006a7e <_dtoa_r+0x7de>
 8006b6c:	3fe00000 	.word	0x3fe00000
 8006b70:	40240000 	.word	0x40240000
 8006b74:	40140000 	.word	0x40140000
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	e780      	b.n	8006a7e <_dtoa_r+0x7de>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b80:	e782      	b.n	8006a88 <_dtoa_r+0x7e8>
 8006b82:	d099      	beq.n	8006ab8 <_dtoa_r+0x818>
 8006b84:	9a08      	ldr	r2, [sp, #32]
 8006b86:	331c      	adds	r3, #28
 8006b88:	441a      	add	r2, r3
 8006b8a:	4498      	add	r8, r3
 8006b8c:	441e      	add	r6, r3
 8006b8e:	9208      	str	r2, [sp, #32]
 8006b90:	e792      	b.n	8006ab8 <_dtoa_r+0x818>
 8006b92:	4603      	mov	r3, r0
 8006b94:	e7f6      	b.n	8006b84 <_dtoa_r+0x8e4>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	9704      	str	r7, [sp, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dc20      	bgt.n	8006be0 <_dtoa_r+0x940>
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	dd1e      	ble.n	8006be4 <_dtoa_r+0x944>
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f47f aec0 	bne.w	800692e <_dtoa_r+0x68e>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	2205      	movs	r2, #5
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 fa9a 	bl	80070ec <__multadd>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4648      	mov	r0, r9
 8006bbe:	f000 fcad 	bl	800751c <__mcmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f77f aeb3 	ble.w	800692e <_dtoa_r+0x68e>
 8006bc8:	4656      	mov	r6, sl
 8006bca:	2331      	movs	r3, #49	@ 0x31
 8006bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8006bd0:	9b04      	ldr	r3, [sp, #16]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	e6ae      	b.n	8006936 <_dtoa_r+0x696>
 8006bd8:	9c07      	ldr	r4, [sp, #28]
 8006bda:	9704      	str	r7, [sp, #16]
 8006bdc:	4625      	mov	r5, r4
 8006bde:	e7f3      	b.n	8006bc8 <_dtoa_r+0x928>
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8104 	beq.w	8006df4 <_dtoa_r+0xb54>
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	dd05      	ble.n	8006bfc <_dtoa_r+0x95c>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f000 fc25 	bl	8007444 <__lshift>
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d05a      	beq.n	8006cb8 <_dtoa_r+0xa18>
 8006c02:	6869      	ldr	r1, [r5, #4]
 8006c04:	4658      	mov	r0, fp
 8006c06:	f000 fa0f 	bl	8007028 <_Balloc>
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	b928      	cbnz	r0, 8006c1a <_dtoa_r+0x97a>
 8006c0e:	4b84      	ldr	r3, [pc, #528]	@ (8006e20 <_dtoa_r+0xb80>)
 8006c10:	4602      	mov	r2, r0
 8006c12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006c16:	f7ff bb5a 	b.w	80062ce <_dtoa_r+0x2e>
 8006c1a:	692a      	ldr	r2, [r5, #16]
 8006c1c:	3202      	adds	r2, #2
 8006c1e:	0092      	lsls	r2, r2, #2
 8006c20:	f105 010c 	add.w	r1, r5, #12
 8006c24:	300c      	adds	r0, #12
 8006c26:	f000 ffaf 	bl	8007b88 <memcpy>
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4658      	mov	r0, fp
 8006c30:	f000 fc08 	bl	8007444 <__lshift>
 8006c34:	f10a 0301 	add.w	r3, sl, #1
 8006c38:	9307      	str	r3, [sp, #28]
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	4453      	add	r3, sl
 8006c3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	462f      	mov	r7, r5
 8006c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	9b07      	ldr	r3, [sp, #28]
 8006c4e:	4621      	mov	r1, r4
 8006c50:	3b01      	subs	r3, #1
 8006c52:	4648      	mov	r0, r9
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	f7ff fa9a 	bl	800618e <quorem>
 8006c5a:	4639      	mov	r1, r7
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c62:	4648      	mov	r0, r9
 8006c64:	f000 fc5a 	bl	800751c <__mcmp>
 8006c68:	462a      	mov	r2, r5
 8006c6a:	9008      	str	r0, [sp, #32]
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 fc70 	bl	8007554 <__mdiff>
 8006c74:	68c2      	ldr	r2, [r0, #12]
 8006c76:	4606      	mov	r6, r0
 8006c78:	bb02      	cbnz	r2, 8006cbc <_dtoa_r+0xa1c>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4648      	mov	r0, r9
 8006c7e:	f000 fc4d 	bl	800751c <__mcmp>
 8006c82:	4602      	mov	r2, r0
 8006c84:	4631      	mov	r1, r6
 8006c86:	4658      	mov	r0, fp
 8006c88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c8a:	f000 fa0d 	bl	80070a8 <_Bfree>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c92:	9e07      	ldr	r6, [sp, #28]
 8006c94:	ea43 0102 	orr.w	r1, r3, r2
 8006c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9a:	4319      	orrs	r1, r3
 8006c9c:	d110      	bne.n	8006cc0 <_dtoa_r+0xa20>
 8006c9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ca2:	d029      	beq.n	8006cf8 <_dtoa_r+0xa58>
 8006ca4:	9b08      	ldr	r3, [sp, #32]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dd02      	ble.n	8006cb0 <_dtoa_r+0xa10>
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	f883 8000 	strb.w	r8, [r3]
 8006cb6:	e63f      	b.n	8006938 <_dtoa_r+0x698>
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e7bb      	b.n	8006c34 <_dtoa_r+0x994>
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	e7e1      	b.n	8006c84 <_dtoa_r+0x9e4>
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	db04      	blt.n	8006cd0 <_dtoa_r+0xa30>
 8006cc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	d120      	bne.n	8006d12 <_dtoa_r+0xa72>
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	dded      	ble.n	8006cb0 <_dtoa_r+0xa10>
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4658      	mov	r0, fp
 8006cda:	f000 fbb3 	bl	8007444 <__lshift>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4681      	mov	r9, r0
 8006ce2:	f000 fc1b 	bl	800751c <__mcmp>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	dc03      	bgt.n	8006cf2 <_dtoa_r+0xa52>
 8006cea:	d1e1      	bne.n	8006cb0 <_dtoa_r+0xa10>
 8006cec:	f018 0f01 	tst.w	r8, #1
 8006cf0:	d0de      	beq.n	8006cb0 <_dtoa_r+0xa10>
 8006cf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006cf6:	d1d8      	bne.n	8006caa <_dtoa_r+0xa0a>
 8006cf8:	9a00      	ldr	r2, [sp, #0]
 8006cfa:	2339      	movs	r3, #57	@ 0x39
 8006cfc:	7013      	strb	r3, [r2, #0]
 8006cfe:	4633      	mov	r3, r6
 8006d00:	461e      	mov	r6, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006d08:	2a39      	cmp	r2, #57	@ 0x39
 8006d0a:	d052      	beq.n	8006db2 <_dtoa_r+0xb12>
 8006d0c:	3201      	adds	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	e612      	b.n	8006938 <_dtoa_r+0x698>
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	dd07      	ble.n	8006d26 <_dtoa_r+0xa86>
 8006d16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d1a:	d0ed      	beq.n	8006cf8 <_dtoa_r+0xa58>
 8006d1c:	9a00      	ldr	r2, [sp, #0]
 8006d1e:	f108 0301 	add.w	r3, r8, #1
 8006d22:	7013      	strb	r3, [r2, #0]
 8006d24:	e608      	b.n	8006938 <_dtoa_r+0x698>
 8006d26:	9b07      	ldr	r3, [sp, #28]
 8006d28:	9a07      	ldr	r2, [sp, #28]
 8006d2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d028      	beq.n	8006d86 <_dtoa_r+0xae6>
 8006d34:	4649      	mov	r1, r9
 8006d36:	2300      	movs	r3, #0
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4658      	mov	r0, fp
 8006d3c:	f000 f9d6 	bl	80070ec <__multadd>
 8006d40:	42af      	cmp	r7, r5
 8006d42:	4681      	mov	r9, r0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	f04f 020a 	mov.w	r2, #10
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	4658      	mov	r0, fp
 8006d50:	d107      	bne.n	8006d62 <_dtoa_r+0xac2>
 8006d52:	f000 f9cb 	bl	80070ec <__multadd>
 8006d56:	4607      	mov	r7, r0
 8006d58:	4605      	mov	r5, r0
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	e774      	b.n	8006c4c <_dtoa_r+0x9ac>
 8006d62:	f000 f9c3 	bl	80070ec <__multadd>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4607      	mov	r7, r0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	4658      	mov	r0, fp
 8006d70:	f000 f9bc 	bl	80070ec <__multadd>
 8006d74:	4605      	mov	r5, r0
 8006d76:	e7f0      	b.n	8006d5a <_dtoa_r+0xaba>
 8006d78:	9b00      	ldr	r3, [sp, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bfcc      	ite	gt
 8006d7e:	461e      	movgt	r6, r3
 8006d80:	2601      	movle	r6, #1
 8006d82:	4456      	add	r6, sl
 8006d84:	2700      	movs	r7, #0
 8006d86:	4649      	mov	r1, r9
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4658      	mov	r0, fp
 8006d8c:	f000 fb5a 	bl	8007444 <__lshift>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4681      	mov	r9, r0
 8006d94:	f000 fbc2 	bl	800751c <__mcmp>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	dcb0      	bgt.n	8006cfe <_dtoa_r+0xa5e>
 8006d9c:	d102      	bne.n	8006da4 <_dtoa_r+0xb04>
 8006d9e:	f018 0f01 	tst.w	r8, #1
 8006da2:	d1ac      	bne.n	8006cfe <_dtoa_r+0xa5e>
 8006da4:	4633      	mov	r3, r6
 8006da6:	461e      	mov	r6, r3
 8006da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dac:	2a30      	cmp	r2, #48	@ 0x30
 8006dae:	d0fa      	beq.n	8006da6 <_dtoa_r+0xb06>
 8006db0:	e5c2      	b.n	8006938 <_dtoa_r+0x698>
 8006db2:	459a      	cmp	sl, r3
 8006db4:	d1a4      	bne.n	8006d00 <_dtoa_r+0xa60>
 8006db6:	9b04      	ldr	r3, [sp, #16]
 8006db8:	3301      	adds	r3, #1
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	2331      	movs	r3, #49	@ 0x31
 8006dbe:	f88a 3000 	strb.w	r3, [sl]
 8006dc2:	e5b9      	b.n	8006938 <_dtoa_r+0x698>
 8006dc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006e24 <_dtoa_r+0xb84>
 8006dca:	b11b      	cbz	r3, 8006dd4 <_dtoa_r+0xb34>
 8006dcc:	f10a 0308 	add.w	r3, sl, #8
 8006dd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	b019      	add	sp, #100	@ 0x64
 8006dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	f77f ae37 	ble.w	8006a52 <_dtoa_r+0x7b2>
 8006de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006de8:	2001      	movs	r0, #1
 8006dea:	e655      	b.n	8006a98 <_dtoa_r+0x7f8>
 8006dec:	9b00      	ldr	r3, [sp, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f77f aed6 	ble.w	8006ba0 <_dtoa_r+0x900>
 8006df4:	4656      	mov	r6, sl
 8006df6:	4621      	mov	r1, r4
 8006df8:	4648      	mov	r0, r9
 8006dfa:	f7ff f9c8 	bl	800618e <quorem>
 8006dfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e02:	f806 8b01 	strb.w	r8, [r6], #1
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	eba6 020a 	sub.w	r2, r6, sl
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	ddb3      	ble.n	8006d78 <_dtoa_r+0xad8>
 8006e10:	4649      	mov	r1, r9
 8006e12:	2300      	movs	r3, #0
 8006e14:	220a      	movs	r2, #10
 8006e16:	4658      	mov	r0, fp
 8006e18:	f000 f968 	bl	80070ec <__multadd>
 8006e1c:	4681      	mov	r9, r0
 8006e1e:	e7ea      	b.n	8006df6 <_dtoa_r+0xb56>
 8006e20:	08008344 	.word	0x08008344
 8006e24:	080082c8 	.word	0x080082c8

08006e28 <_free_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d041      	beq.n	8006eb4 <_free_r+0x8c>
 8006e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e34:	1f0c      	subs	r4, r1, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bfb8      	it	lt
 8006e3a:	18e4      	addlt	r4, r4, r3
 8006e3c:	f000 f8e8 	bl	8007010 <__malloc_lock>
 8006e40:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <_free_r+0x90>)
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	b933      	cbnz	r3, 8006e54 <_free_r+0x2c>
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	6014      	str	r4, [r2, #0]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e50:	f000 b8e4 	b.w	800701c <__malloc_unlock>
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	d908      	bls.n	8006e6a <_free_r+0x42>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	1821      	adds	r1, r4, r0
 8006e5c:	428b      	cmp	r3, r1
 8006e5e:	bf01      	itttt	eq
 8006e60:	6819      	ldreq	r1, [r3, #0]
 8006e62:	685b      	ldreq	r3, [r3, #4]
 8006e64:	1809      	addeq	r1, r1, r0
 8006e66:	6021      	streq	r1, [r4, #0]
 8006e68:	e7ed      	b.n	8006e46 <_free_r+0x1e>
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	b10b      	cbz	r3, 8006e74 <_free_r+0x4c>
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	d9fa      	bls.n	8006e6a <_free_r+0x42>
 8006e74:	6811      	ldr	r1, [r2, #0]
 8006e76:	1850      	adds	r0, r2, r1
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d10b      	bne.n	8006e94 <_free_r+0x6c>
 8006e7c:	6820      	ldr	r0, [r4, #0]
 8006e7e:	4401      	add	r1, r0
 8006e80:	1850      	adds	r0, r2, r1
 8006e82:	4283      	cmp	r3, r0
 8006e84:	6011      	str	r1, [r2, #0]
 8006e86:	d1e0      	bne.n	8006e4a <_free_r+0x22>
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	6053      	str	r3, [r2, #4]
 8006e8e:	4408      	add	r0, r1
 8006e90:	6010      	str	r0, [r2, #0]
 8006e92:	e7da      	b.n	8006e4a <_free_r+0x22>
 8006e94:	d902      	bls.n	8006e9c <_free_r+0x74>
 8006e96:	230c      	movs	r3, #12
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	e7d6      	b.n	8006e4a <_free_r+0x22>
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	1821      	adds	r1, r4, r0
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	bf04      	itt	eq
 8006ea4:	6819      	ldreq	r1, [r3, #0]
 8006ea6:	685b      	ldreq	r3, [r3, #4]
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	bf04      	itt	eq
 8006eac:	1809      	addeq	r1, r1, r0
 8006eae:	6021      	streq	r1, [r4, #0]
 8006eb0:	6054      	str	r4, [r2, #4]
 8006eb2:	e7ca      	b.n	8006e4a <_free_r+0x22>
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	bf00      	nop
 8006eb8:	2000050c 	.word	0x2000050c

08006ebc <malloc>:
 8006ebc:	4b02      	ldr	r3, [pc, #8]	@ (8006ec8 <malloc+0xc>)
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	f000 b825 	b.w	8006f10 <_malloc_r>
 8006ec6:	bf00      	nop
 8006ec8:	20000040 	.word	0x20000040

08006ecc <sbrk_aligned>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4e0f      	ldr	r6, [pc, #60]	@ (8006f0c <sbrk_aligned+0x40>)
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	6831      	ldr	r1, [r6, #0]
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	b911      	cbnz	r1, 8006ede <sbrk_aligned+0x12>
 8006ed8:	f000 fe46 	bl	8007b68 <_sbrk_r>
 8006edc:	6030      	str	r0, [r6, #0]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 fe41 	bl	8007b68 <_sbrk_r>
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	d103      	bne.n	8006ef2 <sbrk_aligned+0x26>
 8006eea:	f04f 34ff 	mov.w	r4, #4294967295
 8006eee:	4620      	mov	r0, r4
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	1cc4      	adds	r4, r0, #3
 8006ef4:	f024 0403 	bic.w	r4, r4, #3
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d0f8      	beq.n	8006eee <sbrk_aligned+0x22>
 8006efc:	1a21      	subs	r1, r4, r0
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 fe32 	bl	8007b68 <_sbrk_r>
 8006f04:	3001      	adds	r0, #1
 8006f06:	d1f2      	bne.n	8006eee <sbrk_aligned+0x22>
 8006f08:	e7ef      	b.n	8006eea <sbrk_aligned+0x1e>
 8006f0a:	bf00      	nop
 8006f0c:	20000508 	.word	0x20000508

08006f10 <_malloc_r>:
 8006f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f14:	1ccd      	adds	r5, r1, #3
 8006f16:	f025 0503 	bic.w	r5, r5, #3
 8006f1a:	3508      	adds	r5, #8
 8006f1c:	2d0c      	cmp	r5, #12
 8006f1e:	bf38      	it	cc
 8006f20:	250c      	movcc	r5, #12
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	4606      	mov	r6, r0
 8006f26:	db01      	blt.n	8006f2c <_malloc_r+0x1c>
 8006f28:	42a9      	cmp	r1, r5
 8006f2a:	d904      	bls.n	8006f36 <_malloc_r+0x26>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	6033      	str	r3, [r6, #0]
 8006f30:	2000      	movs	r0, #0
 8006f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800700c <_malloc_r+0xfc>
 8006f3a:	f000 f869 	bl	8007010 <__malloc_lock>
 8006f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f42:	461c      	mov	r4, r3
 8006f44:	bb44      	cbnz	r4, 8006f98 <_malloc_r+0x88>
 8006f46:	4629      	mov	r1, r5
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7ff ffbf 	bl	8006ecc <sbrk_aligned>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	4604      	mov	r4, r0
 8006f52:	d158      	bne.n	8007006 <_malloc_r+0xf6>
 8006f54:	f8d8 4000 	ldr.w	r4, [r8]
 8006f58:	4627      	mov	r7, r4
 8006f5a:	2f00      	cmp	r7, #0
 8006f5c:	d143      	bne.n	8006fe6 <_malloc_r+0xd6>
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	d04b      	beq.n	8006ffa <_malloc_r+0xea>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	4639      	mov	r1, r7
 8006f66:	4630      	mov	r0, r6
 8006f68:	eb04 0903 	add.w	r9, r4, r3
 8006f6c:	f000 fdfc 	bl	8007b68 <_sbrk_r>
 8006f70:	4581      	cmp	r9, r0
 8006f72:	d142      	bne.n	8006ffa <_malloc_r+0xea>
 8006f74:	6821      	ldr	r1, [r4, #0]
 8006f76:	1a6d      	subs	r5, r5, r1
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff ffa6 	bl	8006ecc <sbrk_aligned>
 8006f80:	3001      	adds	r0, #1
 8006f82:	d03a      	beq.n	8006ffa <_malloc_r+0xea>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	442b      	add	r3, r5
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	bb62      	cbnz	r2, 8006fec <_malloc_r+0xdc>
 8006f92:	f8c8 7000 	str.w	r7, [r8]
 8006f96:	e00f      	b.n	8006fb8 <_malloc_r+0xa8>
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	1b52      	subs	r2, r2, r5
 8006f9c:	d420      	bmi.n	8006fe0 <_malloc_r+0xd0>
 8006f9e:	2a0b      	cmp	r2, #11
 8006fa0:	d917      	bls.n	8006fd2 <_malloc_r+0xc2>
 8006fa2:	1961      	adds	r1, r4, r5
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	6025      	str	r5, [r4, #0]
 8006fa8:	bf18      	it	ne
 8006faa:	6059      	strne	r1, [r3, #4]
 8006fac:	6863      	ldr	r3, [r4, #4]
 8006fae:	bf08      	it	eq
 8006fb0:	f8c8 1000 	streq.w	r1, [r8]
 8006fb4:	5162      	str	r2, [r4, r5]
 8006fb6:	604b      	str	r3, [r1, #4]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f000 f82f 	bl	800701c <__malloc_unlock>
 8006fbe:	f104 000b 	add.w	r0, r4, #11
 8006fc2:	1d23      	adds	r3, r4, #4
 8006fc4:	f020 0007 	bic.w	r0, r0, #7
 8006fc8:	1ac2      	subs	r2, r0, r3
 8006fca:	bf1c      	itt	ne
 8006fcc:	1a1b      	subne	r3, r3, r0
 8006fce:	50a3      	strne	r3, [r4, r2]
 8006fd0:	e7af      	b.n	8006f32 <_malloc_r+0x22>
 8006fd2:	6862      	ldr	r2, [r4, #4]
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	bf0c      	ite	eq
 8006fd8:	f8c8 2000 	streq.w	r2, [r8]
 8006fdc:	605a      	strne	r2, [r3, #4]
 8006fde:	e7eb      	b.n	8006fb8 <_malloc_r+0xa8>
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	6864      	ldr	r4, [r4, #4]
 8006fe4:	e7ae      	b.n	8006f44 <_malloc_r+0x34>
 8006fe6:	463c      	mov	r4, r7
 8006fe8:	687f      	ldr	r7, [r7, #4]
 8006fea:	e7b6      	b.n	8006f5a <_malloc_r+0x4a>
 8006fec:	461a      	mov	r2, r3
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d1fb      	bne.n	8006fec <_malloc_r+0xdc>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6053      	str	r3, [r2, #4]
 8006ff8:	e7de      	b.n	8006fb8 <_malloc_r+0xa8>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	4630      	mov	r0, r6
 8007000:	f000 f80c 	bl	800701c <__malloc_unlock>
 8007004:	e794      	b.n	8006f30 <_malloc_r+0x20>
 8007006:	6005      	str	r5, [r0, #0]
 8007008:	e7d6      	b.n	8006fb8 <_malloc_r+0xa8>
 800700a:	bf00      	nop
 800700c:	2000050c 	.word	0x2000050c

08007010 <__malloc_lock>:
 8007010:	4801      	ldr	r0, [pc, #4]	@ (8007018 <__malloc_lock+0x8>)
 8007012:	f7ff b8ba 	b.w	800618a <__retarget_lock_acquire_recursive>
 8007016:	bf00      	nop
 8007018:	20000504 	.word	0x20000504

0800701c <__malloc_unlock>:
 800701c:	4801      	ldr	r0, [pc, #4]	@ (8007024 <__malloc_unlock+0x8>)
 800701e:	f7ff b8b5 	b.w	800618c <__retarget_lock_release_recursive>
 8007022:	bf00      	nop
 8007024:	20000504 	.word	0x20000504

08007028 <_Balloc>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	69c6      	ldr	r6, [r0, #28]
 800702c:	4604      	mov	r4, r0
 800702e:	460d      	mov	r5, r1
 8007030:	b976      	cbnz	r6, 8007050 <_Balloc+0x28>
 8007032:	2010      	movs	r0, #16
 8007034:	f7ff ff42 	bl	8006ebc <malloc>
 8007038:	4602      	mov	r2, r0
 800703a:	61e0      	str	r0, [r4, #28]
 800703c:	b920      	cbnz	r0, 8007048 <_Balloc+0x20>
 800703e:	4b18      	ldr	r3, [pc, #96]	@ (80070a0 <_Balloc+0x78>)
 8007040:	4818      	ldr	r0, [pc, #96]	@ (80070a4 <_Balloc+0x7c>)
 8007042:	216b      	movs	r1, #107	@ 0x6b
 8007044:	f000 fdae 	bl	8007ba4 <__assert_func>
 8007048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800704c:	6006      	str	r6, [r0, #0]
 800704e:	60c6      	str	r6, [r0, #12]
 8007050:	69e6      	ldr	r6, [r4, #28]
 8007052:	68f3      	ldr	r3, [r6, #12]
 8007054:	b183      	cbz	r3, 8007078 <_Balloc+0x50>
 8007056:	69e3      	ldr	r3, [r4, #28]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800705e:	b9b8      	cbnz	r0, 8007090 <_Balloc+0x68>
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f605 	lsl.w	r6, r1, r5
 8007066:	1d72      	adds	r2, r6, #5
 8007068:	0092      	lsls	r2, r2, #2
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fdb8 	bl	8007be0 <_calloc_r>
 8007070:	b160      	cbz	r0, 800708c <_Balloc+0x64>
 8007072:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007076:	e00e      	b.n	8007096 <_Balloc+0x6e>
 8007078:	2221      	movs	r2, #33	@ 0x21
 800707a:	2104      	movs	r1, #4
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fdaf 	bl	8007be0 <_calloc_r>
 8007082:	69e3      	ldr	r3, [r4, #28]
 8007084:	60f0      	str	r0, [r6, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e4      	bne.n	8007056 <_Balloc+0x2e>
 800708c:	2000      	movs	r0, #0
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	6802      	ldr	r2, [r0, #0]
 8007092:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007096:	2300      	movs	r3, #0
 8007098:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800709c:	e7f7      	b.n	800708e <_Balloc+0x66>
 800709e:	bf00      	nop
 80070a0:	080082d5 	.word	0x080082d5
 80070a4:	08008355 	.word	0x08008355

080070a8 <_Bfree>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	69c6      	ldr	r6, [r0, #28]
 80070ac:	4605      	mov	r5, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	b976      	cbnz	r6, 80070d0 <_Bfree+0x28>
 80070b2:	2010      	movs	r0, #16
 80070b4:	f7ff ff02 	bl	8006ebc <malloc>
 80070b8:	4602      	mov	r2, r0
 80070ba:	61e8      	str	r0, [r5, #28]
 80070bc:	b920      	cbnz	r0, 80070c8 <_Bfree+0x20>
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <_Bfree+0x3c>)
 80070c0:	4809      	ldr	r0, [pc, #36]	@ (80070e8 <_Bfree+0x40>)
 80070c2:	218f      	movs	r1, #143	@ 0x8f
 80070c4:	f000 fd6e 	bl	8007ba4 <__assert_func>
 80070c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070cc:	6006      	str	r6, [r0, #0]
 80070ce:	60c6      	str	r6, [r0, #12]
 80070d0:	b13c      	cbz	r4, 80070e2 <_Bfree+0x3a>
 80070d2:	69eb      	ldr	r3, [r5, #28]
 80070d4:	6862      	ldr	r2, [r4, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070dc:	6021      	str	r1, [r4, #0]
 80070de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	080082d5 	.word	0x080082d5
 80070e8:	08008355 	.word	0x08008355

080070ec <__multadd>:
 80070ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f0:	690d      	ldr	r5, [r1, #16]
 80070f2:	4607      	mov	r7, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	461e      	mov	r6, r3
 80070f8:	f101 0c14 	add.w	ip, r1, #20
 80070fc:	2000      	movs	r0, #0
 80070fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007102:	b299      	uxth	r1, r3
 8007104:	fb02 6101 	mla	r1, r2, r1, r6
 8007108:	0c1e      	lsrs	r6, r3, #16
 800710a:	0c0b      	lsrs	r3, r1, #16
 800710c:	fb02 3306 	mla	r3, r2, r6, r3
 8007110:	b289      	uxth	r1, r1
 8007112:	3001      	adds	r0, #1
 8007114:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007118:	4285      	cmp	r5, r0
 800711a:	f84c 1b04 	str.w	r1, [ip], #4
 800711e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007122:	dcec      	bgt.n	80070fe <__multadd+0x12>
 8007124:	b30e      	cbz	r6, 800716a <__multadd+0x7e>
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	42ab      	cmp	r3, r5
 800712a:	dc19      	bgt.n	8007160 <__multadd+0x74>
 800712c:	6861      	ldr	r1, [r4, #4]
 800712e:	4638      	mov	r0, r7
 8007130:	3101      	adds	r1, #1
 8007132:	f7ff ff79 	bl	8007028 <_Balloc>
 8007136:	4680      	mov	r8, r0
 8007138:	b928      	cbnz	r0, 8007146 <__multadd+0x5a>
 800713a:	4602      	mov	r2, r0
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <__multadd+0x84>)
 800713e:	480d      	ldr	r0, [pc, #52]	@ (8007174 <__multadd+0x88>)
 8007140:	21ba      	movs	r1, #186	@ 0xba
 8007142:	f000 fd2f 	bl	8007ba4 <__assert_func>
 8007146:	6922      	ldr	r2, [r4, #16]
 8007148:	3202      	adds	r2, #2
 800714a:	f104 010c 	add.w	r1, r4, #12
 800714e:	0092      	lsls	r2, r2, #2
 8007150:	300c      	adds	r0, #12
 8007152:	f000 fd19 	bl	8007b88 <memcpy>
 8007156:	4621      	mov	r1, r4
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff ffa5 	bl	80070a8 <_Bfree>
 800715e:	4644      	mov	r4, r8
 8007160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007164:	3501      	adds	r5, #1
 8007166:	615e      	str	r6, [r3, #20]
 8007168:	6125      	str	r5, [r4, #16]
 800716a:	4620      	mov	r0, r4
 800716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007170:	08008344 	.word	0x08008344
 8007174:	08008355 	.word	0x08008355

08007178 <__hi0bits>:
 8007178:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800717c:	4603      	mov	r3, r0
 800717e:	bf36      	itet	cc
 8007180:	0403      	lslcc	r3, r0, #16
 8007182:	2000      	movcs	r0, #0
 8007184:	2010      	movcc	r0, #16
 8007186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800718a:	bf3c      	itt	cc
 800718c:	021b      	lslcc	r3, r3, #8
 800718e:	3008      	addcc	r0, #8
 8007190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007194:	bf3c      	itt	cc
 8007196:	011b      	lslcc	r3, r3, #4
 8007198:	3004      	addcc	r0, #4
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719e:	bf3c      	itt	cc
 80071a0:	009b      	lslcc	r3, r3, #2
 80071a2:	3002      	addcc	r0, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	db05      	blt.n	80071b4 <__hi0bits+0x3c>
 80071a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80071ac:	f100 0001 	add.w	r0, r0, #1
 80071b0:	bf08      	it	eq
 80071b2:	2020      	moveq	r0, #32
 80071b4:	4770      	bx	lr

080071b6 <__lo0bits>:
 80071b6:	6803      	ldr	r3, [r0, #0]
 80071b8:	4602      	mov	r2, r0
 80071ba:	f013 0007 	ands.w	r0, r3, #7
 80071be:	d00b      	beq.n	80071d8 <__lo0bits+0x22>
 80071c0:	07d9      	lsls	r1, r3, #31
 80071c2:	d421      	bmi.n	8007208 <__lo0bits+0x52>
 80071c4:	0798      	lsls	r0, r3, #30
 80071c6:	bf49      	itett	mi
 80071c8:	085b      	lsrmi	r3, r3, #1
 80071ca:	089b      	lsrpl	r3, r3, #2
 80071cc:	2001      	movmi	r0, #1
 80071ce:	6013      	strmi	r3, [r2, #0]
 80071d0:	bf5c      	itt	pl
 80071d2:	6013      	strpl	r3, [r2, #0]
 80071d4:	2002      	movpl	r0, #2
 80071d6:	4770      	bx	lr
 80071d8:	b299      	uxth	r1, r3
 80071da:	b909      	cbnz	r1, 80071e0 <__lo0bits+0x2a>
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	2010      	movs	r0, #16
 80071e0:	b2d9      	uxtb	r1, r3
 80071e2:	b909      	cbnz	r1, 80071e8 <__lo0bits+0x32>
 80071e4:	3008      	adds	r0, #8
 80071e6:	0a1b      	lsrs	r3, r3, #8
 80071e8:	0719      	lsls	r1, r3, #28
 80071ea:	bf04      	itt	eq
 80071ec:	091b      	lsreq	r3, r3, #4
 80071ee:	3004      	addeq	r0, #4
 80071f0:	0799      	lsls	r1, r3, #30
 80071f2:	bf04      	itt	eq
 80071f4:	089b      	lsreq	r3, r3, #2
 80071f6:	3002      	addeq	r0, #2
 80071f8:	07d9      	lsls	r1, r3, #31
 80071fa:	d403      	bmi.n	8007204 <__lo0bits+0x4e>
 80071fc:	085b      	lsrs	r3, r3, #1
 80071fe:	f100 0001 	add.w	r0, r0, #1
 8007202:	d003      	beq.n	800720c <__lo0bits+0x56>
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	4770      	bx	lr
 8007208:	2000      	movs	r0, #0
 800720a:	4770      	bx	lr
 800720c:	2020      	movs	r0, #32
 800720e:	4770      	bx	lr

08007210 <__i2b>:
 8007210:	b510      	push	{r4, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	2101      	movs	r1, #1
 8007216:	f7ff ff07 	bl	8007028 <_Balloc>
 800721a:	4602      	mov	r2, r0
 800721c:	b928      	cbnz	r0, 800722a <__i2b+0x1a>
 800721e:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <__i2b+0x24>)
 8007220:	4805      	ldr	r0, [pc, #20]	@ (8007238 <__i2b+0x28>)
 8007222:	f240 1145 	movw	r1, #325	@ 0x145
 8007226:	f000 fcbd 	bl	8007ba4 <__assert_func>
 800722a:	2301      	movs	r3, #1
 800722c:	6144      	str	r4, [r0, #20]
 800722e:	6103      	str	r3, [r0, #16]
 8007230:	bd10      	pop	{r4, pc}
 8007232:	bf00      	nop
 8007234:	08008344 	.word	0x08008344
 8007238:	08008355 	.word	0x08008355

0800723c <__multiply>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	4614      	mov	r4, r2
 8007242:	690a      	ldr	r2, [r1, #16]
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	bfa8      	it	ge
 800724a:	4623      	movge	r3, r4
 800724c:	460f      	mov	r7, r1
 800724e:	bfa4      	itt	ge
 8007250:	460c      	movge	r4, r1
 8007252:	461f      	movge	r7, r3
 8007254:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007258:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	6861      	ldr	r1, [r4, #4]
 8007260:	eb0a 0609 	add.w	r6, sl, r9
 8007264:	42b3      	cmp	r3, r6
 8007266:	b085      	sub	sp, #20
 8007268:	bfb8      	it	lt
 800726a:	3101      	addlt	r1, #1
 800726c:	f7ff fedc 	bl	8007028 <_Balloc>
 8007270:	b930      	cbnz	r0, 8007280 <__multiply+0x44>
 8007272:	4602      	mov	r2, r0
 8007274:	4b44      	ldr	r3, [pc, #272]	@ (8007388 <__multiply+0x14c>)
 8007276:	4845      	ldr	r0, [pc, #276]	@ (800738c <__multiply+0x150>)
 8007278:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800727c:	f000 fc92 	bl	8007ba4 <__assert_func>
 8007280:	f100 0514 	add.w	r5, r0, #20
 8007284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007288:	462b      	mov	r3, r5
 800728a:	2200      	movs	r2, #0
 800728c:	4543      	cmp	r3, r8
 800728e:	d321      	bcc.n	80072d4 <__multiply+0x98>
 8007290:	f107 0114 	add.w	r1, r7, #20
 8007294:	f104 0214 	add.w	r2, r4, #20
 8007298:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800729c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	1b13      	subs	r3, r2, r4
 80072a4:	3b15      	subs	r3, #21
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	3304      	adds	r3, #4
 80072ac:	f104 0715 	add.w	r7, r4, #21
 80072b0:	42ba      	cmp	r2, r7
 80072b2:	bf38      	it	cc
 80072b4:	2304      	movcc	r3, #4
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	428b      	cmp	r3, r1
 80072be:	d80c      	bhi.n	80072da <__multiply+0x9e>
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	dd03      	ble.n	80072cc <__multiply+0x90>
 80072c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d05b      	beq.n	8007384 <__multiply+0x148>
 80072cc:	6106      	str	r6, [r0, #16]
 80072ce:	b005      	add	sp, #20
 80072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d4:	f843 2b04 	str.w	r2, [r3], #4
 80072d8:	e7d8      	b.n	800728c <__multiply+0x50>
 80072da:	f8b1 a000 	ldrh.w	sl, [r1]
 80072de:	f1ba 0f00 	cmp.w	sl, #0
 80072e2:	d024      	beq.n	800732e <__multiply+0xf2>
 80072e4:	f104 0e14 	add.w	lr, r4, #20
 80072e8:	46a9      	mov	r9, r5
 80072ea:	f04f 0c00 	mov.w	ip, #0
 80072ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072f2:	f8d9 3000 	ldr.w	r3, [r9]
 80072f6:	fa1f fb87 	uxth.w	fp, r7
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007300:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007304:	f8d9 7000 	ldr.w	r7, [r9]
 8007308:	4463      	add	r3, ip
 800730a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800730e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007312:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007316:	b29b      	uxth	r3, r3
 8007318:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800731c:	4572      	cmp	r2, lr
 800731e:	f849 3b04 	str.w	r3, [r9], #4
 8007322:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007326:	d8e2      	bhi.n	80072ee <__multiply+0xb2>
 8007328:	9b01      	ldr	r3, [sp, #4]
 800732a:	f845 c003 	str.w	ip, [r5, r3]
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007334:	3104      	adds	r1, #4
 8007336:	f1b9 0f00 	cmp.w	r9, #0
 800733a:	d021      	beq.n	8007380 <__multiply+0x144>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	f104 0c14 	add.w	ip, r4, #20
 8007342:	46ae      	mov	lr, r5
 8007344:	f04f 0a00 	mov.w	sl, #0
 8007348:	f8bc b000 	ldrh.w	fp, [ip]
 800734c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007350:	fb09 770b 	mla	r7, r9, fp, r7
 8007354:	4457      	add	r7, sl
 8007356:	b29b      	uxth	r3, r3
 8007358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800735c:	f84e 3b04 	str.w	r3, [lr], #4
 8007360:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007364:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007368:	f8be 3000 	ldrh.w	r3, [lr]
 800736c:	fb09 330a 	mla	r3, r9, sl, r3
 8007370:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007374:	4562      	cmp	r2, ip
 8007376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800737a:	d8e5      	bhi.n	8007348 <__multiply+0x10c>
 800737c:	9f01      	ldr	r7, [sp, #4]
 800737e:	51eb      	str	r3, [r5, r7]
 8007380:	3504      	adds	r5, #4
 8007382:	e799      	b.n	80072b8 <__multiply+0x7c>
 8007384:	3e01      	subs	r6, #1
 8007386:	e79b      	b.n	80072c0 <__multiply+0x84>
 8007388:	08008344 	.word	0x08008344
 800738c:	08008355 	.word	0x08008355

08007390 <__pow5mult>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4615      	mov	r5, r2
 8007396:	f012 0203 	ands.w	r2, r2, #3
 800739a:	4607      	mov	r7, r0
 800739c:	460e      	mov	r6, r1
 800739e:	d007      	beq.n	80073b0 <__pow5mult+0x20>
 80073a0:	4c25      	ldr	r4, [pc, #148]	@ (8007438 <__pow5mult+0xa8>)
 80073a2:	3a01      	subs	r2, #1
 80073a4:	2300      	movs	r3, #0
 80073a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073aa:	f7ff fe9f 	bl	80070ec <__multadd>
 80073ae:	4606      	mov	r6, r0
 80073b0:	10ad      	asrs	r5, r5, #2
 80073b2:	d03d      	beq.n	8007430 <__pow5mult+0xa0>
 80073b4:	69fc      	ldr	r4, [r7, #28]
 80073b6:	b97c      	cbnz	r4, 80073d8 <__pow5mult+0x48>
 80073b8:	2010      	movs	r0, #16
 80073ba:	f7ff fd7f 	bl	8006ebc <malloc>
 80073be:	4602      	mov	r2, r0
 80073c0:	61f8      	str	r0, [r7, #28]
 80073c2:	b928      	cbnz	r0, 80073d0 <__pow5mult+0x40>
 80073c4:	4b1d      	ldr	r3, [pc, #116]	@ (800743c <__pow5mult+0xac>)
 80073c6:	481e      	ldr	r0, [pc, #120]	@ (8007440 <__pow5mult+0xb0>)
 80073c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80073cc:	f000 fbea 	bl	8007ba4 <__assert_func>
 80073d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073d4:	6004      	str	r4, [r0, #0]
 80073d6:	60c4      	str	r4, [r0, #12]
 80073d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80073dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073e0:	b94c      	cbnz	r4, 80073f6 <__pow5mult+0x66>
 80073e2:	f240 2171 	movw	r1, #625	@ 0x271
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7ff ff12 	bl	8007210 <__i2b>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80073f2:	4604      	mov	r4, r0
 80073f4:	6003      	str	r3, [r0, #0]
 80073f6:	f04f 0900 	mov.w	r9, #0
 80073fa:	07eb      	lsls	r3, r5, #31
 80073fc:	d50a      	bpl.n	8007414 <__pow5mult+0x84>
 80073fe:	4631      	mov	r1, r6
 8007400:	4622      	mov	r2, r4
 8007402:	4638      	mov	r0, r7
 8007404:	f7ff ff1a 	bl	800723c <__multiply>
 8007408:	4631      	mov	r1, r6
 800740a:	4680      	mov	r8, r0
 800740c:	4638      	mov	r0, r7
 800740e:	f7ff fe4b 	bl	80070a8 <_Bfree>
 8007412:	4646      	mov	r6, r8
 8007414:	106d      	asrs	r5, r5, #1
 8007416:	d00b      	beq.n	8007430 <__pow5mult+0xa0>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	b938      	cbnz	r0, 800742c <__pow5mult+0x9c>
 800741c:	4622      	mov	r2, r4
 800741e:	4621      	mov	r1, r4
 8007420:	4638      	mov	r0, r7
 8007422:	f7ff ff0b 	bl	800723c <__multiply>
 8007426:	6020      	str	r0, [r4, #0]
 8007428:	f8c0 9000 	str.w	r9, [r0]
 800742c:	4604      	mov	r4, r0
 800742e:	e7e4      	b.n	80073fa <__pow5mult+0x6a>
 8007430:	4630      	mov	r0, r6
 8007432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007436:	bf00      	nop
 8007438:	080083b0 	.word	0x080083b0
 800743c:	080082d5 	.word	0x080082d5
 8007440:	08008355 	.word	0x08008355

08007444 <__lshift>:
 8007444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007448:	460c      	mov	r4, r1
 800744a:	6849      	ldr	r1, [r1, #4]
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	4607      	mov	r7, r0
 8007456:	4691      	mov	r9, r2
 8007458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800745c:	f108 0601 	add.w	r6, r8, #1
 8007460:	42b3      	cmp	r3, r6
 8007462:	db0b      	blt.n	800747c <__lshift+0x38>
 8007464:	4638      	mov	r0, r7
 8007466:	f7ff fddf 	bl	8007028 <_Balloc>
 800746a:	4605      	mov	r5, r0
 800746c:	b948      	cbnz	r0, 8007482 <__lshift+0x3e>
 800746e:	4602      	mov	r2, r0
 8007470:	4b28      	ldr	r3, [pc, #160]	@ (8007514 <__lshift+0xd0>)
 8007472:	4829      	ldr	r0, [pc, #164]	@ (8007518 <__lshift+0xd4>)
 8007474:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007478:	f000 fb94 	bl	8007ba4 <__assert_func>
 800747c:	3101      	adds	r1, #1
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	e7ee      	b.n	8007460 <__lshift+0x1c>
 8007482:	2300      	movs	r3, #0
 8007484:	f100 0114 	add.w	r1, r0, #20
 8007488:	f100 0210 	add.w	r2, r0, #16
 800748c:	4618      	mov	r0, r3
 800748e:	4553      	cmp	r3, sl
 8007490:	db33      	blt.n	80074fa <__lshift+0xb6>
 8007492:	6920      	ldr	r0, [r4, #16]
 8007494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007498:	f104 0314 	add.w	r3, r4, #20
 800749c:	f019 091f 	ands.w	r9, r9, #31
 80074a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074a8:	d02b      	beq.n	8007502 <__lshift+0xbe>
 80074aa:	f1c9 0e20 	rsb	lr, r9, #32
 80074ae:	468a      	mov	sl, r1
 80074b0:	2200      	movs	r2, #0
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	fa00 f009 	lsl.w	r0, r0, r9
 80074b8:	4310      	orrs	r0, r2
 80074ba:	f84a 0b04 	str.w	r0, [sl], #4
 80074be:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c2:	459c      	cmp	ip, r3
 80074c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80074c8:	d8f3      	bhi.n	80074b2 <__lshift+0x6e>
 80074ca:	ebac 0304 	sub.w	r3, ip, r4
 80074ce:	3b15      	subs	r3, #21
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	3304      	adds	r3, #4
 80074d6:	f104 0015 	add.w	r0, r4, #21
 80074da:	4584      	cmp	ip, r0
 80074dc:	bf38      	it	cc
 80074de:	2304      	movcc	r3, #4
 80074e0:	50ca      	str	r2, [r1, r3]
 80074e2:	b10a      	cbz	r2, 80074e8 <__lshift+0xa4>
 80074e4:	f108 0602 	add.w	r6, r8, #2
 80074e8:	3e01      	subs	r6, #1
 80074ea:	4638      	mov	r0, r7
 80074ec:	612e      	str	r6, [r5, #16]
 80074ee:	4621      	mov	r1, r4
 80074f0:	f7ff fdda 	bl	80070a8 <_Bfree>
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80074fe:	3301      	adds	r3, #1
 8007500:	e7c5      	b.n	800748e <__lshift+0x4a>
 8007502:	3904      	subs	r1, #4
 8007504:	f853 2b04 	ldr.w	r2, [r3], #4
 8007508:	f841 2f04 	str.w	r2, [r1, #4]!
 800750c:	459c      	cmp	ip, r3
 800750e:	d8f9      	bhi.n	8007504 <__lshift+0xc0>
 8007510:	e7ea      	b.n	80074e8 <__lshift+0xa4>
 8007512:	bf00      	nop
 8007514:	08008344 	.word	0x08008344
 8007518:	08008355 	.word	0x08008355

0800751c <__mcmp>:
 800751c:	690a      	ldr	r2, [r1, #16]
 800751e:	4603      	mov	r3, r0
 8007520:	6900      	ldr	r0, [r0, #16]
 8007522:	1a80      	subs	r0, r0, r2
 8007524:	b530      	push	{r4, r5, lr}
 8007526:	d10e      	bne.n	8007546 <__mcmp+0x2a>
 8007528:	3314      	adds	r3, #20
 800752a:	3114      	adds	r1, #20
 800752c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800753c:	4295      	cmp	r5, r2
 800753e:	d003      	beq.n	8007548 <__mcmp+0x2c>
 8007540:	d205      	bcs.n	800754e <__mcmp+0x32>
 8007542:	f04f 30ff 	mov.w	r0, #4294967295
 8007546:	bd30      	pop	{r4, r5, pc}
 8007548:	42a3      	cmp	r3, r4
 800754a:	d3f3      	bcc.n	8007534 <__mcmp+0x18>
 800754c:	e7fb      	b.n	8007546 <__mcmp+0x2a>
 800754e:	2001      	movs	r0, #1
 8007550:	e7f9      	b.n	8007546 <__mcmp+0x2a>
	...

08007554 <__mdiff>:
 8007554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	4689      	mov	r9, r1
 800755a:	4606      	mov	r6, r0
 800755c:	4611      	mov	r1, r2
 800755e:	4648      	mov	r0, r9
 8007560:	4614      	mov	r4, r2
 8007562:	f7ff ffdb 	bl	800751c <__mcmp>
 8007566:	1e05      	subs	r5, r0, #0
 8007568:	d112      	bne.n	8007590 <__mdiff+0x3c>
 800756a:	4629      	mov	r1, r5
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff fd5b 	bl	8007028 <_Balloc>
 8007572:	4602      	mov	r2, r0
 8007574:	b928      	cbnz	r0, 8007582 <__mdiff+0x2e>
 8007576:	4b3f      	ldr	r3, [pc, #252]	@ (8007674 <__mdiff+0x120>)
 8007578:	f240 2137 	movw	r1, #567	@ 0x237
 800757c:	483e      	ldr	r0, [pc, #248]	@ (8007678 <__mdiff+0x124>)
 800757e:	f000 fb11 	bl	8007ba4 <__assert_func>
 8007582:	2301      	movs	r3, #1
 8007584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007588:	4610      	mov	r0, r2
 800758a:	b003      	add	sp, #12
 800758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007590:	bfbc      	itt	lt
 8007592:	464b      	movlt	r3, r9
 8007594:	46a1      	movlt	r9, r4
 8007596:	4630      	mov	r0, r6
 8007598:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800759c:	bfba      	itte	lt
 800759e:	461c      	movlt	r4, r3
 80075a0:	2501      	movlt	r5, #1
 80075a2:	2500      	movge	r5, #0
 80075a4:	f7ff fd40 	bl	8007028 <_Balloc>
 80075a8:	4602      	mov	r2, r0
 80075aa:	b918      	cbnz	r0, 80075b4 <__mdiff+0x60>
 80075ac:	4b31      	ldr	r3, [pc, #196]	@ (8007674 <__mdiff+0x120>)
 80075ae:	f240 2145 	movw	r1, #581	@ 0x245
 80075b2:	e7e3      	b.n	800757c <__mdiff+0x28>
 80075b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075b8:	6926      	ldr	r6, [r4, #16]
 80075ba:	60c5      	str	r5, [r0, #12]
 80075bc:	f109 0310 	add.w	r3, r9, #16
 80075c0:	f109 0514 	add.w	r5, r9, #20
 80075c4:	f104 0e14 	add.w	lr, r4, #20
 80075c8:	f100 0b14 	add.w	fp, r0, #20
 80075cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80075d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	46d9      	mov	r9, fp
 80075d8:	f04f 0c00 	mov.w	ip, #0
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80075e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	fa1f f38a 	uxth.w	r3, sl
 80075ec:	4619      	mov	r1, r3
 80075ee:	b283      	uxth	r3, r0
 80075f0:	1acb      	subs	r3, r1, r3
 80075f2:	0c00      	lsrs	r0, r0, #16
 80075f4:	4463      	add	r3, ip
 80075f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075fe:	b29b      	uxth	r3, r3
 8007600:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007604:	4576      	cmp	r6, lr
 8007606:	f849 3b04 	str.w	r3, [r9], #4
 800760a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800760e:	d8e5      	bhi.n	80075dc <__mdiff+0x88>
 8007610:	1b33      	subs	r3, r6, r4
 8007612:	3b15      	subs	r3, #21
 8007614:	f023 0303 	bic.w	r3, r3, #3
 8007618:	3415      	adds	r4, #21
 800761a:	3304      	adds	r3, #4
 800761c:	42a6      	cmp	r6, r4
 800761e:	bf38      	it	cc
 8007620:	2304      	movcc	r3, #4
 8007622:	441d      	add	r5, r3
 8007624:	445b      	add	r3, fp
 8007626:	461e      	mov	r6, r3
 8007628:	462c      	mov	r4, r5
 800762a:	4544      	cmp	r4, r8
 800762c:	d30e      	bcc.n	800764c <__mdiff+0xf8>
 800762e:	f108 0103 	add.w	r1, r8, #3
 8007632:	1b49      	subs	r1, r1, r5
 8007634:	f021 0103 	bic.w	r1, r1, #3
 8007638:	3d03      	subs	r5, #3
 800763a:	45a8      	cmp	r8, r5
 800763c:	bf38      	it	cc
 800763e:	2100      	movcc	r1, #0
 8007640:	440b      	add	r3, r1
 8007642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007646:	b191      	cbz	r1, 800766e <__mdiff+0x11a>
 8007648:	6117      	str	r7, [r2, #16]
 800764a:	e79d      	b.n	8007588 <__mdiff+0x34>
 800764c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007650:	46e6      	mov	lr, ip
 8007652:	0c08      	lsrs	r0, r1, #16
 8007654:	fa1c fc81 	uxtah	ip, ip, r1
 8007658:	4471      	add	r1, lr
 800765a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800765e:	b289      	uxth	r1, r1
 8007660:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007664:	f846 1b04 	str.w	r1, [r6], #4
 8007668:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800766c:	e7dd      	b.n	800762a <__mdiff+0xd6>
 800766e:	3f01      	subs	r7, #1
 8007670:	e7e7      	b.n	8007642 <__mdiff+0xee>
 8007672:	bf00      	nop
 8007674:	08008344 	.word	0x08008344
 8007678:	08008355 	.word	0x08008355

0800767c <__d2b>:
 800767c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007680:	460f      	mov	r7, r1
 8007682:	2101      	movs	r1, #1
 8007684:	ec59 8b10 	vmov	r8, r9, d0
 8007688:	4616      	mov	r6, r2
 800768a:	f7ff fccd 	bl	8007028 <_Balloc>
 800768e:	4604      	mov	r4, r0
 8007690:	b930      	cbnz	r0, 80076a0 <__d2b+0x24>
 8007692:	4602      	mov	r2, r0
 8007694:	4b23      	ldr	r3, [pc, #140]	@ (8007724 <__d2b+0xa8>)
 8007696:	4824      	ldr	r0, [pc, #144]	@ (8007728 <__d2b+0xac>)
 8007698:	f240 310f 	movw	r1, #783	@ 0x30f
 800769c:	f000 fa82 	bl	8007ba4 <__assert_func>
 80076a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076a8:	b10d      	cbz	r5, 80076ae <__d2b+0x32>
 80076aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	f1b8 0300 	subs.w	r3, r8, #0
 80076b4:	d023      	beq.n	80076fe <__d2b+0x82>
 80076b6:	4668      	mov	r0, sp
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	f7ff fd7c 	bl	80071b6 <__lo0bits>
 80076be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076c2:	b1d0      	cbz	r0, 80076fa <__d2b+0x7e>
 80076c4:	f1c0 0320 	rsb	r3, r0, #32
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	430b      	orrs	r3, r1
 80076ce:	40c2      	lsrs	r2, r0
 80076d0:	6163      	str	r3, [r4, #20]
 80076d2:	9201      	str	r2, [sp, #4]
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	61a3      	str	r3, [r4, #24]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bf0c      	ite	eq
 80076dc:	2201      	moveq	r2, #1
 80076de:	2202      	movne	r2, #2
 80076e0:	6122      	str	r2, [r4, #16]
 80076e2:	b1a5      	cbz	r5, 800770e <__d2b+0x92>
 80076e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80076e8:	4405      	add	r5, r0
 80076ea:	603d      	str	r5, [r7, #0]
 80076ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80076f0:	6030      	str	r0, [r6, #0]
 80076f2:	4620      	mov	r0, r4
 80076f4:	b003      	add	sp, #12
 80076f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076fa:	6161      	str	r1, [r4, #20]
 80076fc:	e7ea      	b.n	80076d4 <__d2b+0x58>
 80076fe:	a801      	add	r0, sp, #4
 8007700:	f7ff fd59 	bl	80071b6 <__lo0bits>
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	6163      	str	r3, [r4, #20]
 8007708:	3020      	adds	r0, #32
 800770a:	2201      	movs	r2, #1
 800770c:	e7e8      	b.n	80076e0 <__d2b+0x64>
 800770e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007712:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007716:	6038      	str	r0, [r7, #0]
 8007718:	6918      	ldr	r0, [r3, #16]
 800771a:	f7ff fd2d 	bl	8007178 <__hi0bits>
 800771e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007722:	e7e5      	b.n	80076f0 <__d2b+0x74>
 8007724:	08008344 	.word	0x08008344
 8007728:	08008355 	.word	0x08008355

0800772c <__ssputs_r>:
 800772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	688e      	ldr	r6, [r1, #8]
 8007732:	461f      	mov	r7, r3
 8007734:	42be      	cmp	r6, r7
 8007736:	680b      	ldr	r3, [r1, #0]
 8007738:	4682      	mov	sl, r0
 800773a:	460c      	mov	r4, r1
 800773c:	4690      	mov	r8, r2
 800773e:	d82d      	bhi.n	800779c <__ssputs_r+0x70>
 8007740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007748:	d026      	beq.n	8007798 <__ssputs_r+0x6c>
 800774a:	6965      	ldr	r5, [r4, #20]
 800774c:	6909      	ldr	r1, [r1, #16]
 800774e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007752:	eba3 0901 	sub.w	r9, r3, r1
 8007756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800775a:	1c7b      	adds	r3, r7, #1
 800775c:	444b      	add	r3, r9
 800775e:	106d      	asrs	r5, r5, #1
 8007760:	429d      	cmp	r5, r3
 8007762:	bf38      	it	cc
 8007764:	461d      	movcc	r5, r3
 8007766:	0553      	lsls	r3, r2, #21
 8007768:	d527      	bpl.n	80077ba <__ssputs_r+0x8e>
 800776a:	4629      	mov	r1, r5
 800776c:	f7ff fbd0 	bl	8006f10 <_malloc_r>
 8007770:	4606      	mov	r6, r0
 8007772:	b360      	cbz	r0, 80077ce <__ssputs_r+0xa2>
 8007774:	6921      	ldr	r1, [r4, #16]
 8007776:	464a      	mov	r2, r9
 8007778:	f000 fa06 	bl	8007b88 <memcpy>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	6126      	str	r6, [r4, #16]
 800778a:	6165      	str	r5, [r4, #20]
 800778c:	444e      	add	r6, r9
 800778e:	eba5 0509 	sub.w	r5, r5, r9
 8007792:	6026      	str	r6, [r4, #0]
 8007794:	60a5      	str	r5, [r4, #8]
 8007796:	463e      	mov	r6, r7
 8007798:	42be      	cmp	r6, r7
 800779a:	d900      	bls.n	800779e <__ssputs_r+0x72>
 800779c:	463e      	mov	r6, r7
 800779e:	6820      	ldr	r0, [r4, #0]
 80077a0:	4632      	mov	r2, r6
 80077a2:	4641      	mov	r1, r8
 80077a4:	f000 f9c6 	bl	8007b34 <memmove>
 80077a8:	68a3      	ldr	r3, [r4, #8]
 80077aa:	1b9b      	subs	r3, r3, r6
 80077ac:	60a3      	str	r3, [r4, #8]
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	4433      	add	r3, r6
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	2000      	movs	r0, #0
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ba:	462a      	mov	r2, r5
 80077bc:	f000 fa36 	bl	8007c2c <_realloc_r>
 80077c0:	4606      	mov	r6, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1e0      	bne.n	8007788 <__ssputs_r+0x5c>
 80077c6:	6921      	ldr	r1, [r4, #16]
 80077c8:	4650      	mov	r0, sl
 80077ca:	f7ff fb2d 	bl	8006e28 <_free_r>
 80077ce:	230c      	movs	r3, #12
 80077d0:	f8ca 3000 	str.w	r3, [sl]
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e7e9      	b.n	80077b6 <__ssputs_r+0x8a>
	...

080077e4 <_svfiprintf_r>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	4698      	mov	r8, r3
 80077ea:	898b      	ldrh	r3, [r1, #12]
 80077ec:	061b      	lsls	r3, r3, #24
 80077ee:	b09d      	sub	sp, #116	@ 0x74
 80077f0:	4607      	mov	r7, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	4614      	mov	r4, r2
 80077f6:	d510      	bpl.n	800781a <_svfiprintf_r+0x36>
 80077f8:	690b      	ldr	r3, [r1, #16]
 80077fa:	b973      	cbnz	r3, 800781a <_svfiprintf_r+0x36>
 80077fc:	2140      	movs	r1, #64	@ 0x40
 80077fe:	f7ff fb87 	bl	8006f10 <_malloc_r>
 8007802:	6028      	str	r0, [r5, #0]
 8007804:	6128      	str	r0, [r5, #16]
 8007806:	b930      	cbnz	r0, 8007816 <_svfiprintf_r+0x32>
 8007808:	230c      	movs	r3, #12
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	b01d      	add	sp, #116	@ 0x74
 8007812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007816:	2340      	movs	r3, #64	@ 0x40
 8007818:	616b      	str	r3, [r5, #20]
 800781a:	2300      	movs	r3, #0
 800781c:	9309      	str	r3, [sp, #36]	@ 0x24
 800781e:	2320      	movs	r3, #32
 8007820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007824:	f8cd 800c 	str.w	r8, [sp, #12]
 8007828:	2330      	movs	r3, #48	@ 0x30
 800782a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80079c8 <_svfiprintf_r+0x1e4>
 800782e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007832:	f04f 0901 	mov.w	r9, #1
 8007836:	4623      	mov	r3, r4
 8007838:	469a      	mov	sl, r3
 800783a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800783e:	b10a      	cbz	r2, 8007844 <_svfiprintf_r+0x60>
 8007840:	2a25      	cmp	r2, #37	@ 0x25
 8007842:	d1f9      	bne.n	8007838 <_svfiprintf_r+0x54>
 8007844:	ebba 0b04 	subs.w	fp, sl, r4
 8007848:	d00b      	beq.n	8007862 <_svfiprintf_r+0x7e>
 800784a:	465b      	mov	r3, fp
 800784c:	4622      	mov	r2, r4
 800784e:	4629      	mov	r1, r5
 8007850:	4638      	mov	r0, r7
 8007852:	f7ff ff6b 	bl	800772c <__ssputs_r>
 8007856:	3001      	adds	r0, #1
 8007858:	f000 80a7 	beq.w	80079aa <_svfiprintf_r+0x1c6>
 800785c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800785e:	445a      	add	r2, fp
 8007860:	9209      	str	r2, [sp, #36]	@ 0x24
 8007862:	f89a 3000 	ldrb.w	r3, [sl]
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 809f 	beq.w	80079aa <_svfiprintf_r+0x1c6>
 800786c:	2300      	movs	r3, #0
 800786e:	f04f 32ff 	mov.w	r2, #4294967295
 8007872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007876:	f10a 0a01 	add.w	sl, sl, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	9307      	str	r3, [sp, #28]
 800787e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007882:	931a      	str	r3, [sp, #104]	@ 0x68
 8007884:	4654      	mov	r4, sl
 8007886:	2205      	movs	r2, #5
 8007888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788c:	484e      	ldr	r0, [pc, #312]	@ (80079c8 <_svfiprintf_r+0x1e4>)
 800788e:	f7f8 fcbf 	bl	8000210 <memchr>
 8007892:	9a04      	ldr	r2, [sp, #16]
 8007894:	b9d8      	cbnz	r0, 80078ce <_svfiprintf_r+0xea>
 8007896:	06d0      	lsls	r0, r2, #27
 8007898:	bf44      	itt	mi
 800789a:	2320      	movmi	r3, #32
 800789c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078a0:	0711      	lsls	r1, r2, #28
 80078a2:	bf44      	itt	mi
 80078a4:	232b      	movmi	r3, #43	@ 0x2b
 80078a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078aa:	f89a 3000 	ldrb.w	r3, [sl]
 80078ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80078b0:	d015      	beq.n	80078de <_svfiprintf_r+0xfa>
 80078b2:	9a07      	ldr	r2, [sp, #28]
 80078b4:	4654      	mov	r4, sl
 80078b6:	2000      	movs	r0, #0
 80078b8:	f04f 0c0a 	mov.w	ip, #10
 80078bc:	4621      	mov	r1, r4
 80078be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078c2:	3b30      	subs	r3, #48	@ 0x30
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d94b      	bls.n	8007960 <_svfiprintf_r+0x17c>
 80078c8:	b1b0      	cbz	r0, 80078f8 <_svfiprintf_r+0x114>
 80078ca:	9207      	str	r2, [sp, #28]
 80078cc:	e014      	b.n	80078f8 <_svfiprintf_r+0x114>
 80078ce:	eba0 0308 	sub.w	r3, r0, r8
 80078d2:	fa09 f303 	lsl.w	r3, r9, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	46a2      	mov	sl, r4
 80078dc:	e7d2      	b.n	8007884 <_svfiprintf_r+0xa0>
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	1d19      	adds	r1, r3, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	9103      	str	r1, [sp, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bfbb      	ittet	lt
 80078ea:	425b      	neglt	r3, r3
 80078ec:	f042 0202 	orrlt.w	r2, r2, #2
 80078f0:	9307      	strge	r3, [sp, #28]
 80078f2:	9307      	strlt	r3, [sp, #28]
 80078f4:	bfb8      	it	lt
 80078f6:	9204      	strlt	r2, [sp, #16]
 80078f8:	7823      	ldrb	r3, [r4, #0]
 80078fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80078fc:	d10a      	bne.n	8007914 <_svfiprintf_r+0x130>
 80078fe:	7863      	ldrb	r3, [r4, #1]
 8007900:	2b2a      	cmp	r3, #42	@ 0x2a
 8007902:	d132      	bne.n	800796a <_svfiprintf_r+0x186>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	1d1a      	adds	r2, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	9203      	str	r2, [sp, #12]
 800790c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007910:	3402      	adds	r4, #2
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80079d8 <_svfiprintf_r+0x1f4>
 8007918:	7821      	ldrb	r1, [r4, #0]
 800791a:	2203      	movs	r2, #3
 800791c:	4650      	mov	r0, sl
 800791e:	f7f8 fc77 	bl	8000210 <memchr>
 8007922:	b138      	cbz	r0, 8007934 <_svfiprintf_r+0x150>
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	eba0 000a 	sub.w	r0, r0, sl
 800792a:	2240      	movs	r2, #64	@ 0x40
 800792c:	4082      	lsls	r2, r0
 800792e:	4313      	orrs	r3, r2
 8007930:	3401      	adds	r4, #1
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007938:	4824      	ldr	r0, [pc, #144]	@ (80079cc <_svfiprintf_r+0x1e8>)
 800793a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800793e:	2206      	movs	r2, #6
 8007940:	f7f8 fc66 	bl	8000210 <memchr>
 8007944:	2800      	cmp	r0, #0
 8007946:	d036      	beq.n	80079b6 <_svfiprintf_r+0x1d2>
 8007948:	4b21      	ldr	r3, [pc, #132]	@ (80079d0 <_svfiprintf_r+0x1ec>)
 800794a:	bb1b      	cbnz	r3, 8007994 <_svfiprintf_r+0x1b0>
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	3307      	adds	r3, #7
 8007950:	f023 0307 	bic.w	r3, r3, #7
 8007954:	3308      	adds	r3, #8
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795a:	4433      	add	r3, r6
 800795c:	9309      	str	r3, [sp, #36]	@ 0x24
 800795e:	e76a      	b.n	8007836 <_svfiprintf_r+0x52>
 8007960:	fb0c 3202 	mla	r2, ip, r2, r3
 8007964:	460c      	mov	r4, r1
 8007966:	2001      	movs	r0, #1
 8007968:	e7a8      	b.n	80078bc <_svfiprintf_r+0xd8>
 800796a:	2300      	movs	r3, #0
 800796c:	3401      	adds	r4, #1
 800796e:	9305      	str	r3, [sp, #20]
 8007970:	4619      	mov	r1, r3
 8007972:	f04f 0c0a 	mov.w	ip, #10
 8007976:	4620      	mov	r0, r4
 8007978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800797c:	3a30      	subs	r2, #48	@ 0x30
 800797e:	2a09      	cmp	r2, #9
 8007980:	d903      	bls.n	800798a <_svfiprintf_r+0x1a6>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0c6      	beq.n	8007914 <_svfiprintf_r+0x130>
 8007986:	9105      	str	r1, [sp, #20]
 8007988:	e7c4      	b.n	8007914 <_svfiprintf_r+0x130>
 800798a:	fb0c 2101 	mla	r1, ip, r1, r2
 800798e:	4604      	mov	r4, r0
 8007990:	2301      	movs	r3, #1
 8007992:	e7f0      	b.n	8007976 <_svfiprintf_r+0x192>
 8007994:	ab03      	add	r3, sp, #12
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	462a      	mov	r2, r5
 800799a:	4b0e      	ldr	r3, [pc, #56]	@ (80079d4 <_svfiprintf_r+0x1f0>)
 800799c:	a904      	add	r1, sp, #16
 800799e:	4638      	mov	r0, r7
 80079a0:	f7fd fe84 	bl	80056ac <_printf_float>
 80079a4:	1c42      	adds	r2, r0, #1
 80079a6:	4606      	mov	r6, r0
 80079a8:	d1d6      	bne.n	8007958 <_svfiprintf_r+0x174>
 80079aa:	89ab      	ldrh	r3, [r5, #12]
 80079ac:	065b      	lsls	r3, r3, #25
 80079ae:	f53f af2d 	bmi.w	800780c <_svfiprintf_r+0x28>
 80079b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079b4:	e72c      	b.n	8007810 <_svfiprintf_r+0x2c>
 80079b6:	ab03      	add	r3, sp, #12
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	462a      	mov	r2, r5
 80079bc:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <_svfiprintf_r+0x1f0>)
 80079be:	a904      	add	r1, sp, #16
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7fe f90b 	bl	8005bdc <_printf_i>
 80079c6:	e7ed      	b.n	80079a4 <_svfiprintf_r+0x1c0>
 80079c8:	080084b0 	.word	0x080084b0
 80079cc:	080084ba 	.word	0x080084ba
 80079d0:	080056ad 	.word	0x080056ad
 80079d4:	0800772d 	.word	0x0800772d
 80079d8:	080084b6 	.word	0x080084b6

080079dc <__sflush_r>:
 80079dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	0716      	lsls	r6, r2, #28
 80079e6:	4605      	mov	r5, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	d454      	bmi.n	8007a96 <__sflush_r+0xba>
 80079ec:	684b      	ldr	r3, [r1, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dc02      	bgt.n	80079f8 <__sflush_r+0x1c>
 80079f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd48      	ble.n	8007a8a <__sflush_r+0xae>
 80079f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d045      	beq.n	8007a8a <__sflush_r+0xae>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a04:	682f      	ldr	r7, [r5, #0]
 8007a06:	6a21      	ldr	r1, [r4, #32]
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	d030      	beq.n	8007a6e <__sflush_r+0x92>
 8007a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	0759      	lsls	r1, r3, #29
 8007a12:	d505      	bpl.n	8007a20 <__sflush_r+0x44>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a1a:	b10b      	cbz	r3, 8007a20 <__sflush_r+0x44>
 8007a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	2300      	movs	r3, #0
 8007a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b0      	blx	r6
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	d106      	bne.n	8007a3e <__sflush_r+0x62>
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	291d      	cmp	r1, #29
 8007a34:	d82b      	bhi.n	8007a8e <__sflush_r+0xb2>
 8007a36:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae0 <__sflush_r+0x104>)
 8007a38:	410a      	asrs	r2, r1
 8007a3a:	07d6      	lsls	r6, r2, #31
 8007a3c:	d427      	bmi.n	8007a8e <__sflush_r+0xb2>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	6062      	str	r2, [r4, #4]
 8007a42:	04d9      	lsls	r1, r3, #19
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	d504      	bpl.n	8007a54 <__sflush_r+0x78>
 8007a4a:	1c42      	adds	r2, r0, #1
 8007a4c:	d101      	bne.n	8007a52 <__sflush_r+0x76>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b903      	cbnz	r3, 8007a54 <__sflush_r+0x78>
 8007a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a56:	602f      	str	r7, [r5, #0]
 8007a58:	b1b9      	cbz	r1, 8007a8a <__sflush_r+0xae>
 8007a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	d002      	beq.n	8007a68 <__sflush_r+0x8c>
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff f9e0 	bl	8006e28 <_free_r>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a6c:	e00d      	b.n	8007a8a <__sflush_r+0xae>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	4602      	mov	r2, r0
 8007a76:	1c50      	adds	r0, r2, #1
 8007a78:	d1c9      	bne.n	8007a0e <__sflush_r+0x32>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0c6      	beq.n	8007a0e <__sflush_r+0x32>
 8007a80:	2b1d      	cmp	r3, #29
 8007a82:	d001      	beq.n	8007a88 <__sflush_r+0xac>
 8007a84:	2b16      	cmp	r3, #22
 8007a86:	d11e      	bne.n	8007ac6 <__sflush_r+0xea>
 8007a88:	602f      	str	r7, [r5, #0]
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e022      	b.n	8007ad4 <__sflush_r+0xf8>
 8007a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a92:	b21b      	sxth	r3, r3
 8007a94:	e01b      	b.n	8007ace <__sflush_r+0xf2>
 8007a96:	690f      	ldr	r7, [r1, #16]
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	d0f6      	beq.n	8007a8a <__sflush_r+0xae>
 8007a9c:	0793      	lsls	r3, r2, #30
 8007a9e:	680e      	ldr	r6, [r1, #0]
 8007aa0:	bf08      	it	eq
 8007aa2:	694b      	ldreq	r3, [r1, #20]
 8007aa4:	600f      	str	r7, [r1, #0]
 8007aa6:	bf18      	it	ne
 8007aa8:	2300      	movne	r3, #0
 8007aaa:	eba6 0807 	sub.w	r8, r6, r7
 8007aae:	608b      	str	r3, [r1, #8]
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	dde9      	ble.n	8007a8a <__sflush_r+0xae>
 8007ab6:	6a21      	ldr	r1, [r4, #32]
 8007ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007aba:	4643      	mov	r3, r8
 8007abc:	463a      	mov	r2, r7
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b0      	blx	r6
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	dc08      	bgt.n	8007ad8 <__sflush_r+0xfc>
 8007ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	4407      	add	r7, r0
 8007ada:	eba8 0800 	sub.w	r8, r8, r0
 8007ade:	e7e7      	b.n	8007ab0 <__sflush_r+0xd4>
 8007ae0:	dfbffffe 	.word	0xdfbffffe

08007ae4 <_fflush_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	690b      	ldr	r3, [r1, #16]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b913      	cbnz	r3, 8007af4 <_fflush_r+0x10>
 8007aee:	2500      	movs	r5, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	b118      	cbz	r0, 8007afe <_fflush_r+0x1a>
 8007af6:	6a03      	ldr	r3, [r0, #32]
 8007af8:	b90b      	cbnz	r3, 8007afe <_fflush_r+0x1a>
 8007afa:	f7fe fa1b 	bl	8005f34 <__sinit>
 8007afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f3      	beq.n	8007aee <_fflush_r+0xa>
 8007b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b08:	07d0      	lsls	r0, r2, #31
 8007b0a:	d404      	bmi.n	8007b16 <_fflush_r+0x32>
 8007b0c:	0599      	lsls	r1, r3, #22
 8007b0e:	d402      	bmi.n	8007b16 <_fflush_r+0x32>
 8007b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b12:	f7fe fb3a 	bl	800618a <__retarget_lock_acquire_recursive>
 8007b16:	4628      	mov	r0, r5
 8007b18:	4621      	mov	r1, r4
 8007b1a:	f7ff ff5f 	bl	80079dc <__sflush_r>
 8007b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b20:	07da      	lsls	r2, r3, #31
 8007b22:	4605      	mov	r5, r0
 8007b24:	d4e4      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	059b      	lsls	r3, r3, #22
 8007b2a:	d4e1      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b2e:	f7fe fb2d 	bl	800618c <__retarget_lock_release_recursive>
 8007b32:	e7dd      	b.n	8007af0 <_fflush_r+0xc>

08007b34 <memmove>:
 8007b34:	4288      	cmp	r0, r1
 8007b36:	b510      	push	{r4, lr}
 8007b38:	eb01 0402 	add.w	r4, r1, r2
 8007b3c:	d902      	bls.n	8007b44 <memmove+0x10>
 8007b3e:	4284      	cmp	r4, r0
 8007b40:	4623      	mov	r3, r4
 8007b42:	d807      	bhi.n	8007b54 <memmove+0x20>
 8007b44:	1e43      	subs	r3, r0, #1
 8007b46:	42a1      	cmp	r1, r4
 8007b48:	d008      	beq.n	8007b5c <memmove+0x28>
 8007b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b52:	e7f8      	b.n	8007b46 <memmove+0x12>
 8007b54:	4402      	add	r2, r0
 8007b56:	4601      	mov	r1, r0
 8007b58:	428a      	cmp	r2, r1
 8007b5a:	d100      	bne.n	8007b5e <memmove+0x2a>
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b66:	e7f7      	b.n	8007b58 <memmove+0x24>

08007b68 <_sbrk_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d06      	ldr	r5, [pc, #24]	@ (8007b84 <_sbrk_r+0x1c>)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f7f9 ff18 	bl	80019a8 <_sbrk>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_sbrk_r+0x1a>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_sbrk_r+0x1a>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	20000500 	.word	0x20000500

08007b88 <memcpy>:
 8007b88:	440a      	add	r2, r1
 8007b8a:	4291      	cmp	r1, r2
 8007b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b90:	d100      	bne.n	8007b94 <memcpy+0xc>
 8007b92:	4770      	bx	lr
 8007b94:	b510      	push	{r4, lr}
 8007b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b9e:	4291      	cmp	r1, r2
 8007ba0:	d1f9      	bne.n	8007b96 <memcpy+0xe>
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <__assert_func>:
 8007ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4b09      	ldr	r3, [pc, #36]	@ (8007bd0 <__assert_func+0x2c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4605      	mov	r5, r0
 8007bb0:	68d8      	ldr	r0, [r3, #12]
 8007bb2:	b954      	cbnz	r4, 8007bca <__assert_func+0x26>
 8007bb4:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <__assert_func+0x30>)
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bbc:	9100      	str	r1, [sp, #0]
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	4905      	ldr	r1, [pc, #20]	@ (8007bd8 <__assert_func+0x34>)
 8007bc2:	f000 f86f 	bl	8007ca4 <fiprintf>
 8007bc6:	f000 f87f 	bl	8007cc8 <abort>
 8007bca:	4b04      	ldr	r3, [pc, #16]	@ (8007bdc <__assert_func+0x38>)
 8007bcc:	e7f4      	b.n	8007bb8 <__assert_func+0x14>
 8007bce:	bf00      	nop
 8007bd0:	20000040 	.word	0x20000040
 8007bd4:	08008506 	.word	0x08008506
 8007bd8:	080084d8 	.word	0x080084d8
 8007bdc:	080084cb 	.word	0x080084cb

08007be0 <_calloc_r>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	fba1 5402 	umull	r5, r4, r1, r2
 8007be6:	b93c      	cbnz	r4, 8007bf8 <_calloc_r+0x18>
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7ff f991 	bl	8006f10 <_malloc_r>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b928      	cbnz	r0, 8007bfe <_calloc_r+0x1e>
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	220c      	movs	r2, #12
 8007bfa:	6002      	str	r2, [r0, #0]
 8007bfc:	e7f9      	b.n	8007bf2 <_calloc_r+0x12>
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4621      	mov	r1, r4
 8007c02:	f7fe fa44 	bl	800608e <memset>
 8007c06:	e7f5      	b.n	8007bf4 <_calloc_r+0x14>

08007c08 <__ascii_mbtowc>:
 8007c08:	b082      	sub	sp, #8
 8007c0a:	b901      	cbnz	r1, 8007c0e <__ascii_mbtowc+0x6>
 8007c0c:	a901      	add	r1, sp, #4
 8007c0e:	b142      	cbz	r2, 8007c22 <__ascii_mbtowc+0x1a>
 8007c10:	b14b      	cbz	r3, 8007c26 <__ascii_mbtowc+0x1e>
 8007c12:	7813      	ldrb	r3, [r2, #0]
 8007c14:	600b      	str	r3, [r1, #0]
 8007c16:	7812      	ldrb	r2, [r2, #0]
 8007c18:	1e10      	subs	r0, r2, #0
 8007c1a:	bf18      	it	ne
 8007c1c:	2001      	movne	r0, #1
 8007c1e:	b002      	add	sp, #8
 8007c20:	4770      	bx	lr
 8007c22:	4610      	mov	r0, r2
 8007c24:	e7fb      	b.n	8007c1e <__ascii_mbtowc+0x16>
 8007c26:	f06f 0001 	mvn.w	r0, #1
 8007c2a:	e7f8      	b.n	8007c1e <__ascii_mbtowc+0x16>

08007c2c <_realloc_r>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4680      	mov	r8, r0
 8007c32:	4615      	mov	r5, r2
 8007c34:	460c      	mov	r4, r1
 8007c36:	b921      	cbnz	r1, 8007c42 <_realloc_r+0x16>
 8007c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	f7ff b967 	b.w	8006f10 <_malloc_r>
 8007c42:	b92a      	cbnz	r2, 8007c50 <_realloc_r+0x24>
 8007c44:	f7ff f8f0 	bl	8006e28 <_free_r>
 8007c48:	2400      	movs	r4, #0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	f000 f841 	bl	8007cd6 <_malloc_usable_size_r>
 8007c54:	4285      	cmp	r5, r0
 8007c56:	4606      	mov	r6, r0
 8007c58:	d802      	bhi.n	8007c60 <_realloc_r+0x34>
 8007c5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c5e:	d8f4      	bhi.n	8007c4a <_realloc_r+0x1e>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff f954 	bl	8006f10 <_malloc_r>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0ec      	beq.n	8007c48 <_realloc_r+0x1c>
 8007c6e:	42b5      	cmp	r5, r6
 8007c70:	462a      	mov	r2, r5
 8007c72:	4621      	mov	r1, r4
 8007c74:	bf28      	it	cs
 8007c76:	4632      	movcs	r2, r6
 8007c78:	f7ff ff86 	bl	8007b88 <memcpy>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7ff f8d2 	bl	8006e28 <_free_r>
 8007c84:	463c      	mov	r4, r7
 8007c86:	e7e0      	b.n	8007c4a <_realloc_r+0x1e>

08007c88 <__ascii_wctomb>:
 8007c88:	4603      	mov	r3, r0
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	b141      	cbz	r1, 8007ca0 <__ascii_wctomb+0x18>
 8007c8e:	2aff      	cmp	r2, #255	@ 0xff
 8007c90:	d904      	bls.n	8007c9c <__ascii_wctomb+0x14>
 8007c92:	228a      	movs	r2, #138	@ 0x8a
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9a:	4770      	bx	lr
 8007c9c:	700a      	strb	r2, [r1, #0]
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	4770      	bx	lr
	...

08007ca4 <fiprintf>:
 8007ca4:	b40e      	push	{r1, r2, r3}
 8007ca6:	b503      	push	{r0, r1, lr}
 8007ca8:	4601      	mov	r1, r0
 8007caa:	ab03      	add	r3, sp, #12
 8007cac:	4805      	ldr	r0, [pc, #20]	@ (8007cc4 <fiprintf+0x20>)
 8007cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb2:	6800      	ldr	r0, [r0, #0]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	f000 f83f 	bl	8007d38 <_vfiprintf_r>
 8007cba:	b002      	add	sp, #8
 8007cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc0:	b003      	add	sp, #12
 8007cc2:	4770      	bx	lr
 8007cc4:	20000040 	.word	0x20000040

08007cc8 <abort>:
 8007cc8:	b508      	push	{r3, lr}
 8007cca:	2006      	movs	r0, #6
 8007ccc:	f000 fa08 	bl	80080e0 <raise>
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7f9 fdf1 	bl	80018b8 <_exit>

08007cd6 <_malloc_usable_size_r>:
 8007cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cda:	1f18      	subs	r0, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfbc      	itt	lt
 8007ce0:	580b      	ldrlt	r3, [r1, r0]
 8007ce2:	18c0      	addlt	r0, r0, r3
 8007ce4:	4770      	bx	lr

08007ce6 <__sfputc_r>:
 8007ce6:	6893      	ldr	r3, [r2, #8]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	b410      	push	{r4}
 8007cee:	6093      	str	r3, [r2, #8]
 8007cf0:	da08      	bge.n	8007d04 <__sfputc_r+0x1e>
 8007cf2:	6994      	ldr	r4, [r2, #24]
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	db01      	blt.n	8007cfc <__sfputc_r+0x16>
 8007cf8:	290a      	cmp	r1, #10
 8007cfa:	d103      	bne.n	8007d04 <__sfputc_r+0x1e>
 8007cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d00:	f000 b932 	b.w	8007f68 <__swbuf_r>
 8007d04:	6813      	ldr	r3, [r2, #0]
 8007d06:	1c58      	adds	r0, r3, #1
 8007d08:	6010      	str	r0, [r2, #0]
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <__sfputs_r>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	18d5      	adds	r5, r2, r3
 8007d1e:	42ac      	cmp	r4, r5
 8007d20:	d101      	bne.n	8007d26 <__sfputs_r+0x12>
 8007d22:	2000      	movs	r0, #0
 8007d24:	e007      	b.n	8007d36 <__sfputs_r+0x22>
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	463a      	mov	r2, r7
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff ffda 	bl	8007ce6 <__sfputc_r>
 8007d32:	1c43      	adds	r3, r0, #1
 8007d34:	d1f3      	bne.n	8007d1e <__sfputs_r+0xa>
 8007d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d38 <_vfiprintf_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	b09d      	sub	sp, #116	@ 0x74
 8007d40:	4614      	mov	r4, r2
 8007d42:	4698      	mov	r8, r3
 8007d44:	4606      	mov	r6, r0
 8007d46:	b118      	cbz	r0, 8007d50 <_vfiprintf_r+0x18>
 8007d48:	6a03      	ldr	r3, [r0, #32]
 8007d4a:	b90b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x18>
 8007d4c:	f7fe f8f2 	bl	8005f34 <__sinit>
 8007d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d52:	07d9      	lsls	r1, r3, #31
 8007d54:	d405      	bmi.n	8007d62 <_vfiprintf_r+0x2a>
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	059a      	lsls	r2, r3, #22
 8007d5a:	d402      	bmi.n	8007d62 <_vfiprintf_r+0x2a>
 8007d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d5e:	f7fe fa14 	bl	800618a <__retarget_lock_acquire_recursive>
 8007d62:	89ab      	ldrh	r3, [r5, #12]
 8007d64:	071b      	lsls	r3, r3, #28
 8007d66:	d501      	bpl.n	8007d6c <_vfiprintf_r+0x34>
 8007d68:	692b      	ldr	r3, [r5, #16]
 8007d6a:	b99b      	cbnz	r3, 8007d94 <_vfiprintf_r+0x5c>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f000 f938 	bl	8007fe4 <__swsetup_r>
 8007d74:	b170      	cbz	r0, 8007d94 <_vfiprintf_r+0x5c>
 8007d76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d78:	07dc      	lsls	r4, r3, #31
 8007d7a:	d504      	bpl.n	8007d86 <_vfiprintf_r+0x4e>
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	b01d      	add	sp, #116	@ 0x74
 8007d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	0598      	lsls	r0, r3, #22
 8007d8a:	d4f7      	bmi.n	8007d7c <_vfiprintf_r+0x44>
 8007d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d8e:	f7fe f9fd 	bl	800618c <__retarget_lock_release_recursive>
 8007d92:	e7f3      	b.n	8007d7c <_vfiprintf_r+0x44>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da2:	2330      	movs	r3, #48	@ 0x30
 8007da4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f54 <_vfiprintf_r+0x21c>
 8007da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dac:	f04f 0901 	mov.w	r9, #1
 8007db0:	4623      	mov	r3, r4
 8007db2:	469a      	mov	sl, r3
 8007db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db8:	b10a      	cbz	r2, 8007dbe <_vfiprintf_r+0x86>
 8007dba:	2a25      	cmp	r2, #37	@ 0x25
 8007dbc:	d1f9      	bne.n	8007db2 <_vfiprintf_r+0x7a>
 8007dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc2:	d00b      	beq.n	8007ddc <_vfiprintf_r+0xa4>
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ffa2 	bl	8007d14 <__sfputs_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f000 80a7 	beq.w	8007f24 <_vfiprintf_r+0x1ec>
 8007dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dd8:	445a      	add	r2, fp
 8007dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 809f 	beq.w	8007f24 <_vfiprintf_r+0x1ec>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df0:	f10a 0a01 	add.w	sl, sl, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dfe:	4654      	mov	r4, sl
 8007e00:	2205      	movs	r2, #5
 8007e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e06:	4853      	ldr	r0, [pc, #332]	@ (8007f54 <_vfiprintf_r+0x21c>)
 8007e08:	f7f8 fa02 	bl	8000210 <memchr>
 8007e0c:	9a04      	ldr	r2, [sp, #16]
 8007e0e:	b9d8      	cbnz	r0, 8007e48 <_vfiprintf_r+0x110>
 8007e10:	06d1      	lsls	r1, r2, #27
 8007e12:	bf44      	itt	mi
 8007e14:	2320      	movmi	r3, #32
 8007e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e1a:	0713      	lsls	r3, r2, #28
 8007e1c:	bf44      	itt	mi
 8007e1e:	232b      	movmi	r3, #43	@ 0x2b
 8007e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e2a:	d015      	beq.n	8007e58 <_vfiprintf_r+0x120>
 8007e2c:	9a07      	ldr	r2, [sp, #28]
 8007e2e:	4654      	mov	r4, sl
 8007e30:	2000      	movs	r0, #0
 8007e32:	f04f 0c0a 	mov.w	ip, #10
 8007e36:	4621      	mov	r1, r4
 8007e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e3c:	3b30      	subs	r3, #48	@ 0x30
 8007e3e:	2b09      	cmp	r3, #9
 8007e40:	d94b      	bls.n	8007eda <_vfiprintf_r+0x1a2>
 8007e42:	b1b0      	cbz	r0, 8007e72 <_vfiprintf_r+0x13a>
 8007e44:	9207      	str	r2, [sp, #28]
 8007e46:	e014      	b.n	8007e72 <_vfiprintf_r+0x13a>
 8007e48:	eba0 0308 	sub.w	r3, r0, r8
 8007e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	46a2      	mov	sl, r4
 8007e56:	e7d2      	b.n	8007dfe <_vfiprintf_r+0xc6>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	1d19      	adds	r1, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfbb      	ittet	lt
 8007e64:	425b      	neglt	r3, r3
 8007e66:	f042 0202 	orrlt.w	r2, r2, #2
 8007e6a:	9307      	strge	r3, [sp, #28]
 8007e6c:	9307      	strlt	r3, [sp, #28]
 8007e6e:	bfb8      	it	lt
 8007e70:	9204      	strlt	r2, [sp, #16]
 8007e72:	7823      	ldrb	r3, [r4, #0]
 8007e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e76:	d10a      	bne.n	8007e8e <_vfiprintf_r+0x156>
 8007e78:	7863      	ldrb	r3, [r4, #1]
 8007e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e7c:	d132      	bne.n	8007ee4 <_vfiprintf_r+0x1ac>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	9203      	str	r2, [sp, #12]
 8007e86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e8a:	3402      	adds	r4, #2
 8007e8c:	9305      	str	r3, [sp, #20]
 8007e8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f64 <_vfiprintf_r+0x22c>
 8007e92:	7821      	ldrb	r1, [r4, #0]
 8007e94:	2203      	movs	r2, #3
 8007e96:	4650      	mov	r0, sl
 8007e98:	f7f8 f9ba 	bl	8000210 <memchr>
 8007e9c:	b138      	cbz	r0, 8007eae <_vfiprintf_r+0x176>
 8007e9e:	9b04      	ldr	r3, [sp, #16]
 8007ea0:	eba0 000a 	sub.w	r0, r0, sl
 8007ea4:	2240      	movs	r2, #64	@ 0x40
 8007ea6:	4082      	lsls	r2, r0
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	3401      	adds	r4, #1
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb2:	4829      	ldr	r0, [pc, #164]	@ (8007f58 <_vfiprintf_r+0x220>)
 8007eb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007eb8:	2206      	movs	r2, #6
 8007eba:	f7f8 f9a9 	bl	8000210 <memchr>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d03f      	beq.n	8007f42 <_vfiprintf_r+0x20a>
 8007ec2:	4b26      	ldr	r3, [pc, #152]	@ (8007f5c <_vfiprintf_r+0x224>)
 8007ec4:	bb1b      	cbnz	r3, 8007f0e <_vfiprintf_r+0x1d6>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	3307      	adds	r3, #7
 8007eca:	f023 0307 	bic.w	r3, r3, #7
 8007ece:	3308      	adds	r3, #8
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed4:	443b      	add	r3, r7
 8007ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed8:	e76a      	b.n	8007db0 <_vfiprintf_r+0x78>
 8007eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ede:	460c      	mov	r4, r1
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	e7a8      	b.n	8007e36 <_vfiprintf_r+0xfe>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	3401      	adds	r4, #1
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	4619      	mov	r1, r3
 8007eec:	f04f 0c0a 	mov.w	ip, #10
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef6:	3a30      	subs	r2, #48	@ 0x30
 8007ef8:	2a09      	cmp	r2, #9
 8007efa:	d903      	bls.n	8007f04 <_vfiprintf_r+0x1cc>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0c6      	beq.n	8007e8e <_vfiprintf_r+0x156>
 8007f00:	9105      	str	r1, [sp, #20]
 8007f02:	e7c4      	b.n	8007e8e <_vfiprintf_r+0x156>
 8007f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f08:	4604      	mov	r4, r0
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e7f0      	b.n	8007ef0 <_vfiprintf_r+0x1b8>
 8007f0e:	ab03      	add	r3, sp, #12
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	462a      	mov	r2, r5
 8007f14:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <_vfiprintf_r+0x228>)
 8007f16:	a904      	add	r1, sp, #16
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7fd fbc7 	bl	80056ac <_printf_float>
 8007f1e:	4607      	mov	r7, r0
 8007f20:	1c78      	adds	r0, r7, #1
 8007f22:	d1d6      	bne.n	8007ed2 <_vfiprintf_r+0x19a>
 8007f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f26:	07d9      	lsls	r1, r3, #31
 8007f28:	d405      	bmi.n	8007f36 <_vfiprintf_r+0x1fe>
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	059a      	lsls	r2, r3, #22
 8007f2e:	d402      	bmi.n	8007f36 <_vfiprintf_r+0x1fe>
 8007f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f32:	f7fe f92b 	bl	800618c <__retarget_lock_release_recursive>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	f53f af1f 	bmi.w	8007d7c <_vfiprintf_r+0x44>
 8007f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f40:	e71e      	b.n	8007d80 <_vfiprintf_r+0x48>
 8007f42:	ab03      	add	r3, sp, #12
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	462a      	mov	r2, r5
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <_vfiprintf_r+0x228>)
 8007f4a:	a904      	add	r1, sp, #16
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7fd fe45 	bl	8005bdc <_printf_i>
 8007f52:	e7e4      	b.n	8007f1e <_vfiprintf_r+0x1e6>
 8007f54:	080084b0 	.word	0x080084b0
 8007f58:	080084ba 	.word	0x080084ba
 8007f5c:	080056ad 	.word	0x080056ad
 8007f60:	08007d15 	.word	0x08007d15
 8007f64:	080084b6 	.word	0x080084b6

08007f68 <__swbuf_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	460e      	mov	r6, r1
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	4605      	mov	r5, r0
 8007f70:	b118      	cbz	r0, 8007f7a <__swbuf_r+0x12>
 8007f72:	6a03      	ldr	r3, [r0, #32]
 8007f74:	b90b      	cbnz	r3, 8007f7a <__swbuf_r+0x12>
 8007f76:	f7fd ffdd 	bl	8005f34 <__sinit>
 8007f7a:	69a3      	ldr	r3, [r4, #24]
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	071a      	lsls	r2, r3, #28
 8007f82:	d501      	bpl.n	8007f88 <__swbuf_r+0x20>
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	b943      	cbnz	r3, 8007f9a <__swbuf_r+0x32>
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f000 f82a 	bl	8007fe4 <__swsetup_r>
 8007f90:	b118      	cbz	r0, 8007f9a <__swbuf_r+0x32>
 8007f92:	f04f 37ff 	mov.w	r7, #4294967295
 8007f96:	4638      	mov	r0, r7
 8007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	6922      	ldr	r2, [r4, #16]
 8007f9e:	1a98      	subs	r0, r3, r2
 8007fa0:	6963      	ldr	r3, [r4, #20]
 8007fa2:	b2f6      	uxtb	r6, r6
 8007fa4:	4283      	cmp	r3, r0
 8007fa6:	4637      	mov	r7, r6
 8007fa8:	dc05      	bgt.n	8007fb6 <__swbuf_r+0x4e>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4628      	mov	r0, r5
 8007fae:	f7ff fd99 	bl	8007ae4 <_fflush_r>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d1ed      	bne.n	8007f92 <__swbuf_r+0x2a>
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	60a3      	str	r3, [r4, #8]
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	701e      	strb	r6, [r3, #0]
 8007fc4:	6962      	ldr	r2, [r4, #20]
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d004      	beq.n	8007fd6 <__swbuf_r+0x6e>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	07db      	lsls	r3, r3, #31
 8007fd0:	d5e1      	bpl.n	8007f96 <__swbuf_r+0x2e>
 8007fd2:	2e0a      	cmp	r6, #10
 8007fd4:	d1df      	bne.n	8007f96 <__swbuf_r+0x2e>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f7ff fd83 	bl	8007ae4 <_fflush_r>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d0d9      	beq.n	8007f96 <__swbuf_r+0x2e>
 8007fe2:	e7d6      	b.n	8007f92 <__swbuf_r+0x2a>

08007fe4 <__swsetup_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4b29      	ldr	r3, [pc, #164]	@ (800808c <__swsetup_r+0xa8>)
 8007fe8:	4605      	mov	r5, r0
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	460c      	mov	r4, r1
 8007fee:	b118      	cbz	r0, 8007ff8 <__swsetup_r+0x14>
 8007ff0:	6a03      	ldr	r3, [r0, #32]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <__swsetup_r+0x14>
 8007ff4:	f7fd ff9e 	bl	8005f34 <__sinit>
 8007ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffc:	0719      	lsls	r1, r3, #28
 8007ffe:	d422      	bmi.n	8008046 <__swsetup_r+0x62>
 8008000:	06da      	lsls	r2, r3, #27
 8008002:	d407      	bmi.n	8008014 <__swsetup_r+0x30>
 8008004:	2209      	movs	r2, #9
 8008006:	602a      	str	r2, [r5, #0]
 8008008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800c:	81a3      	strh	r3, [r4, #12]
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	e033      	b.n	800807c <__swsetup_r+0x98>
 8008014:	0758      	lsls	r0, r3, #29
 8008016:	d512      	bpl.n	800803e <__swsetup_r+0x5a>
 8008018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800801a:	b141      	cbz	r1, 800802e <__swsetup_r+0x4a>
 800801c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008020:	4299      	cmp	r1, r3
 8008022:	d002      	beq.n	800802a <__swsetup_r+0x46>
 8008024:	4628      	mov	r0, r5
 8008026:	f7fe feff 	bl	8006e28 <_free_r>
 800802a:	2300      	movs	r3, #0
 800802c:	6363      	str	r3, [r4, #52]	@ 0x34
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	2300      	movs	r3, #0
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f043 0308 	orr.w	r3, r3, #8
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	b94b      	cbnz	r3, 800805e <__swsetup_r+0x7a>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008054:	d003      	beq.n	800805e <__swsetup_r+0x7a>
 8008056:	4621      	mov	r1, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f000 f883 	bl	8008164 <__smakebuf_r>
 800805e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008062:	f013 0201 	ands.w	r2, r3, #1
 8008066:	d00a      	beq.n	800807e <__swsetup_r+0x9a>
 8008068:	2200      	movs	r2, #0
 800806a:	60a2      	str	r2, [r4, #8]
 800806c:	6962      	ldr	r2, [r4, #20]
 800806e:	4252      	negs	r2, r2
 8008070:	61a2      	str	r2, [r4, #24]
 8008072:	6922      	ldr	r2, [r4, #16]
 8008074:	b942      	cbnz	r2, 8008088 <__swsetup_r+0xa4>
 8008076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800807a:	d1c5      	bne.n	8008008 <__swsetup_r+0x24>
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	0799      	lsls	r1, r3, #30
 8008080:	bf58      	it	pl
 8008082:	6962      	ldrpl	r2, [r4, #20]
 8008084:	60a2      	str	r2, [r4, #8]
 8008086:	e7f4      	b.n	8008072 <__swsetup_r+0x8e>
 8008088:	2000      	movs	r0, #0
 800808a:	e7f7      	b.n	800807c <__swsetup_r+0x98>
 800808c:	20000040 	.word	0x20000040

08008090 <_raise_r>:
 8008090:	291f      	cmp	r1, #31
 8008092:	b538      	push	{r3, r4, r5, lr}
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	d904      	bls.n	80080a4 <_raise_r+0x14>
 800809a:	2316      	movs	r3, #22
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 30ff 	mov.w	r0, #4294967295
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80080a6:	b112      	cbz	r2, 80080ae <_raise_r+0x1e>
 80080a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ac:	b94b      	cbnz	r3, 80080c2 <_raise_r+0x32>
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 f830 	bl	8008114 <_getpid_r>
 80080b4:	4622      	mov	r2, r4
 80080b6:	4601      	mov	r1, r0
 80080b8:	4628      	mov	r0, r5
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080be:	f000 b817 	b.w	80080f0 <_kill_r>
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d00a      	beq.n	80080dc <_raise_r+0x4c>
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	d103      	bne.n	80080d2 <_raise_r+0x42>
 80080ca:	2316      	movs	r3, #22
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	2001      	movs	r0, #1
 80080d0:	e7e7      	b.n	80080a2 <_raise_r+0x12>
 80080d2:	2100      	movs	r1, #0
 80080d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80080d8:	4620      	mov	r0, r4
 80080da:	4798      	blx	r3
 80080dc:	2000      	movs	r0, #0
 80080de:	e7e0      	b.n	80080a2 <_raise_r+0x12>

080080e0 <raise>:
 80080e0:	4b02      	ldr	r3, [pc, #8]	@ (80080ec <raise+0xc>)
 80080e2:	4601      	mov	r1, r0
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f7ff bfd3 	b.w	8008090 <_raise_r>
 80080ea:	bf00      	nop
 80080ec:	20000040 	.word	0x20000040

080080f0 <_kill_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	@ (8008110 <_kill_r+0x20>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f7f9 fbcb 	bl	8001898 <_kill>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_kill_r+0x1c>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	b103      	cbz	r3, 800810c <_kill_r+0x1c>
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	20000500 	.word	0x20000500

08008114 <_getpid_r>:
 8008114:	f7f9 bbb8 	b.w	8001888 <_getpid>

08008118 <__swhatbuf_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008120:	2900      	cmp	r1, #0
 8008122:	b096      	sub	sp, #88	@ 0x58
 8008124:	4615      	mov	r5, r2
 8008126:	461e      	mov	r6, r3
 8008128:	da0d      	bge.n	8008146 <__swhatbuf_r+0x2e>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	bf14      	ite	ne
 8008136:	2340      	movne	r3, #64	@ 0x40
 8008138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800813c:	2000      	movs	r0, #0
 800813e:	6031      	str	r1, [r6, #0]
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	b016      	add	sp, #88	@ 0x58
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	466a      	mov	r2, sp
 8008148:	f000 f848 	bl	80081dc <_fstat_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	dbec      	blt.n	800812a <__swhatbuf_r+0x12>
 8008150:	9901      	ldr	r1, [sp, #4]
 8008152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800815a:	4259      	negs	r1, r3
 800815c:	4159      	adcs	r1, r3
 800815e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008162:	e7eb      	b.n	800813c <__swhatbuf_r+0x24>

08008164 <__smakebuf_r>:
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008168:	079d      	lsls	r5, r3, #30
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	d507      	bpl.n	8008180 <__smakebuf_r+0x1c>
 8008170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2301      	movs	r3, #1
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	b003      	add	sp, #12
 800817e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008180:	ab01      	add	r3, sp, #4
 8008182:	466a      	mov	r2, sp
 8008184:	f7ff ffc8 	bl	8008118 <__swhatbuf_r>
 8008188:	9f00      	ldr	r7, [sp, #0]
 800818a:	4605      	mov	r5, r0
 800818c:	4639      	mov	r1, r7
 800818e:	4630      	mov	r0, r6
 8008190:	f7fe febe 	bl	8006f10 <_malloc_r>
 8008194:	b948      	cbnz	r0, 80081aa <__smakebuf_r+0x46>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	059a      	lsls	r2, r3, #22
 800819c:	d4ee      	bmi.n	800817c <__smakebuf_r+0x18>
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	f043 0302 	orr.w	r3, r3, #2
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	e7e2      	b.n	8008170 <__smakebuf_r+0xc>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	6020      	str	r0, [r4, #0]
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081ba:	b15b      	cbz	r3, 80081d4 <__smakebuf_r+0x70>
 80081bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f81d 	bl	8008200 <_isatty_r>
 80081c6:	b128      	cbz	r0, 80081d4 <__smakebuf_r+0x70>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	431d      	orrs	r5, r3
 80081d8:	81a5      	strh	r5, [r4, #12]
 80081da:	e7cf      	b.n	800817c <__smakebuf_r+0x18>

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	@ (80081fc <_fstat_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7f9 fbb5 	bl	8001958 <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	20000500 	.word	0x20000500

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_isatty_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7f9 fbb4 	bl	8001978 <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000500 	.word	0x20000500

08008220 <_init>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr

0800822c <_fini>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	bf00      	nop
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr
